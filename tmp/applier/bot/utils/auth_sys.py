from ..applier_bot import ApplierBot
from .imports import *
from .helpers import *

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class Auth(ApplierBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app
    
    async def _ask_for_info(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)

        await context.bot.send_photo(
            usr.telegram_chat_id,
            photo="https://i.ibb.co/b1Tj1Fw/photo-2024-06-01-21-05-33.jpg",
            caption=f"üí∑ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>–ø–∞—Ä—Ç–Ω–µ—Ä!</b>\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ—é –∑–∞—è–≤–∫—É ‚¨áÔ∏è\n\n- –û—Ç–∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ ( –ø—Ä–∏–≤–∞—Ç/—Å–∫–∞–º/ —Ä–µ–∫–ª–∞–º–∞ )\n- –ù–∞–ø–∏—à–∏ –æ–±—ä–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≥–æ—Ç–æ–≤ –∑–∞–≥–æ–Ω—è—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ã\n- –ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ DRIP MONEY\n\n<i>–°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º, –Ω–∞ —Ç–≤–æ—é –∑–∞—è–≤–∫—É, —Å –ª—é–±–æ–≤—å—é –∫–æ–º–∞–Ω–¥–∞ <b>DRIP MONEY</b></i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                        text="üíé –í –º–µ–Ω—é",
                        callback_data="menu",
                )],
            ])
        )

        return 0

    async def _set_user_info(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)
        info = update.message.text.strip()
        
        try:
            usr.info = info
            usr.save()
            
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—á–ª–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="accept_sending_to_admin",
                    )],
                    [InlineKeyboardButton(
                        text="‚õîÔ∏è –û—Ç–º–µ–Ω–∞",
                        callback_data="menu",
                    )],
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                    )],
                ])
            )
        
        return 1

    async def _send_apply_to_admin(self, update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)       
        
        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        if not usr.verified_usr:
            admin = ApplyUser.objects.filter(telegram_username=os.environ.get("ADMIN_TO_APPLY_telegram_username")).first()

            try:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"ü§© <b>{usr.telegram_telegram_username}</b>, –∑–¥–∞—Ä–æ–≤–∞ –∞–¥–º–∏–Ω –µ–±–∞–Ω—ã–π!\n–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –±–æ—Ç–∞.\n\n–ù–∏–∫–Ω–µ–π–º: <b>{usr.telegram_telegram_username}</b>\n\n<b>–ò–Ω—Ñ–∞:</b>{usr.info if usr.info != None else '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'}\n\n–ü–æ–∏–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è —É —Å—Ç–∞—Ä—à–∏—Ö, –µ—Å—Ç—å —Ç–∞–∫–æ–π –∏–ª–∏ –Ω–µ—Ç.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å —é–∑–µ—Ä–∞ ‚úÖ",
                            callback_data=f"acception_user_true_{usr.telegram_chat_id}",
                        )], 
                        [InlineKeyboardButton(
                            text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                            callback_data=f"acception_user_false_{usr.telegram_chat_id}",
                        )]
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üõú <b>{usr.telegram_telegram_username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                )

            except Exception as e:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –Ω–∞—á–∞–ª–æ",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )
        
        return ConversationHandler.END

    @check_user_status
    async def _new_user_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        user_id, status = query.data.split("_")[-1], query.data.split("_")[-2]
        user_to_apply = ApplyUser.objects.filter(telegram_chat_id=user_id)      
        if status == "true":
            
            token = Token.objects.get_or_create(user=user_to_apply)
            
            try:
                user_to_apply.update(
                    verified_usr=True
                )

                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_to_apply.first().telegram_username}</b>.\n\nüí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é –º—ã –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    parse_mode="HTML",
                )

                context.user_data["user_id_applied"] = user_to_apply.first().id
                
                return 0

            except Exception as e:
                 await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                )
                
            return ConversationHandler.END
        
        else:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíò –í—ã –ø–æ—Å–ª–∞–ª–∏ –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_to_apply.first().telegram_username}</b>",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_apply.first().telegram_chat_id,
                    f"üíî <b>{user_to_apply.first().telegram_username}</b>, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É!",
                    parse_mode="HTML",
                )
                

            except Exception as e:
                 await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—ã–ª–∞–Ω–∏—è –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                )
                 
            return ConversationHandler.END

    @check_user_status
    async def _set_comission(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        try:
            user = ApplyUser.objects.get(pk=int(context.user_data["user_id_applied"]))
            comission = int(update.message.text)

            user.comission = comission
            user.save()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user.telegram_username}</b> –∫–æ–º–∏—Å—Å–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ - <b>{comission}%</b>.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                ])
            )

            await context.bot.send_message(
                user.telegram_chat_id,
                f"‚ù§Ô∏è‚Äçüî• <b>{user.telegram_username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç: <b>{user.comission}%</b>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –í –º–µ–Ω—é",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )

            return ConversationHandler.END

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                        )],
                ])
            )

            return ConversationHandler.END

    def reg_handlers(self):
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_info, "create_apply")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_user_info)],
                1: [CallbackQueryHandler(self._send_apply_to_admin, "accept_sending_to_admin")]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._new_user_acception, "^acception_user_")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_comission)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))