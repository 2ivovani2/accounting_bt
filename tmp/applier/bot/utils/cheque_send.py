from ..applier_bot import ApplierBot
from .imports import *
from .helpers import *

from partners_bot.bot.utils.delayed_func import check_cheque_status

from datetime import datetime, timedelta

from partners_bot.tasks import initialize_bot
from django.conf import settings

import logging, asyncio

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class ChequeWork(ApplierBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app

    @staticmethod
    async def get_partners_bot_instance():
        if settings.PARTNERS_BOT_INSTANCE is None:
            await initialize_bot()
        return settings.PARTNERS_BOT_INSTANCE

    @staticmethod
    async def get_file_url(bot, file_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL —Ñ–∞–π–ª–∞ –ø–æ file_id"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            file = await bot.get_file(file_id)
            full_url = file.file_path
            return full_url
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None

    @staticmethod
    def effective_message_type(message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if message.photo:
            return "photo"
        elif message.document:
            return "document"
        else:
            return "unknown"

    @staticmethod
    def get_extension(media_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ç–∏–ø—É –º–µ–¥–∏–∞."""
        extensions = {
            "photo": "jpg",
            "document": "pdf",  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        return extensions.get(media_type, "bin")

    @check_user_status
    async def _ask_for_cheque_amount(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Å—É–º–º—ã

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —á–µ–∫–∞(–æ–≤)",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="menu",
                )],
            ])
        )
        
        return 0

    @check_user_status
    async def _ask_for_photo(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ–∫–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        usr, _ = await user_get_by_update(update)
        
        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        try:
            context.user_data["cheque_amount"] = int(update.message.text.strip())
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞(–æ–≤).\n\n<blockquote>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 1 —á–µ–∫–∞, —Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ —á–µ–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —á–µ–∫.</blockquote>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )],
                ])
            )

            return 1

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                        )],
                ])
            )
            return ConversationHandler.END

    @check_user_status
    async def _send_photo_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞."""

        async def send_single_media(
            source_bot,
            target_bot,
            message,
            usr,
            amt,
            new_cheque,
            admin,
            context
        ):
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ —Ü–µ–ª–µ–≤–æ–π –±–æ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""

            try:
                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
                file_id = message.photo[-1].file_id if message.photo else message.effective_attachment.file_id
                media_type = ChequeWork.effective_message_type(message)
                file_url = await ChequeWork.get_file_url(source_bot, file_id)
                if not file_url:
                    await target_bot.send_message(
                        usr.telegram_chat_id,
                        "‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üîô –í –º–µ–Ω—é",
                                callback_data="menu",
                            )],
                        ])
                    )
                    return ConversationHandler.END

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                async with aiohttp.ClientSession() as session:
                    async with session.get(file_url) as resp:
                        if resp.status != 200:
                            await target_bot.send_message(
                                usr.telegram_chat_id,
                                "‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.",
                                parse_mode="HTML",
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton(
                                        text="üîô –í –º–µ–Ω—é",
                                        callback_data="menu",
                                    )],
                                ])
                            )
                            return ConversationHandler.END
                        file_bytes = await resp.read()
                        file_stream = BytesIO(file_bytes)
                        file_stream.name = f"{media_type}.{ChequeWork.get_extension(media_type)}"

                # –°–æ–∑–¥–∞—ë–º InputMedia –æ–±—ä–µ–∫—Ç
                if media_type == "photo":
                    media_item = InputMediaPhoto(media=file_stream, caption=message.caption_html)
                elif media_type == "document":
                    media_item = InputMediaDocument(media=file_stream, caption=message.caption_html)
                else:
                    await target_bot.send_message(
                        usr.telegram_chat_id,
                        f"‚õîÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üîô –í –º–µ–Ω—é",
                                callback_data="menu",
                            )],
                        ])
                    )
                    return ConversationHandler.END

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ —Ü–µ–ª–µ–≤–æ–π –±–æ—Ç
                await target_bot.send_media_group(chat_id=admin.telegram_chat_id, media=[media_item])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
                msg = await target_bot.send_message(
                    admin.telegram_chat_id,
                    f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º <b>{usr.reks.card_number if usr.reks else 'üå™Ô∏è'}</b> - <i>{usr.reks.card_owner_name if usr.reks else 'üå™Ô∏è'}</i> –Ω–∞ —Å—É–º–º—É <b>{amt}</b> —Ä—É–±–ª–µ–π.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                            callback_data=f"acception_cheque_true_{new_cheque.cheque_id}",
                        )],
                        [InlineKeyboardButton(
                            text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚õîÔ∏è",
                            callback_data=f"acception_cheque_false_{new_cheque.cheque_id}",
                        )]
                    ])
                )
                await msg.pin()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                await source_bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –í–∞—à —á–µ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\n<blockquote>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</blockquote>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ",
                            callback_data="send_cheque",
                        )],
                        [InlineKeyboardButton(
                            text="üîô –í –º–µ–Ω—é",
                            callback_data="menu",
                        )],
                    ])
                )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await target_bot.send_message(
                    usr.telegram_chat_id,
                    f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                        )],
                    ])
                )
                return ConversationHandler.END

        async def media_group_sender(
            source_bot,
            target_bot,
            group_id,
            usr,
            amt,
            new_cheque,
            admin,
            context
        ):
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ —Ü–µ–ª–µ–≤–æ–π –±–æ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""

            media_groups = context.bot_data.get('media_groups', {})
            media_data = media_groups.pop(group_id, [])

            timers = context.bot_data.get('timers', {})
            timers.pop(group_id, None)

            if not media_data:
                logger.info("–ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

            media_to_send = []
            for msg in media_data:
                media_type = msg.get("media_type")
                file_id = msg.get("media_id")
                caption = msg.get("caption")

                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
                file_url = await ChequeWork.get_file_url(source_bot, file_id)
                if not file_url:
                    continue

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(file_url) as resp:
                            if resp.status != 200:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ URL: {file_url}")
                                continue
                            file_bytes = await resp.read()
                            file_stream = BytesIO(file_bytes)
                            file_stream.name = f"{media_type}.{ChequeWork.get_extension(media_type)}"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    continue

                # –°–æ–∑–¥–∞—ë–º InputMedia –æ–±—ä–µ–∫—Ç
                if media_type == "photo":
                    media_item = InputMediaPhoto(media=file_stream, caption=caption)
                elif media_type == "document":
                    media_item = InputMediaDocument(media=file_stream, caption=caption)
                else:
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
                    continue

                media_to_send.append(media_item)

            if not media_to_send:
                logger.info("–ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            try:
                await target_bot.send_media_group(chat_id=admin.telegram_chat_id, media=media_to_send)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
            try:
                msg = await target_bot.send_message(
                    admin.telegram_chat_id,
                    f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º <b>{usr.reks.card_number if usr.reks else 'üå™Ô∏è'}</b> - <i>{usr.reks.card_owner_name if usr.reks else 'üå™Ô∏è'}</i> –Ω–∞ —Å—É–º–º—É <b>{amt}</b> —Ä—É–±–ª–µ–π.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                            callback_data=f"acception_cheque_true_{new_cheque.cheque_id}",
                        )],
                        [InlineKeyboardButton(
                            text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚õîÔ∏è",
                            callback_data=f"acception_cheque_false_{new_cheque.cheque_id}",
                        )]
                    ])
                )
                await msg.pin()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            try:
                await source_bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –í–∞—à–∏ —á–µ–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n<blockquote>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</blockquote>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ",
                            callback_data="send_cheque",
                        )],
                        [InlineKeyboardButton(
                            text="üîô –í –º–µ–Ω—é",
                            callback_data="menu",
                        )],
                    ])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
            return ConversationHandler.END

        admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()
        if not admin:
            print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        usr, _ = await user_get_by_update(update)
        partners_bot = await ChequeWork.get_partners_bot_instance() if usr.reks and not usr.reks.is_emergency else context.bot

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —á–µ–∫–∞ –∏–∑ user_data
        try:
            amt = int(context.user_data.get('cheque_amount'))
            new_cheque = Cheque(
                cheque_id=f"#{secrets.token_urlsafe(int(os.environ.get('IDS_LEN'))).replace('_', '')}",
                cheque_sum=amt,
                cheque_owner=usr,
                income=(amt * usr.comission * 0.01)
            )
            new_cheque.save()
        except Exception as e:
            await partners_bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è –í–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n\n<pre>{e}</pre>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –í –º–µ–Ω—é",
                        callback_data="menu",
                    )],
                ])
            )
            return ConversationHandler.END

        message = update.effective_message
        group_id = message.media_group_id
        
        if group_id:
            media_type = ChequeWork.effective_message_type(message)
            media_id = (
                message.photo[-1].file_id
                if message.photo
                else message.effective_attachment.file_id
            )

            msg_dict = {
                "media_type": media_type,
                "media_id": media_id,
                "caption": message.caption_html,
                "post_id": message.message_id,
            }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.bot_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
            media_groups = context.bot_data.setdefault('media_groups', {})
            media_groups.setdefault(group_id, []).append(msg_dict)
            
            timers = context.bot_data.setdefault('timers', {})

            if group_id not in timers:
                
                async def delayed_media_group_sender():
                    await asyncio.sleep(2.0)
                    await media_group_sender(
                        source_bot=context.bot,
                        target_bot=partners_bot,
                        group_id=group_id,
                        usr=usr,
                        amt=amt,
                        new_cheque=new_cheque,
                        admin=admin,
                        context=context
                    )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
                asyncio.create_task(delayed_media_group_sender())

                timers[group_id] = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

            run_time = datetime.now() + timedelta(hours=3)
            if usr.reks and not usr.reks.is_emergency:
                settings.SCHEDULER.add_job(check_cheque_status, 'date', run_date=run_time, args=[context.bot, partners_bot, usr, admin, new_cheque, context.bot_data.get("usdt_price", 100.0)])
                
                if settings.SCHEDULER.state != 1:
                    settings.SCHEDULER.start()

            return 1  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            await send_single_media(
                source_bot=context.bot,
                target_bot=partners_bot,
                message=message,
                usr=usr,
                amt=amt,
                new_cheque=new_cheque,
                admin=admin,
                context=context
            )

            return ConversationHandler.END

    
    @check_user_status
    async def _new_cheque_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        
        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        try:
            new_cheque = Cheque.objects.filter(cheque_id=query.data.split("_")[-1]).first()
            amount, status = new_cheque.cheque_sum, query.data.split("_")[-2]

            user_to_update = new_cheque.cheque_owner

            if status == "true":
                new_cheque.is_applied = True
                user_to_update.balance = round(user_to_update.balance, 2) + round(float(amount) - (float(amount) * user_to_update.comission * 0.01), 2)
                user_to_update.save()

                if Ref.objects.filter(whom_invited=user_to_update).exists():
                    ref_relation = Ref.objects.filter(whom_invited=user_to_update).first()
                    ref_relation.ref_income += int(amount) * 0.01 * int(os.environ.get("REF_PERCENT", 1))
                    ref_relation.save()

                    who_invited = ref_relation.who_invited
                    who_invited.balance = round(who_invited.balance, 2) + round(float(amount) * 0.01 * int(os.environ.get("REF_PERCENT", 1)), 2)
                    who_invited.save()

                    await context.bot.send_message(
                        who_invited.telegram_chat_id,
                        f"üí∞ <i>–ù–û–í–û–ï –ü–û–°–¢–£–ü–õ–ï–ù–ò–ï</i> üí∞\n\n<blockquote>‚Ä¢ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª - <b>{user_to_update.username}</b>\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{new_cheque.cheque_sum}</b>\n‚Ä¢ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å - <b>{int(int(new_cheque.cheque_sum) * 0.01 * int(os.environ.get('REF_PERCENT', 1)))}‚ÇΩ</b></blockquote>\n\n–°—É–º–º–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                        parse_mode="HTML",
                    )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü™õ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–µ–∫ <b>{new_cheque.cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}</b>.",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_update.telegram_chat_id,
                    f"‚úÖ –ß–µ–∫ <b>{new_cheque.cheque_id}</b> –ø—Ä–∏–Ω—è—Ç!\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{new_cheque.cheque_sum}‚ÇΩ</b>\n‚Ä¢ –î–∞—Ç–∞ —á–µ–∫–∞ - <b>{str(new_cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b>\n‚Ä¢ –í–∞—à–∞ –¥–æ–ª—è - <b>{new_cheque.cheque_sum - new_cheque.income}‚ÇΩ</b>\n‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - <b>{user_to_update.balance}‚ÇΩ</b>",
                    parse_mode="HTML",
                    reply_markup = None
                )

            else:
                new_cheque.is_denied = True
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚öîÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —á–µ–∫ <b>{new_cheque.cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}</b>.",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_update.telegram_chat_id,
                    f"üìõ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à(–∏) —á–µ–∫(–∏) <b>{new_cheque.cheque_id}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                    parse_mode="HTML",
                    reply_markup = None
                )

            new_cheque.save()
            
        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üí£ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
            )

    def reg_handlers(self):
        self.application.add_handler(CallbackQueryHandler(self._new_cheque_acception, "^acception_cheque_"))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_cheque_amount, "send_cheque")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._ask_for_photo)],
                1: [MessageHandler(filters.PHOTO, self._send_photo_to_admin)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start), CallbackQueryHandler(self._ask_for_cheque_amount, "send_cheque")],
            conversation_timeout=300
        ))
