from ..applier_bot import ApplierBot
from .imports import *
from .helpers import *

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class WithdrawsWork(ApplierBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app
    
    @check_user_status
    async def _withdraw_menu(update: Update, context: CallbackContext) -> None:
        """ –ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞
        
            Args:
                Update (_type_): –æ–±—ä–µ–∫—Ç update
                context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 

        usr, _ = await user_get_by_update(update)

        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"<b>‚íæ –í—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</b>\n<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞\n–ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤—ã–≤–æ–¥ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫—É—Ä—Å—É bybit/okx\n–£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—à–µ–º –¥–æ–ø –∫–æ–º–∏—Å—Å–∏—é –≤ –≤–∏–¥–µ 2$ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –Ω–∞ USDT TRC20 (–∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏) </blockquote>\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{usr.balance}‚ÇΩ</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        text="üí∞ USDT TRC20",
                        callback_data="get_money_crypto"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí≥ –ö–∞—Ä—Ç–∞",
                        callback_data="get_money_fiat"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", 
                        callback_data="profile"
                    )
                ]
            ])
        )

    @check_user_status
    async def _ask_for_money_withdraw(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        type_of_withdraw = query.data.split("_")[-1]

        if usr.has_active_withdraw and Withdraw.objects.filter(withdraw_owner=usr, is_applied=False).exists():
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üìõ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥, –ø–æ–∫–∞ –ø—Ä–æ—à–ª—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω.\n\n<blockquote>–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ–ª—å –∫ –∞–¥–º–∏–Ω–∏c—Ç–∞—Ä—Ç–æ—Ä—É.</blockquote>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üÜò –ü–æ–º–æ—â—å",
                        url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )],
                ])
            )
        else:
            if int(usr.balance) >= int(os.environ.get("MIN_SUM_TO_WITHDRAW")):
                if type_of_withdraw == "crypto":
                    context.user_data["withdraw_type"] = "crypto"
                    price = context.bot_data.get("usdt_price", None)
                    
                    if not price:
                        try:
                            url = "https://api.binance.com/api/v3/ticker/price"
                            params = {
                                "symbol": "USDTRUB"
                            }
                            response = requests.get(url, params=params)
                            ticker_info = response.json()

                            if 'price' in ticker_info:
                                context.user_data["usdt_price"] = round(float(ticker_info['price']), 2) + float(os.environ.get("NADBAVKA"))
                                await context.bot.send_message(
                                    usr.telegram_chat_id,
                                    f"ü§© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ <b><u>USDT</u></b> –≤ —Å–µ—Ç–∏ <b><u>TRC20</u></b>.\n\n<blockquote>–í–ê–ñ–ù–û!! –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.</blockquote>",
                                    parse_mode="HTML",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton(
                                            text="üîô –ù–∞–∑–∞–¥",
                                            callback_data="profile",
                                        )],
                                    ])
                                )

                                return 0

                            else:
                                await context.bot.send_message(
                                    usr.telegram_chat_id,
                                    f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                    parse_mode="HTML",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton(
                                                text="üíé –í –º–µ–Ω—é",
                                                callback_data="menu",
                                        )],
                                        [InlineKeyboardButton(
                                                text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                                        )],
                                    ])
                                )

                        except Exception as e:
                            usr.has_active_withdraw = False
                            usr.save()
                            
                            await context.bot.send_message(
                                usr.telegram_chat_id,
                                f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                                parse_mode="HTML",
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton(
                                            text="üíé –í –º–µ–Ω—é",
                                            callback_data="menu",
                                    )],
                                    [InlineKeyboardButton(
                                            text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                                    )],
                                ])
                            )
                    else:
                        context.user_data["usdt_price"] = price
                        
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            f"ü§© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ <b><u>USDT</u></b> –≤ —Å–µ—Ç–∏ <b><u>TRC20</u></b>.\n\n–í–ê–ñ–ù–û!! –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="üîô –ù–∞–∑–∞–¥",
                                    callback_data="menu",
                                )],
                            ])
                        )

                        return 0
                else:
                    context.user_data["withdraw_type"] = "fiat"
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Ä—è–¥–æ–º –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n<blockquote>–í–ê–ñ–ù–û!! –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.</blockquote>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data="menu",
                            )],
                        ])
                    )

                    return 0

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üìõ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–µ <b>{os.environ.get('MIN_SUM_TO_WITHDRAW')}‚ÇΩ</b>.\n\n<blockquote>–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ–ª—å –∫ –∞–¥–º–∏–Ω–∏c—Ç–∞—Ä—Ç–æ—Ä—É.</blockquote>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data="menu",
                            ),
                            InlineKeyboardButton(
                                text="üÜò –ü–æ–º–æ—â—å",
                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )
                        ],
                    ])
                )

            return ConversationHandler.END

    @check_user_status
    async def _send_withdraw_appliment(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        withdraw_type = context.user_data.get("withdraw_type", None)
        if withdraw_type == "crypto":
            usdt_address = update.message.text.strip()

            def is_trc20_address(address):
                if len(address) != 34:
                    return False
                if address[0] != 'T':
                    return False
                try:
                    decoded = base58.b58decode_check(address)
                    if len(decoded) == 21:
                        return True
                except ValueError:
                    return False
                return False

            if is_trc20_address(usdt_address):
                context.user_data['usdt_address'] = usdt_address
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"–í—ã –æ—Ç—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–¥—Ä–µ—Å <b>USDT</b> –≤ —Å–µ—Ç–∏ <b>TRC-20</b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )],
                    ])
                )
                return ConversationHandler.END

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{usr.balance - (usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance)}‚ÇΩ</b>\n‚úîÔ∏è –ö—É—Ä—Å: <b>{context.user_data['usdt_price']}‚ÇΩ</b>\n‚úîÔ∏è –ê–¥—Ä–µ—Å TRC-20: <i>{context.user_data['usdt_address']}</i>\n\n–ò—Ç–æ–≥: <b><u>{round(((usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance) / context.user_data['usdt_price']) - 2.00, 2)} USDT</u></b>\n\n* <i>2$ - –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ USDT —Å–∞–º–æ–π –±–∏—Ä–∂–∏.</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
                            callback_data="apply_withdraw",
                    )],
                    [InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="profile",
                    )],
                ])
            )
        elif withdraw_type == "fiat":
            card_number = update.message.text.strip()
            context.user_data["card_number"] = card_number
            
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{(usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance)}‚ÇΩ</b>\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <pre>{card_number}</pre>\n\n* <i>–ú–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ –±–∞–Ω–∫–æ–≤.</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
                            callback_data="apply_withdraw",
                    )],
                    [InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="profile",
                    )],
                ])
            )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                            text="üÜò –ü–æ–º–æ—â—å",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _send_withdraw_appliment_to_admin(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()
        
        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        usr.has_active_withdraw = True
        usr.save()


        withdraw_type = context.user_data.get("withdraw_type", None)
        if withdraw_type == "crypto":
            try: 
                logging.info("---------------------------------")
                logging.info(usr.balance)
                logging.info(context.user_data["usdt_price"])
                logging.info((usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance))
                logging.info(((usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance) / context.user_data['usdt_price']))
                logging.info(round(((usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance) / context.user_data['usdt_price']) - 2.00, 2))
                logging.info("---------------------------------")

                order = Withdraw(
                    withdraw_id = f"#{secrets.token_urlsafe(int(os.environ.get('IDS_LEN')))}".replace("_", ""),
                    withdraw_sum = round(usr.balance, 2) - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * round(usr.balance, 2),
                    withdraw_owner = usr,
                    withdraw_address = context.user_data["usdt_address"],
                    course = context.user_data["usdt_price"],
                    usdt_sum = round(((usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance) / context.user_data['usdt_price']) - 2.00, 2)
                )

                order.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"–ó–∞—è–≤–∫–∞ <b>{order.withdraw_id}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n<blockquote>–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–≤–æ–¥–∞, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3-6 —á–∞—Å–æ–≤.\n–í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è.</blockquote>",
                    parse_mode="HTML",
                )
                
                msg = await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"<b>{usr.username}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b>:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{order.withdraw_sum}‚ÇΩ</b>\n‚úîÔ∏è –ö—É—Ä—Å: <b>{context.user_data['usdt_price']}‚ÇΩ</b>\n‚úîÔ∏è –ê–¥—Ä–µ—Å TRC-20: <i>{context.user_data['usdt_address']}</i>\n\n–ò—Ç–æ–≥: <b><u>{order.usdt_sum} USDT</u></b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ä–¥–µ—Ä –æ–ø–ª–∞—á–µ–Ω ‚úÖ",
                            callback_data=f"order_paid_{usr.telegram_chat_id}_{order.withdraw_id}",
                        )],
                        [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä üìõ",
                            callback_data=f"order_reject_{usr.telegram_chat_id}_{order.withdraw_id}",
                        )],
                    ])
                )

                await msg.pin()

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="üÜò –ü–æ–º–æ—â—å",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )
        elif withdraw_type == "fiat":
            try: 
                order = Withdraw(
                    withdraw_id = f"#{secrets.token_urlsafe(int(os.environ.get('IDS_LEN')))}".replace("_", ""),
                    withdraw_sum = round(usr.balance - int(os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2)) * 0.01 * usr.balance, 2),
                    withdraw_owner = usr,
                    withdraw_card_number = context.user_data["card_number"],
                )

                order.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"–ó–∞—è–≤–∫–∞ <b>{order.withdraw_id}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n<blockquote>–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–≤–æ–¥–∞, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3-6 —á–∞—Å–æ–≤.\n–í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è.</blockquote>",
                    parse_mode="HTML",
                )
                
                msg = await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"<b>{usr.username}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b>:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{order.withdraw_sum}‚ÇΩ</b>\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <pre>{order.withdraw_card_number}</pre>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ä–¥–µ—Ä –æ–ø–ª–∞—á–µ–Ω ‚úÖ",
                            callback_data=f"order_paid_{usr.telegram_chat_id}_{order.withdraw_id}",
                        )],
                        [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä üìõ",
                            callback_data=f"order_reject_{usr.telegram_chat_id}_{order.withdraw_id}",
                        )],
                    ])
                )

                await msg.pin()

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="üÜò –ü–æ–º–æ—â—å",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                            text="üÜò –ü–æ–º–æ—â—å",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _apply_withdraw_appliment(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        status, user_id, withdraw_id = query.data.split("_")[-3], query.data.split("_")[-2], query.data.split("_")[-1] 

        if status == "paid":
            try:
                order = Withdraw.objects.filter(withdraw_id=withdraw_id)
                order.update(
                    is_applied=True
                )

                order = order.first()
                user_whom_applied = ApplyUser.objects.filter(telegram_chat_id=user_id).first()
                
                user_whom_applied.balance = round(user_whom_applied.balance, 2) - (round(order.withdraw_sum) + (order.withdraw_sum / (1 - os.environ.get("COMISSION_AMT_FOR_UNLIM_SENDS", 2) * 0.01)))
                user_whom_applied.save()
                
                if order.withdraw_address:
                    await context.bot.send_message(
                        user_whom_applied.telegram_chat_id,
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b> –∏—Å–ø–æ–ª–Ω–µ–Ω–∞!\n\n<blockquote>–°—É–º–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {order.usdt_sum}USDT —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç.</blockquote>",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )], 
                        ])
                    )

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"üëÖ <b>{usr.username}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.usdt_sum} USDT</b> –æ—Ç <b>{user_whom_applied.username}</b>.",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )], 
                        ])
                    )
                else:
                    await context.bot.send_message(
                        user_whom_applied.telegram_chat_id,
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b> –∏—Å–ø–æ–ª–Ω–µ–Ω–∞!\n\n<blockquote>–°—É–º–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {order.withdraw_sum}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç.</blockquote>",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )],
                        ])
                    )

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"üëÖ <b>{usr.username}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.withdraw_sum}‚ÇΩ —Ñ–∏–∞—Ç–æ–º</b> –æ—Ç <b>{user_whom_applied.username}</b>.",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )], 
                        ])
                    )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="üÜò –ü–æ–º–æ—â—å",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )
        else:
            try:
                order = Withdraw.objects.filter(withdraw_id=withdraw_id).first()
                user_whom_applied = ApplyUser.objects.filter(telegram_chat_id=user_id).first()
                
                if order.withdraw_address:
                    await context.bot.send_message(
                        user_whom_applied.telegram_chat_id,
                        f"üìõ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.usdt_sum}USDT</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n<blockquote>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä—É.</blockquote>",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )], 
                            [InlineKeyboardButton(
                                text="üÜò –ü–æ–º–æ—â—å",
                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )],
                            
                        ])
                    )

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"üìõ <b>{usr.username}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ—Ä–¥–µ—Ä <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.usdt_sum} USDT</b> –æ—Ç <b>{user_whom_applied.username}</b>.",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé–í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )], 
                        ])
                    )
                else:
                    await context.bot.send_message(
                        user_whom_applied.telegram_chat_id,
                        f"üìõ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.withdraw_sum}‚ÇΩ</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n<blockquote>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä—É.</blockquote>",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data=f"menu",
                            )], 
                            [InlineKeyboardButton(
                                text="üÜò –ü–æ–º–æ—â—å",
                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )],
                            
                        ])
                    )

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå <b>{usr.username}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.withdraw_sum}‚ÇΩ —Ñ–∏–∞—Ç–æ–º</b> –æ—Ç <b>{user_whom_applied.username}</b>.",
                        parse_mode="HTML",
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üîô",
                                callback_data=f"menu",
                            )], 
                        ])
                    )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="üÜò –ü–æ–º–æ—â—å",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )

        user_whom_applied.has_active_withdraw = False
        user_whom_applied.save()

    def reg_handlers(self):
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_money_withdraw, "^get_money_")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._send_withdraw_appliment)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(CallbackQueryHandler(self._withdraw_menu, "withdraw_menu"))
        self.application.add_handler(CallbackQueryHandler(self._send_withdraw_appliment_to_admin, "apply_withdraw"))
        self.application.add_handler(CallbackQueryHandler(self._apply_withdraw_appliment, "^order_"))
