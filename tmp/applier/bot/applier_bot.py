from .utils.imports import *
from .utils.helpers import *


class ApplierBot:
    
    def __init__(self) -> None:
        """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ø–∞
        """
            
        self.application = (
            ApplicationBuilder()
            .token(os.environ.get('APPLIER_BOT_TOKEN'))
            .build()
        )

    async def _start(self, update: Update, context: CallbackContext):
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        usr, created = await user_get_by_update(update)
        
        if context.args and created:
            try:
                ref_id = int(context.args[0])
                if ApplyUser.objects.filter(telegram_chat_id=ref_id).exists():
                    who_invited = ApplyUser.objects.filter(telegram_chat_id=ref_id).first()
                    Ref(
                        who_invited=who_invited,
                        whom_invited=usr
                    ).save()
            except:
                pass


        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        if not usr.verified_usr:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="ü§òüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                        callback_data="create_apply",
                    )]
                ])
            )
        else:
            if not usr.is_superuser:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø–∞—Ä—Ç–Ω–µ—Ä üíé</b>\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ <b>DRIP MONEY</b>\n\n<a href='https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}'>–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a> / <a href='{os.environ.get('NEWS_LINK')}'>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton(
                                text="üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫",
                                callback_data="send_cheque",
                            ),
                            InlineKeyboardButton(
                                text="üíé –ü—Ä–æ—Ñ–∏–ª—å",
                                callback_data="profile",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üìÑ –£—Å–ª–æ–≤–∏—è",
                                url=f"{os.environ.get('DOC_LINK')}"
                            )
                        ]
                    ])
                )
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü§© <b>{usr.username}</b>, –ø—Ä–∏–≤–µ—Ç–∏–∫!",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä",
                            callback_data="stat",
                        )],
                        [InlineKeyboardButton(
                            text="–ú–µ—Ç—Ä–∏–∫–∏ –¥–Ω—è ‚≠êÔ∏è",
                            callback_data="metrics",
                        )],
                        [InlineKeyboardButton(
                            text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å üí≤",
                            callback_data="set_course",
                        )],
                        [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∫–∞ üëÄ",
                            web_app=WebAppInfo(url=f"{os.environ.get('DOMAIN_NAME')}/admin")
                        )]
                    ])
                )

        return ConversationHandler.END
    
    @check_user_status
    async def _profile(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        
        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        total_money = 0
        for cheque in Cheque.objects.filter(cheque_owner=usr).all():
            total_money += cheque.cheque_sum * (1 - usr.comission * .01)

        if context.bot_data.get("usdt_price", ""):
            course = context.bot_data["usdt_price"]
        else:
            try:
                url = "https://api.binance.com/api/v3/ticker/price"
                params = {
                    "symbol": "USDTRUB"
                }
                response = requests.get(url, params=params)
                ticker_info = response.json()

                if 'price' in ticker_info:
                    course = round(float(ticker_info['price']), 2) + float(os.environ.get("NADBAVKA"))
                else:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                    text="üíé –í –º–µ–Ω—é",
                                    callback_data="menu",
                            )],
                            [InlineKeyboardButton(
                                    text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                    url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )],
                        ])
                    )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data="menu",
                        )],
                        [InlineKeyboardButton(
                                text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"<b>‚íæ <u>ID –ø—Ä–æ—Ñ–∏–ª—è</u></b> - {usr.telegram_chat_id}\n\n¬∑ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{usr.balance}‚ÇΩ</b>\n¬∑ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{round(total_money, 1)}‚ÇΩ</b>\n¬∑ –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: <b>{usr.comission}%</b>\n¬∑ –ö—É—Ä—Å USDT/RUB: <b>{course}‚ÇΩ</b>\n\n<b>–í–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö –Ω–µ–ø–æ–ª–∞–¥–∫–∏ ‚§µÔ∏è</b> @{os.environ.get('ADMIN_TO_APPLY_USERNAME')}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [
                    
                    InlineKeyboardButton(
                        text="‚åõÔ∏è –í—ã–≤–æ–¥", 
                        callback_data="withdraw_menu"
                    ),
                    InlineKeyboardButton(
                        text="üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", 
                        callback_data="send_cheque"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üìÜ –ò—Å—Ç–æ—Ä–∏—è",
                        callback_data="today_hist",
                    ),
                    InlineKeyboardButton(
                        text="üíµ –†–µ–∫–≤–∏–∑–∏—Ç—ã", 
                        callback_data="reks"
                    ),
                
                ],
                [
                    InlineKeyboardButton(
                        text="üîó –†–µ—Ñ–µ—Ä–∞–ª—ã", 
                        callback_data="refs"
                    ),
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", 
                        callback_data="menu"
                    )
                ],
            ])
        )

    @check_user_status
    async def _reks_info(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        if usr.reks:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üî¥ –í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n<pre>{usr.reks.card_number} - {usr.reks.sbp_phone_number} - {usr.reks.card_owner_name} - {usr.reks.bank_name}</pre>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", 
                            callback_data="profile"
                        )
                    ]
                ])
            )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü•∂ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            text="ü§© –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", 
                            callback_data="get_reks"
                        ),
                    ] if not usr.reks else [],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", 
                            callback_data="profile"
                        )
                    ]
                ])
            )

    @check_user_status
    async def _get_reks(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        free_processor = Processor.objects.filter(insurance_deposit__gte=10000)
        if free_processor.exists():
            free_reks = Reks.objects.filter(reks_owner=free_processor.first(), is_archived=False)
            if free_reks.exists():
                usr.reks = free_reks.first()
                usr.save()
             
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üí∏ –ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ <b>'–†–µ–∫–≤–∏–∑–∏—Ç—ã'</b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥", 
                                callback_data="profile"
                            )
                        ]
                    ])
                )
            
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üò≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n<blockquote>–ï—Å–ª–∏ –≤–∞–º <b>—Å—Ä–æ—á–Ω–æ</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.</blockquote>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥", 
                                callback_data="profile"
                            )
                        ]
                    ])
                )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üò≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n<blockquote>–ï—Å–ª–∏ –≤–∞–º <b>—Å—Ä–æ—á–Ω–æ</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.</blockquote>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", 
                            callback_data="profile"
                        )
                    ]
                ])
            )


    @check_user_status
    async def _refs_info(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        usr_refs_relations = Ref.objects.filter(who_invited=usr).all()
        total_ref_income = sum([ref.ref_income for ref in usr_refs_relations])

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üí≥ –ü—Ä–∏–≥–ª–∞—Å–∏–≤ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>{os.environ.get('REF_PERCENT', 1)}%</b> –æ—Ç –µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞.\n\n<blockquote>üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{context.bot.username}?start={usr.telegram_chat_id}</blockquote>\n\n–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{len(usr_refs_relations)} —à—Ç.</b>\n–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_ref_income}‚ÇΩ</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", 
                        callback_data="profile"
                    )
                ]
            ])
        )

    @check_user_status
    async def _ask_for_course_from_admin(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è —É–∑–Ω–∞—á–∏ –∫—É—Ä—Å–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üòÄ –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–∏–º.",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –Ω–∞—á–∞–ª–æ üî∞",
                    callback_data=f"menu",
                )], 
                
            ])
        )

        return 0

    @check_user_status
    async def _set_course(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è —É–∑–Ω–∞—á–∏ –∫—É—Ä—Å–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        try:
            course = round(float(update.message.text.strip()), 2)
            context.bot_data["usdt_price"] = course
         
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫—É—Ä—Å <b>{course}</b>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                ])
            )

        return ConversationHandler.END

    def register_handlers(self) -> Application: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_course_from_admin, "set_course")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_course)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(CallbackQueryHandler(self._profile, "profile"))
        self.application.add_handler(CallbackQueryHandler(self._refs_info, "refs"))
        self.application.add_handler(CallbackQueryHandler(self._reks_info, "reks"))
        self.application.add_handler(CallbackQueryHandler(self._get_reks, "get_reks"))
        
        return self.application

    def set_last_handlers(self, application):
        application.add_handler(CommandHandler("start", self._start))
        application.add_handler(CallbackQueryHandler(self._start, "menu"))

        from django.conf import settings
        settings.CLIENT_APPLICATION = application
        settings.CLIENT_BOT_INSTANCE = application.bot

        return application



