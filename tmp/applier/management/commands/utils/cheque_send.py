from ..applier_bot import ApplierBot
from .imports import *
from .helpers import *

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class ChequeWork(ApplierBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app
        
    @check_user_status
    async def _ask_for_cheque_amount(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Å—É–º–º—ã

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —á–µ–∫–∞(–æ–≤)",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="menu",
                )],
            ])
        )
        
        return 0

    @check_user_status
    async def _ask_for_photo(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ–∫–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        usr, _ = await user_get_by_update(update)
        
        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        try:
            context.user_data["cheque_amount"] = int(update.message.text.strip())
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞(–æ–≤).\n\n<blockquote>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 1 —á–µ–∫–∞, —Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ —á–µ–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —á–µ–∫.</blockquote>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )],
                ])
            )

            return 1

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="üíé –í –º–µ–Ω—é",
                            callback_data="menu",
                        )],
                ])
            )
            return ConversationHandler.END

    @check_user_status
    async def _send_photo_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()
        usr, _ = await user_get_by_update(update)
        
        MEDIA_GROUP_TYPES = {
            "document": InputMediaDocument,
            "photo": InputMediaPhoto,
        }
    
        class MsgDict(TypedDict):
            media_type: Literal["photo"]
            media_id: str
            caption: str
            post_id: int
    
        async def media_group_sender(cont: ContextTypes.DEFAULT_TYPE):
            bot = cont.bot
            cont.job.data = cast(List[MsgDict], cont.job.data)
            media = []
            for msg_dict in cont.job.data:
                media.append(
                    MEDIA_GROUP_TYPES[msg_dict["media_type"]](
                        media=msg_dict["media_id"], caption=msg_dict["caption"]
                    )
                )
            if not media:
                return
            
            msgs = await bot.send_media_group(chat_id=admin.telegram_chat_id, media=media)
            await cont.bot.send_message(
                admin.telegram_chat_id,
                f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É <b>{amt}</b> —Ä—É–±–ª–µ–π.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                        callback_data=f"acception_cheque_true_{new_cheque.cheque_id}",
                    )], 
                    [InlineKeyboardButton(
                        text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                        callback_data=f"acception_cheque_false_{new_cheque.cheque_id}",
                    )]
                ])
            )

            await cont.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –í–∞—à —á–µ–∫(–∏) –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n<blockquote>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</blockquote>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ",
                        callback_data=f"send_cheque",
                    )], 
                    [InlineKeyboardButton(
                        text="üîô –í –º–µ–Ω—é",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )
            for index, msg in enumerate(msgs):
                cont.bot_data["messages"][
                    cont.job.data[index]["post_id"]
                ] = msg.message_id
            
            return ConversationHandler.END
        
        try:
            amt = int(context.user_data.get('cheque_amount'))
            new_cheque = Cheque(
                cheque_id=f"#{secrets.token_urlsafe(int(os.environ.get('IDS_LEN'))).replace('_', '')}",
                cheque_sum=amt,
                cheque_owner=usr,
                income=(amt * usr.comission * 0.01)
            )
            new_cheque.save()

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è –í–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n\n<pre>{e}</pre> ",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –í –º–µ–Ω—é",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )

            return ConversationHandler.END

        message = update.effective_message
        if message.media_group_id:
            media_type = effective_message_type(message)
            media_id = (
                message.photo[-1].file_id
                if message.photo
                else message.effective_attachment.file_id
            )
            msg_dict = {
                "media_type": media_type,
                "media_id": media_id,
                "caption": message.caption_html,
                "post_id": message.message_id,
            }
            jobs = context.job_queue.get_jobs_by_name(str(message.media_group_id))
            if jobs:
                jobs[0].data.append(msg_dict)
            else:
                context.job_queue.run_once(
                    callback=media_group_sender,
                    when=2,
                    data=[msg_dict],
                    name=str(message.media_group_id),
                )
        else:
            await context.bot.forward_message(
                chat_id=admin.telegram_chat_id,
                from_chat_id=usr.telegram_chat_id,
                message_id=update.message.message_id
            )
         
            await context.bot.send_message(
                admin.telegram_chat_id,
                f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É <b>{context.user_data.get('cheque_amount')}</b> —Ä—É–±–ª–µ–π.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                        callback_data=f"acception_cheque_true_{new_cheque.cheque_id}",
                    )], 
                    [InlineKeyboardButton(
                        text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                        callback_data=f"acception_cheque_false_{new_cheque.cheque_id}",
                    )]
                ])
            )

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –í–∞—à —á–µ–∫ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n<blockquote>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</blockquote>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ",
                        callback_data=f"send_cheque",
                    )], 
                    [InlineKeyboardButton(
                        text="üîô –í –º–µ–Ω—é",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )
            context.bot_data["messages"][message.message_id] = message.message_id 

    @check_user_status
    async def _new_cheque_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        
        query = update.callback_query
        if query:
            await query.answer()
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        # try:
        new_cheque = Cheque.objects.filter(cheque_id=query.data.split("_")[-1]).first()
        amount, status = new_cheque.cheque_sum, query.data.split("_")[-2]

        user_to_update = new_cheque.cheque_owner

        if status == "true":
            new_cheque.is_applied = True
            user_to_update.balance += int(amount) - (int(amount) * user_to_update.comission * 0.01)
            user_to_update.save()

            if Ref.objects.filter(whom_invited=user_to_update).exists():
                ref_relation = Ref.objects.filter(whom_invited=user_to_update).first()
                ref_relation.ref_income += int(amount) * 0.01 * int(os.environ.get("REF_PERCENT", 1))
                ref_relation.save()

                who_invited = ref_relation.who_invited
                who_invited.balance += int(amount) * 0.01 * int(os.environ.get("REF_PERCENT", 1))
                who_invited.save()

                await context.bot.send_message(
                    who_invited.telegram_chat_id,
                    f"üí∞ <i>–ù–û–í–û–ï –ü–û–°–¢–£–ü–õ–ï–ù–ò–ï</i> üí∞\n\n<blockquote>‚Ä¢ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª - <b>{user_to_update.username}</b>\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{new_cheque.cheque_sum}</b>\n‚Ä¢ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å - <b>{int(int(new_cheque.cheque_sum) * 0.01 * int(os.environ.get('REF_PERCENT', 1)))}‚ÇΩ</b></blockquote>\n\n–°—É–º–º–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                    parse_mode="HTML",
                )


            gc = gspread.service_account(filename=os.environ.get("GOOGLE_CREDS"))
            table = gc.open(os.environ.get("TABLE_NAME")).sheet1

            def table_update(date, value, user_name):
                length = len(table.col_values(1)) + 1

                table.update_cell(length, 1, date)
                table.update_cell(length, 2, int(value))
                table.update_cell(length, 3, user_name)

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü™õ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–µ–∫ <b>{new_cheque.cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}</b>.",
                parse_mode="HTML",
            )

            await context.bot.send_message(
                user_to_update.telegram_chat_id,
                f"‚úÖ –ß–µ–∫ <b>{new_cheque.cheque_id}</b> –ø—Ä–∏–Ω—è—Ç!\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{new_cheque.cheque_sum}‚ÇΩ</b>\n‚Ä¢ –î–∞—Ç–∞ —á–µ–∫–∞ - <b>{str(new_cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b>\n‚Ä¢ –í–∞—à–∞ –¥–æ–ª—è - <b>{new_cheque.cheque_sum - new_cheque.income}‚ÇΩ</b>\n‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - <b>{user_to_update.balance}‚ÇΩ</b>",
                parse_mode="HTML",
                reply_markup = None
            )

            try:
                table_update(str(new_cheque.cheque_date), new_cheque.cheque_sum, str(new_cheque.cheque_owner.username))
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üìÑ Google –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ß–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω.",
                    parse_mode="HTML",
                )
            except Exception as e:
                logging.info(f"Error in google table update - {e}")

        else:
            new_cheque.is_denied = True
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚öîÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —á–µ–∫ <b>{new_cheque.cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}</b>.",
                parse_mode="HTML",
            )

            await context.bot.send_message(
                user_to_update.telegram_chat_id,
                f"üìõ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à —á–µ–∫ <b>{new_cheque.cheque_id}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                parse_mode="HTML",
                reply_markup = None
            )

        new_cheque.save()
        
        # except Exception as e:
        #     await context.bot.send_message(
        #         usr.telegram_chat_id,
        #         f"üí£ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
        #         parse_mode="HTML",
        #     )

    def reg_handlers(self):
        self.application.add_handler(CallbackQueryHandler(self._new_cheque_acception, "^acception_cheque_"))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_cheque_amount, "send_cheque")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._ask_for_photo)],
                1: [MessageHandler(filters.PHOTO, self._send_photo_to_admin)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start), CallbackQueryHandler(self._ask_for_cheque_amount, "send_cheque")],
            conversation_timeout=300
        ))
