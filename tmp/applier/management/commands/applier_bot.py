from applier.models import *

from asgiref.sync import sync_to_async

import time
from typing import TypedDict, List, Literal, cast
import requests, base58
import os, django, logging, warnings, secrets
warnings.filterwarnings("ignore")

from django.core.management.base import BaseCommand

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    WebAppInfo,
    InputMediaPhoto,
    InputMediaDocument,
)

from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ApplicationBuilder,
    PicklePersistence,
)
from telegram.helpers import effective_message_type

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@sync_to_async
def user_get_by_update(update: Update):
    
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        _type_: instance, created
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = ApplyUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )
    
    return instance, created

def check_user_status(function):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    async def wrapper(self, update: Update, context:CallbackContext):   
        if update.message:
            message = update.message
        else:
            message = update.callback_query.message

        if not message.chat.username:
            username = "Anonymous"
        else:
            username = message.chat.username

        usr, _ = ApplyUser.objects.update_or_create(
            telegram_chat_id = message.chat.id,
            username=username
        )

        if usr.verified_usr:
            return await function(update, context)
            
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ü§òüèª",
                        callback_data="create_apply",
                    )]
                ])
            )
        
    return wrapper

class ApplierBot:
    
    def __init__(self) -> None:
        """"
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ø–∞
        """
        async def post_init(application: Application):
            if "messages" not in application.bot_data:
                application.bot_data = {"messages": {}}

        self.application = (
            ApplicationBuilder()
            .token(os.environ.get('APPLIER_BOT_TOKEN'))
            .post_init(post_init)
            .build()
        )
       
    async def _start(self, update: Update, context: CallbackContext):
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)
        

        if not usr.verified_usr:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ü§òüèª",
                        callback_data="create_apply",
                    )]
                ])
            )
        else:
            if not usr.is_superuser:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{usr.balance}‚ÇΩ</b>\nüí∞ –í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{usr.comission}%</b>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ üí∞",
                            callback_data="send_cheque",
                        )],
                        [InlineKeyboardButton(
                            text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—Ä–∏–ø—Ç–æ –≤—ã–≤–æ–¥ ‚ö°Ô∏è",
                            callback_data="get_money_crypto",
                        )], 
                        [InlineKeyboardButton(
                            text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–∏–∞—Ç –≤—ã–≤–æ–¥ üí≥",
                            callback_data="get_money_fiat",
                        )], 
                        [InlineKeyboardButton(
                            text="–û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üìÜ",
                            callback_data="today_hist",
                        )],
                    ])
                )
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü§© <b>{usr.username}</b>, –∑–¥–∞—Ä–æ–≤–∞ –∞–¥–º–∏–Ω <b>–ï–ë–ê–ù–´–ô</b>!",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä",
                            callback_data="stat",
                        )],
                        [InlineKeyboardButton(
                            text="–ú–µ—Ç—Ä–∏–∫–∏ –¥–Ω—è ‚≠êÔ∏è",
                            callback_data="metrics",
                        )],
                        # [InlineKeyboardButton(
                        #     text="–ê–¥–º–∏–Ω–∫–∞ üëÄ",
                        #     web_app=WebAppInfo(url=f"{os.environ.get('DOMAIN_NAME')}/admin")
                        # )]
                    ])
                )

        return ConversationHandler.END
    
    async def _ask_for_info(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)

        await context.bot.send_photo(
            usr.telegram_chat_id,
            photo="https://i.ibb.co/b1Tj1Fw/photo-2024-06-01-21-05-33.jpg",
            caption=f"üí∑ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>–ø–∞—Ä—Ç–Ω–µ—Ä!</b>\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ—é –∑–∞—è–≤–∫—É ‚¨áÔ∏è\n\n- –û—Ç–∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ ( –ø—Ä–∏–≤–∞—Ç/—Å–∫–∞–º/ —Ä–µ–∫–ª–∞–º–∞ )\n- –ù–∞–ø–∏—à–∏ –æ–±—ä–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≥–æ—Ç–æ–≤ –∑–∞–≥–æ–Ω—è—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ã\n- –ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ DRIP MONEY\n\n<i>–°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º, –Ω–∞ —Ç–≤–æ—é –∑–∞—è–≤–∫—É, —Å –ª—é–±–æ–≤—å—é –∫–æ–º–∞–Ω–¥–∞ <b>DRIP MONEY</b></i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üíé",
                        callback_data="menu",
                )],
            ])
        )

        return 0

    async def _set_user_info(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)
        info = update.message.text.strip()
        
        try:
            usr.info = info
            usr.save()
            
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—á–ª–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úîÔ∏è",
                        callback_data="accept_sending_to_admin",
                    )],
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                        callback_data="menu",
                    )],
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                ])
            )
        
        return 1

    async def _send_apply_to_admin(self, update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)       
        
        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        if not usr.verified_usr:
            admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()

            try:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"ü§© <b>{usr.username}</b>, –∑–¥–∞—Ä–æ–≤–∞ –∞–¥–º–∏–Ω –µ–±–∞–Ω—ã–π!\n–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –±–æ—Ç–∞.\n\n–ù–∏–∫–Ω–µ–π–º: <b>{usr.username}</b>\n\n<b>–ò–Ω—Ñ–∞:</b>{usr.info if usr.info != None else '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'}\n\n–ü–æ–∏–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è —É —Å—Ç–∞—Ä—à–∏—Ö, –µ—Å—Ç—å —Ç–∞–∫–æ–π –∏–ª–∏ –Ω–µ—Ç.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å —é–∑–µ—Ä–∞ ‚úÖ",
                            callback_data=f"acception_user_true_{usr.telegram_chat_id}",
                        )], 
                        [InlineKeyboardButton(
                            text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                            callback_data=f"acception_user_false_{usr.telegram_chat_id}",
                        )]
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üõú <b>{usr.username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                )

            except Exception as e:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )
        
        return ConversationHandler.END

    @check_user_status
    async def _new_user_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        user_id, status = query.data.split("_")[-1], query.data.split("_")[-2]
        user_to_apply = ApplyUser.objects.filter(telegram_chat_id=user_id)      
        if status == "true":

            try:
                user_to_apply.update(
                    verified_usr=True
                )

                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_to_apply.first().username}</b>.\n\nüí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é –º—ã –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    parse_mode="HTML",
                )

                context.user_data["user_id_applied"] = user_to_apply.first().id
                
                return 0

            except Exception as e:
                 await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                )
                
            return ConversationHandler.END
        
        else:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíò –í—ã –ø–æ—Å–ª–∞–ª–∏ –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_to_apply.first().username}</b>",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_apply.first().telegram_chat_id,
                    f"üíî <b>{user_to_apply.first().username}</b>, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É!",
                    parse_mode="HTML",
                )
                

            except Exception as e:
                 await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—ã–ª–∞–Ω–∏—è –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                )
                 
            return ConversationHandler.END

    @check_user_status
    async def _set_comission(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        try:
            user = ApplyUser.objects.get(pk=int(context.user_data["user_id_applied"]))
            comission = int(update.message.text)

            user.comission = comission
            user.save()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user.username}</b> –∫–æ–º–∏—Å—Å–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ - <b>{comission}%</b>.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                ])
            )

            await context.bot.send_message(
                user.telegram_chat_id,
                f"‚ù§Ô∏è‚Äçüî• <b>{user.username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç: <b>{user.comission}%</b>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )

            return ConversationHandler.END

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                        )],
                ])
            )

            return ConversationHandler.END

    @check_user_status
    async def _ask_for_cheque_amount(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Å—É–º–º—ã

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ôæÔ∏è –°—É–ø–µ—Ä, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É —á–µ–∫–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                    callback_data="menu",
                )],
            ])
        )
        
        return 0

    @check_user_status
    async def _ask_for_photo(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ–∫–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        usr, _ = await user_get_by_update(update)
        
        try:
            context.user_data["cheque_amount"] = int(update.message.text.strip())
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úîÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫(–∏).",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                        callback_data="menu",
                    )],
                ])
            )

            return 1

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                        )],
                ])
            )
            return ConversationHandler.END

    @check_user_status
    async def _send_photo_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()
        usr, _ = await user_get_by_update(update)
        
        MEDIA_GROUP_TYPES = {
            "document": InputMediaDocument,
            "photo": InputMediaPhoto,
        }
    
        class MsgDict(TypedDict):
            media_type: Literal["photo"]
            media_id: str
            caption: str
            post_id: int
    
        async def media_group_sender(cont: ContextTypes.DEFAULT_TYPE):
            bot = cont.bot
            cont.job.data = cast(List[MsgDict], cont.job.data)
            media = []
            for msg_dict in cont.job.data:
                media.append(
                    MEDIA_GROUP_TYPES[msg_dict["media_type"]](
                        media=msg_dict["media_id"], caption=msg_dict["caption"]
                    )
                )
            if not media:
                return
            
            msgs = await bot.send_media_group(chat_id=admin.telegram_chat_id, media=media)
            await cont.bot.send_message(
                admin.telegram_chat_id,
                f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É <b>{context.user_data.get('cheque_amount')}</b> —Ä—É–±–ª–µ–π.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                        callback_data=f"acception_cheque_true_{context.user_data.get('cheque_amount')}_{usr.telegram_chat_id}",
                    )], 
                    [InlineKeyboardButton(
                        text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                        callback_data=f"acception_cheque_false_{context.user_data.get('cheque_amount')}_{usr.telegram_chat_id}",
                    )]
                ])
            )

            await cont.bot.send_message(
                usr.telegram_chat_id,
                f"üíä –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )
            for index, msg in enumerate(msgs):
                cont.bot_data["messages"][
                    cont.job.data[index]["post_id"]
                ] = msg.message_id
            
            return ConversationHandler.END

        message = update.effective_message
        if message.media_group_id:
            media_type = effective_message_type(message)
            media_id = (
                message.photo[-1].file_id
                if message.photo
                else message.effective_attachment.file_id
            )
            msg_dict = {
                "media_type": media_type,
                "media_id": media_id,
                "caption": message.caption_html,
                "post_id": message.message_id,
            }
            jobs = context.job_queue.get_jobs_by_name(str(message.media_group_id))
            if jobs:
                jobs[0].data.append(msg_dict)
            else:
                context.job_queue.run_once(
                    callback=media_group_sender,
                    when=2,
                    data=[msg_dict],
                    name=str(message.media_group_id),
                )
        else:
            await context.bot.forward_message(
                chat_id=admin.telegram_chat_id,
                from_chat_id=usr.telegram_chat_id,
                message_id=update.message.message_id
            )
         
            await context.bot.send_message(
                admin.telegram_chat_id,
                f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É <b>{context.user_data.get('cheque_amount')}</b> —Ä—É–±–ª–µ–π.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                        callback_data=f"acception_cheque_true_{context.user_data.get('cheque_amount')}_{usr.telegram_chat_id}",
                    )], 
                    [InlineKeyboardButton(
                        text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                        callback_data=f"acception_cheque_false_{context.user_data.get('cheque_amount')}_{usr.telegram_chat_id}",
                    )]
                ])
            )

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üíä –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )
            context.bot_data["messages"][message.message_id] = msg.message_id

    @check_user_status
    async def _new_cheque_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        user_id, amount, status = query.data.split("_")[-1], query.data.split("_")[-2], query.data.split("_")[-3] 
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        try:
            user_to_update = ApplyUser.objects.filter(telegram_chat_id=user_id).first()

            cheque_id = secrets.token_urlsafe(int(os.environ.get("IDS_LEN")))
            new_cheque = Cheque(
                cheque_id=f"#{cheque_id}",
                cheque_sum=int(amount),
                cheque_owner=user_to_update,
                income=(int(amount) * user_to_update.comission * 0.01)
            )
            new_cheque.save()
                
            if status == "true":
                new_cheque.is_applied = True
                user_to_update.balance += int(amount) - (int(amount) * user_to_update.comission * 0.01)
                user_to_update.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü™õ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–µ–∫ <b>#{cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b>.",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_update.telegram_chat_id,
                    f"üß≤ –í–∞—à —á–µ–∫ <b>#{cheque_id}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –ø—Ä–∏–Ω—è—Ç.\n–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

            else:
                new_cheque.is_denied = True
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚öîÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —á–µ–∫ <b>#{cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b>.",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_update.telegram_chat_id,
                    f"üö¨ –í–∞—à —á–µ–∫ <b>#{cheque_id}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

            new_cheque.save()
        
        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üí£ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
            )

    @check_user_status
    async def _ask_for_money_withdraw(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        type_of_withdraw = query.data.split("_")[-1]

        if int(usr.balance) >= int(os.environ.get("MIN_SUM_TO_WITHDRAW")):
            if type_of_withdraw == "crypto":
                context.user_data["withdraw_type"] = "crypto"

                try:
                    url = "https://api.binance.com/api/v3/ticker/price"
                    params = {
                        "symbol": "USDTRUB"
                    }
                    response = requests.get(url, params=params)
                    ticker_info = response.json()

                    if 'price' in ticker_info:
                        context.user_data["usdt_price"] = round(float(ticker_info['price']), 2) + float(os.environ.get("NADBAVKA"))
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            f"ü§© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ <b><u>USDT</u></b> –≤ —Å–µ—Ç–∏ <b><u>TRC20</u></b>.\n\n–í–ê–ñ–ù–û!! –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="–û—Ç–º–µ–Ω–∞ üíî",
                                    callback_data="menu",
                                )],
                            ])
                        )

                        return 0

                    else:
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                        text="–í –º–µ–Ω—é üíé",
                                        callback_data="menu",
                                )],
                                [InlineKeyboardButton(
                                        text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                                        url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                                )],
                            ])
                        )

                except Exception as e:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                    text="–í –º–µ–Ω—é üíé",
                                    callback_data="menu",
                            )],
                            [InlineKeyboardButton(
                                    text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                                    url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )],
                        ])
                    )
            else:
                context.user_data["withdraw_type"] = "fiat"
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b> –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞</b>, –∫—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥.\n\n–í–ê–ñ–ù–û!! –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ üíî",
                            callback_data="menu",
                        )],
                    ])
                )

                return 0

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–µ <b>5000‚ÇΩ</b>.\n\n–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ–ª—å –∫ –∞–¥–º–∏–Ω–∏c—Ç–∞—Ä—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

            return ConversationHandler.END

    @check_user_status
    async def _send_withdraw_appliment(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        withdraw_type = context.user_data.get("withdraw_type", None)
        if withdraw_type == "crypto":
            usdt_address = update.message.text.strip()

            def is_trc20_address(address):
                if len(address) != 34:
                    return False
                if address[0] != 'T':
                    return False
                try:
                    decoded = base58.b58decode_check(address)
                    if len(decoded) == 21:
                        return True
                except ValueError:
                    return False
                return False

            if is_trc20_address(usdt_address):
                context.user_data['usdt_address'] = usdt_address
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"–í—ã –æ—Ç—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–¥—Ä–µ—Å <b>USDT</b> –≤ —Å–µ—Ç–∏ <b>TRC-20</b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üö¨",
                            callback_data="menu",
                        )],
                    ])
                )
                return ConversationHandler.END

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{usr.balance}‚ÇΩ</b>\n‚úîÔ∏è –ö—É—Ä—Å: <b>{context.user_data['usdt_price']}‚ÇΩ</b>\n‚úîÔ∏è –ê–¥—Ä–µ—Å TRC-20: <i>{context.user_data['usdt_address']}</i>\n\n–ò—Ç–æ–≥: <b><u>{round(usr.balance / context.user_data['usdt_price'], 2) - 2} USDT</u></b>\n\n* <i>2$ - –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ USDT —Å–∞–º–æ–π –±–∏—Ä–∂–∏.</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ",
                            callback_data="apply_withdraw",
                    )],
                    [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå",
                            callback_data="menu",
                    )],
                ])
            )
        elif withdraw_type == "fiat":
            card_number = update.message.text.strip()
            context.user_data["card_number"] = card_number
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{usr.balance}‚ÇΩ</b>\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <pre>{card_number}</pre>\n\n* <i>–ú–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ –±–∞–Ω–∫–æ–≤.</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ",
                            callback_data="apply_withdraw",
                    )],
                    [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå",
                            callback_data="menu",
                    )],
                ])
            )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _send_withdraw_appliment_to_admin(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()
        
        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        withdraw_type = context.user_data.get("withdraw_type", None)
        if withdraw_type == "crypto":
            try: 
                order = Withdraw(
                    withdraw_id = f"#{secrets.token_urlsafe(int(os.environ.get('IDS_LEN')))}",
                    withdraw_sum = usr.balance,
                    withdraw_owner = usr,
                    withdraw_address = context.user_data["usdt_address"],
                    course = context.user_data["usdt_price"],
                    usdt_sum = round(usr.balance / context.user_data['usdt_price'], 2) - 2,
                )

                order.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üõú <b>{usr.username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>{order.withdraw_id}</b> –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                )
                
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"<b>{usr.username}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b>:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{order.withdraw_sum}‚ÇΩ</b>\n‚úîÔ∏è –ö—É—Ä—Å: <b>{context.user_data['usdt_price']}‚ÇΩ</b>\n‚úîÔ∏è –ê–¥—Ä–µ—Å TRC-20: <i>{context.user_data['usdt_address']}</i>\n\n–ò—Ç–æ–≥: <b><u>{order.usdt_sum} USDT</u></b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ä–¥–µ—Ä –æ–ø–ª–∞—á–µ–Ω ‚úÖ",
                            callback_data=f"order_paid_{usr.telegram_chat_id}_{order.withdraw_id}",
                        )],
                    ])
                )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )
        elif withdraw_type == "fiat":
            try: 
                order = Withdraw(
                    withdraw_id = f"#{secrets.token_urlsafe(int(os.environ.get('IDS_LEN')))}",
                    withdraw_sum = usr.balance,
                    withdraw_owner = usr,
                    withdraw_card_number = context.user_data["card_number"],
                )

                order.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üõú <b>{usr.username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>{order.withdraw_id}</b> –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                )
                
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"<b>{usr.username}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b>:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{order.withdraw_sum}‚ÇΩ</b>\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <pre>{order.withdraw_card_number}</pre>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ä–¥–µ—Ä –æ–ø–ª–∞—á–µ–Ω ‚úÖ",
                            callback_data=f"order_paid_{usr.telegram_chat_id}_{order.withdraw_id}",
                        )],
                    ])
                )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _apply_withdraw_appliment(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        user_id, withdraw_id = query.data.split("_")[-2], query.data.split("_")[-1] 
        
        try:
            order = Withdraw.objects.filter(withdraw_id=withdraw_id)
            order.update(
                is_applied=True
            )

            order = order.first()
            user_whom_applied = ApplyUser.objects.filter(telegram_chat_id=user_id).first()
            
            user_whom_applied.balance -= order.withdraw_sum
            user_whom_applied.save()
            
            if order.withdraw_address:
                await context.bot.send_message(
                    user_whom_applied.telegram_chat_id,
                    f"‚úÖ <b>{user_whom_applied.username}</b>, –≤–∞—à –æ—Ä–¥–µ—Ä <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.usdt_sum} USDT</b> –æ–ø–ª–∞—á–µ–Ω.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                        
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üëÖ <b>{usr.username}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.usdt_sum} USDT</b> –æ—Ç <b>{user_whom_applied.username}</b>.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                    ])
                )
            else:
                await context.bot.send_message(
                    user_whom_applied.telegram_chat_id,
                    f"‚úÖ <b>{user_whom_applied.username}</b>, –≤–∞—à –æ—Ä–¥–µ—Ä <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.withdraw_sum}‚ÇΩ</b> –æ–ø–ª–∞—á–µ–Ω —Ñ–∏–∞—Ç–æ–º.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                        
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üëÖ <b>{usr.username}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.withdraw_sum}‚ÇΩ —Ñ–∏–∞—Ç–æ–º</b> –æ—Ç <b>{user_whom_applied.username}</b>.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                    ])
                )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )

    @check_user_status
    async def _ask_for_username_in_stat(update: Update, context: CallbackContext) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>@username</b> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <b>username</b>.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üíé",
                        callback_data="menu",
                    )],
                ])
        )

        return 0

    @check_user_status
    async def _ask_for_stat(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        username_to_get_stat = update.message.text.strip().replace("@", "")

        if not ApplyUser.objects.filter(username=username_to_get_stat).exists():
            await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–º–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                        )],
                    ])
                )

            return ConversationHandler.END
        else:
            context.user_data["username_stat"] = update.message.text.strip().replace("@", "")

            if usr.is_superuser:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü™õ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–°—Ç–∞—Ç –∑–∞ –¥–µ–Ω—å ‚òÄÔ∏è",
                            callback_data="stat_day",
                        )], 
                        [InlineKeyboardButton(
                            text="–°—Ç–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è ‚è≥",
                            callback_data="stat_all",
                        )],
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                        )],
                    ])
                )

                return 1
            
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

                return ConversationHandler.END

    @check_user_status
    async def _get_stat(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        
        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        user_info_about = context.user_data.get("username_stat", None)
        if not user_info_about:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )
            return ConversationHandler.END

        type_of_oper = query.data.split("_")[-1]
        if type_of_oper == "day":

            cheques = Cheque.objects.filter(
                cheque_owner=ApplyUser.objects.filter(username=user_info_about).first(),
                cheque_date__date=timezone.now()
            ).all()

            withdraws = Withdraw.objects.filter(
                withdraw_owner=ApplyUser.objects.filter(username=user_info_about).first(),
                withdraw_date__date=timezone.now()    
            ).all()

            total_cheques_sum, total_withdraw_sum, total_income = 0, 0, 0
            end_msg = f"üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <b>{ApplyUser.objects.filter(username=user_info_about).first().username}</b> –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n<b>–ß–µ–∫–∏:</b>\n"
            
            if len(cheques) == 0:
                end_msg += "üôÅ –°–µ–≥–æ–¥–Ω—è —á–µ–∫–æ–≤ –Ω–µ –±—ã–ª–æ.\n"
            else:
                for cheque in cheques:
                    if cheque.is_applied:
                        total_cheques_sum += cheque.cheque_sum
                        total_income += cheque.income

                    if not cheque.is_applied and not cheque.is_denied:
                        status = "–í —Ä–∞–±–æ—Ç–µ"
                    elif cheque.is_applied:
                        status = "–ü—Ä–∏–Ω—è—Ç"
                    else:
                        status = "–ù–µ –ø—Ä–∏–Ω—è—Ç"
                
                    end_msg += f"<i>{cheque.cheque_id} - {cheque.cheque_sum}‚ÇΩ - {status} - {cheque.income}‚ÇΩ</i>\n"
            
            end_msg += "\n<b>–í—ã–≤–æ–¥—ã:</b>\n"

            if len(withdraws) == 0:
                end_msg += "üôÅ –°–µ–≥–æ–¥–Ω—è –≤—ã–≤–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ.\n"
            else:
                for withdraw in withdraws:
                    if withdraw.is_applied:
                        total_withdraw_sum += withdraw.withdraw_sum

                    if not withdraw.is_applied:
                        status = "–í —Ä–∞–±–æ—Ç–µ"
                    elif withdraw.is_applied:
                        status = "–û–ø–ª–∞—á–µ–Ω"
                    
                    end_msg += f"<i>{withdraw.withdraw_id} - {withdraw.withdraw_sum}‚ÇΩ - {status} - {withdraw.usdt_sum}USDT</i>\n"
            
            end_msg += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ —á–µ–∫–∞–º: <b>{total_cheques_sum}‚ÇΩ</b>\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—ã–≤–æ–¥–∞–º: <b>{total_withdraw_sum}‚ÇΩ</b>\n–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{total_income}‚ÇΩ</b>"

            await context.bot.send_message(
                    usr.telegram_chat_id,
                    end_msg,
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )
        
        elif type_of_oper == "all":
            cheques = Cheque.objects.filter(
                cheque_owner=ApplyUser.objects.filter(username=user_info_about).first(),
            ).all()

            withdraws = Withdraw.objects.filter(
                withdraw_owner=ApplyUser.objects.filter(username=user_info_about).first(),
            ).all()

            total_cheques_sum, total_withdraw_sum, total_income = 0, 0, 0
            end_msg = f"üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <b>{ApplyUser.objects.filter(username=user_info_about).first().username}</b> –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n\n<b>–ß–µ–∫–∏:</b>\n"
            
            cnt1, cnt2 = 0, 0

            if len(cheques) == 0:
                end_msg += "üôÅ –ü–æ–∫–∞ —á–µ–∫–æ–≤ –Ω–µ –±—ã–ª–æ."
            else:
                for cheque in cheques:
                    total_cheques_sum += cheque.cheque_sum

                    if not cheque.is_applied and not cheque.is_denied:
                        status = "–í —Ä–∞–±–æ—Ç–µ"
                    elif cheque.is_applied:
                        status = "–ü—Ä–∏–Ω—è—Ç"
                    else:
                        status = "–ù–µ –ø—Ä–∏–Ω—è—Ç"

                    if not cnt1 == os.environ.get("CNT_TO_SHOW_STAT_FOR_ALL_TIME"):
                        end_msg += f"<i>{cheque.cheque_id} - {cheque.cheque_sum}‚ÇΩ - {status}</i>\n"
                        cnt1 += 1

            end_msg += "\n<b>–í—ã–≤–æ–¥—ã:</b>\n"

            if len(withdraws) == 0:
                end_msg += "üôÅ –ü–æ–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ."
            else:
                for withdraw in withdraws:
                    total_withdraw_sum += withdraw.withdraw_sum
                    total_income += withdraw.income

                    if not withdraw.is_applied:
                        status = "–í —Ä–∞–±–æ—Ç–µ"
                    elif withdraw.is_applied:
                        status = "–û–ø–ª–∞—á–µ–Ω"
                    
                    if not cnt2 == os.environ.get("CNT_TO_SHOW_STAT_FOR_ALL_TIME"):
                        end_msg += f"<i>{withdraw.withdraw_id} - {withdraw.withdraw_sum}‚ÇΩ - {status} - {withdraw.usdt_sum}USDT - {withdraw.income}‚ÇΩ</i>\n"
                        cnt2 += 1

            end_msg += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ —á–µ–∫–∞–º: <b>{total_cheques_sum}‚ÇΩ</b>\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—ã–≤–æ–¥–∞–º: <b>{total_withdraw_sum}‚ÇΩ</b>\n–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{total_income}‚ÇΩ</b>"

            await context.bot.send_message(
                    usr.telegram_chat_id,
                    end_msg,
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

        return ConversationHandler.END

    @check_user_status
    async def _today_metrics(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∑–∞ –¥–µ–Ω—å –¥–ª—è –∞–¥–º–∏–Ω–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        total_trans, total_income, total_withdraws = 0, 0, 0

        cheques = Cheque.objects.filter(
            cheque_date__date=timezone.now()
        ).all()

        withdraws = Withdraw.objects.filter(
            withdraw_date__date=timezone.now()    
        ).all()

        for cheque in cheques:
            if cheque.is_applied:
                total_trans += int(cheque.cheque_sum)
                total_income += cheque.income

        for withdraw in withdraws:
            if withdraw.is_applied:
                total_withdraws += withdraw.withdraw_sum

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üåé <b>–ß–µ–∫–∏:</b>\n- –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: <b>{total_trans}‚ÇΩ</b>\n- –ü—Ä–∏–±—ã–ª—å: <b>{round(total_income, 2)}‚ÇΩ</b>\n- –í—Å–µ–≥–æ —á–µ–∫–æ–≤: <b>{len(cheques)} —à—Ç.</b>\n\nüåô <b>–í—ã–≤–æ–¥—ã:</b>\n- –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: <b>{total_withdraws}‚ÇΩ</b>\n- –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: <b>{len(withdraws)} —à—Ç.</b>",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –Ω–∞—á–∞–ª–æ üî∞",
                    callback_data=f"menu",
                )], 
                
            ])
        )

    @check_user_status
    async def _today_hist(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è —é–∑–µ—Ä–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)

        query = update.callback_query
        await query.answer()
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

        cheques = Cheque.objects.filter(
            cheque_owner=ApplyUser.objects.filter(username=usr).first(),
            cheque_date__date=timezone.now()
        ).all()

        withdraws = Withdraw.objects.filter(
            withdraw_owner=ApplyUser.objects.filter(username=usr).first(),
            withdraw_date__date=timezone.now()    
        ).all()

        total_cheques_sum, total_withdraw_sum = 0, 0
        end_msg = f"üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n<b>–ß–µ–∫–∏:</b>\n"
        
        if len(cheques) == 0:
            end_msg += "üôÅ –°–µ–≥–æ–¥–Ω—è —á–µ–∫–æ–≤ –Ω–µ –±—ã–ª–æ.\n"
        else:
            for cheque in cheques:
                if cheque.is_applied:
                    total_cheques_sum += cheque.cheque_sum

                if not cheque.is_applied and not cheque.is_denied:
                    status = "–í —Ä–∞–±–æ—Ç–µ"
                elif cheque.is_applied:
                    status = "–ü—Ä–∏–Ω—è—Ç"
                else:
                    status = "–ù–µ –ø—Ä–∏–Ω—è—Ç"
            
                end_msg += f"<i>{cheque.cheque_id} - {cheque.cheque_sum}‚ÇΩ - {status}</i>\n"
        
        end_msg += "\n<b>–í—ã–≤–æ–¥—ã:</b>\n"

        if len(withdraws) == 0:
            end_msg += "üôÅ –°–µ–≥–æ–¥–Ω—è –≤—ã–≤–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ.\n"
        else:
            for withdraw in withdraws:
                if withdraw.is_applied:
                    total_withdraw_sum += withdraw.withdraw_sum

                if not withdraw.is_applied:
                    status = "–í —Ä–∞–±–æ—Ç–µ"
                elif withdraw.is_applied:
                    status = "–û–ø–ª–∞—á–µ–Ω"
                
                end_msg += f"<i>{withdraw.withdraw_id} - {withdraw.withdraw_sum}‚ÇΩ - {status} - {withdraw.usdt_sum}USDT - {withdraw.income}‚ÇΩ</i>\n"
        
        end_msg += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ —á–µ–∫–∞–º: <b>{total_cheques_sum}‚ÇΩ</b>\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—ã–≤–æ–¥–∞–º: <b>{total_withdraw_sum}‚ÇΩ</b>"

        await context.bot.send_message(
                usr.telegram_chat_id,
                end_msg,
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )

    def register_handlers(self) -> Application: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_info, "create_apply")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_user_info)],
                1: [CallbackQueryHandler(self._send_apply_to_admin, "accept_sending_to_admin")]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._new_user_acception, "^acception_user_")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_comission)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(CallbackQueryHandler(self._new_cheque_acception, "^acception_cheque_"))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_cheque_amount, "send_cheque")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._ask_for_photo)],
                1: [MessageHandler(filters.PHOTO, self._send_photo_to_admin)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_money_withdraw, "^get_money_")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._send_withdraw_appliment)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_username_in_stat, "stat"), CommandHandler("stat", self._ask_for_username_in_stat)],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._ask_for_stat)],
                1: [CallbackQueryHandler(self._get_stat, "^stat_")]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=300
        ))

        self.application.add_handler(CallbackQueryHandler(self._send_withdraw_appliment_to_admin, "apply_withdraw"))
        self.application.add_handler(CallbackQueryHandler(self._apply_withdraw_appliment, "^order_paid_"))

        self.application.add_handler(CallbackQueryHandler(self._today_hist, "today_hist"))
        self.application.add_handler(CallbackQueryHandler(self._today_metrics, "metrics"))

        self.application.add_handler(CommandHandler("start", self._start))
        self.application.add_handler(CallbackQueryHandler(self._start, "menu"))

        return self.application

class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ ApplyBot'

    def handle(self, *args, **kwargs):        
    
        main_class_instance = ApplierBot()
        application = main_class_instance.register_handlers()
        
        application.add_handler(CallbackQueryHandler(main_class_instance._start, "menu"))
        application.run_polling()
