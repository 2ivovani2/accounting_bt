from applier.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, re, random, io, shutil, validators, secrets
warnings.filterwarnings("ignore")

import requests, base58

from django.core.management.base import BaseCommand
from django.conf import settings

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, File
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

@sync_to_async
def user_get_by_update(update: Update):
    
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        _type_: instance, created
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = ApplyUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )
    
    return instance, created

def check_user_status(function):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    async def wrapper(self, update: Update, context:CallbackContext):   
        if update.message:
            message = update.message
        else:
            message = update.callback_query.message

        if not message.chat.username:
            username = "Anonymous"
        else:
            username = message.chat.username

        usr, _ = ApplyUser.objects.update_or_create(
            telegram_chat_id = message.chat.id,
            username=username
        )

        if usr.verified_usr:
            return await function(update, context)
            
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ü§òüèª",
                        callback_data="create_apply",
                    )]
                ])
            )
        
    return wrapper

class ApplierBot:
    
    def __init__(self) -> None:
        """"
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ø–∞
        """
        self.application = Application.builder().token(os.environ.get('APPLIER_BOT_TOKEN')).build()

    @check_user_status
    async def _start(update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)

        if not usr.is_superuser:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{usr.balance}‚ÇΩ</b>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ üí∞",
                        callback_data="send_cheque",
                    )],
                    [InlineKeyboardButton(
                        text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ ‚ö°Ô∏è",
                        callback_data="get_money",
                    )]
                ])
            )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –∑–¥–∞—Ä–æ–≤–∞ –∞–¥–º–∏–Ω –µ–±–∞–Ω—ã–π!",
                parse_mode="HTML",
                reply_markup = None
            )

        return ConversationHandler.END
    
    async def _send_apply_to_admin(self, update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)       
        
        if not usr.verified_usr:
            admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()

            try:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"ü§© <b>{usr.username}</b>, –∑–¥–∞—Ä–æ–≤–∞ –∞–¥–º–∏–Ω –µ–±–∞–Ω—ã–π!\n–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –±–æ—Ç–∞.\n\n–ù–∏–∫–Ω–µ–π–º: <b>{usr.username}</b>\n\n–ü–æ–∏–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è —É —Å—Ç–∞—Ä—à–∏—Ö, –µ—Å—Ç—å —Ç–∞–∫–æ–π –∏–ª–∏ –Ω–µ—Ç.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å —é–∑–µ—Ä–∞ ‚úÖ",
                            callback_data=f"acception_user_true_{usr.telegram_chat_id}",
                        )], 
                        [InlineKeyboardButton(
                            text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                            callback_data=f"acception_user_false_{usr.telegram_chat_id}",
                        )]
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üõú <b>{usr.username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode="HTML",
                )

            except Exception as e:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –Ω–∞—á–∞–ª–æ üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

    @check_user_status
    async def _new_user_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        user_id, status = query.data.split("_")[-1], query.data.split("_")[-2]
        user_to_apply = ApplyUser.objects.filter(telegram_chat_id=user_id)      
        if status == "true":

            try:
                user_to_apply.update(
                    verified_usr=True
                )

                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_to_apply.first().username}</b>",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_apply.first().telegram_chat_id,
                    f"‚ù§Ô∏è‚Äçüî• <b>{user_to_apply.first().username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )
                
            except Exception as e:
                 await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                )
        else:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíò –í—ã –ø–æ—Å–ª–∞–ª–∏ –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_to_apply.first().username}</b>",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_apply.first().telegram_chat_id,
                    f"üíî <b>{user_to_apply.first().username}</b>, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É!",
                    parse_mode="HTML",
                )
                

            except Exception as e:
                 await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—ã–ª–∞–Ω–∏—è –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                )

    @check_user_status
    async def _ask_for_cheque_amount(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Å—É–º–º—ã

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ôæÔ∏è –°—É–ø–µ—Ä, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É —á–µ–∫–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                    callback_data="menu",
                )],
            ])
        )
        
        return 0

    @check_user_status
    async def _ask_for_photo(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ–∫–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        usr, _ = await user_get_by_update(update)
        
        try:
            context.user_data["cheque_amount"] = int(update.message.text.strip())
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úîÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                        callback_data="menu",
                    )],
                ])
            )

            return 1

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                        )],
                ])
            )
            return ConversationHandler.END

    @check_user_status
    async def _send_photo_to_admin(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        usr, _ = await user_get_by_update(update)
        admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()

        await context.bot.forward_message(
            chat_id=admin.telegram_chat_id,
            from_chat_id=usr.telegram_chat_id,
            message_id=update.message.message_id
        )

        await context.bot.send_message(
            admin.telegram_chat_id,
            f"ü§© –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É {context.user_data.get('cheque_amount')} —Ä—É–±–ª–µ–π.",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ–∫–∞ ‚úÖ",
                    callback_data=f"acception_cheque_true_{context.user_data.get('cheque_amount')}_{usr.telegram_chat_id}",
                )], 
                [InlineKeyboardButton(
                    text="–ü–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π ‚õîÔ∏è",
                    callback_data=f"acception_cheque_false_{context.user_data.get('cheque_amount')}_{usr.telegram_chat_id}",
                )]
            ])
        )

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üíä –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üî∞",
                    callback_data=f"menu",
                )], 
                
            ])
        )

        return ConversationHandler.END

    @check_user_status
    async def _new_cheque_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        user_id, amount, status = query.data.split("_")[-1], query.data.split("_")[-2], query.data.split("_")[-3] 
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        try:
            cheque_id = secrets.token_urlsafe(5)
            new_cheque = Cheque(
                cheque_id=f"#{cheque_id}",
                cheque_sum=int(amount),
                cheque_owner=ApplyUser.objects.filter(telegram_chat_id=user_id).first()
            )
            new_cheque.save()
            user_to_update = ApplyUser.objects.filter(telegram_chat_id=user_id).first()
                
            if status == "true":
                new_cheque.is_applied = True
                user_to_update.balance += int(amount)
                user_to_update.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü™õ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–µ–∫ <b>#{cheque_id}</b>",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_update.telegram_chat_id,
                    f"üß≤ –í–∞—à —á–µ–∫ <b>#{cheque_id}</b> –ø—Ä–∏–Ω—è—Ç.\n–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

            else:
                new_cheque.is_denied = True
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚öîÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —á–µ–∫ <b>#{cheque_id}</b>",
                    parse_mode="HTML",
                )

                await context.bot.send_message(
                    user_to_update.telegram_chat_id,
                    f"üö¨ –í–∞—à —á–µ–∫ <b>#{cheque_id}</b> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üî∞",
                            callback_data=f"menu",
                        )], 
                        
                    ])
                )

            new_cheque.save()
        
        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üí£ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
            )

    @check_user_status
    async def _ask_for_money_withdraw(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        
        if int(usr.balance) >= 5000:
            try:
                url = "https://api.binance.com/api/v3/ticker/price"
                params = {
                    "symbol": "USDTRUB"
                }
                response = requests.get(url, params=params)
                ticker_info = response.json()

                if 'price' in ticker_info:
                    context.user_data["usdt_price"] = round(float(ticker_info['price']), 2) + float(os.environ.get("NADBAVKA"))
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"ü§© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ <b><u>USDT</u></b> –≤ —Å–µ—Ç–∏ <b><u>TRC20</u></b>.\n\n–í–ê–ñ–ù–û!! –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ üíî",
                                callback_data="menu",
                            )],
                        ])
                    )

                    return 0

                else:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                    text="–í –º–µ–Ω—é üíé",
                                    callback_data="menu",
                            )],
                            [InlineKeyboardButton(
                                    text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                                    url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )],
                        ])
                    )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã <b>USDT/RUB</b>.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üíé",
                                callback_data="menu",
                        )],
                        [InlineKeyboardButton(
                                text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                        )],
                    ])
                )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üü• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–µ <b>5000‚ÇΩ</b>.\n\n–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ–ª—å –∫ –∞–¥–º–∏–Ω–∏c—Ç–∞—Ä—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üíé",
                            callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                            url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

            return ConversationHandler.END

    @check_user_status
    async def _send_withdraw_appliment(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        usdt_address = update.message.text.strip()

        def is_trc20_address(address):
            if len(address) != 34:
                return False
            if address[0] != 'T':
                return False
            try:
                decoded = base58.b58decode_check(address)
                if len(decoded) == 21:
                    return True
            except ValueError:
                return False
            return False

        if is_trc20_address(usdt_address):
            context.user_data['usdt_address'] = usdt_address
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"–í—ã –æ—Ç—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–¥—Ä–µ—Å <b>USDT</b> –≤ —Å–µ—Ç–∏ <b>TRC-20</b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üö¨",
                        callback_data="menu",
                    )],
                ])
            )
            return ConversationHandler.END

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{usr.balance}‚ÇΩ</b>\n‚úîÔ∏è –ö—É—Ä—Å: <b>{context.user_data['usdt_price']}‚ÇΩ</b>\n‚úîÔ∏è –ê–¥—Ä–µ—Å TRC-20: <i>{context.user_data['usdt_address']}‚ÇΩ</i>\n\n–ò—Ç–æ–≥: <b><u>{round(usr.balance / context.user_data['usdt_price'], 2)} USDT</u></b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ",
                        callback_data="apply_withdraw",
                )],
                [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå",
                        callback_data="menu",
                )],
            ])
        )

        return ConversationHandler.END

    @check_user_status
    async def _send_withdraw_appliment_to_admin(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        try:
            admin = ApplyUser.objects.filter(username=os.environ.get("ADMIN_TO_APPLY_USERNAME")).first()
            
            order = Withdraw(
                withdraw_id = f"#{secrets.token_urlsafe(5)}",
                withdraw_sum = usr.balance,
                withdraw_owner=usr,
                withdraw_address=context.user_data["usdt_address"],
                course=context.user_data["usdt_price"],
                usdt_sum=round(usr.balance / context.user_data["usdt_price"], 2),
            )

            order.save()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üõú <b>{usr.username}</b>, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>{order.withdraw_id}</b> –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                parse_mode="HTML",
            )

            await context.bot.send_message(
                admin.telegram_chat_id,
                f"<b>{usr.username}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ <b>{order.withdraw_id}</b>:\n\n‚úîÔ∏è –°—É–º–º–∞: <b>{usr.balance}‚ÇΩ</b>\n‚úîÔ∏è –ö—É—Ä—Å: <b>{context.user_data['usdt_price']}‚ÇΩ</b>\n‚úîÔ∏è –ê–¥—Ä–µ—Å TRC-20: <i>{context.user_data['usdt_address']}‚ÇΩ</i>\n\n–ò—Ç–æ–≥: <b><u>{round(usr.balance / context.user_data['usdt_price'], 2)} USDT</u></b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ä–¥–µ—Ä –æ–ø–ª–∞—á–µ–Ω ‚úÖ",
                        callback_data=f"order_paid_{usr.telegram_chat_id}_{order.withdraw_id}",
                    )],
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                    [InlineKeyboardButton(
                        text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                        url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                ])
            )

    @check_user_status
    async def _apply_withdraw_appliment(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        query = update.callback_query
        await query.answer()
        
        user_id, withdraw_id = query.data.split("_")[-2], query.data.split("_")[-1] 
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        
        try:
            order = Withdraw.objects.filter(withdraw_id=withdraw_id)
            order.update(
                is_applied=True
            )

            order = order.first()
            user_whom_applied = ApplyUser.objects.filter(telegram_chat_id=user_id).first()
            
            user_whom_applied.balance = 0
            user_whom_applied.save()

            await context.bot.send_message(
                user_whom_applied.telegram_chat_id,
                f"‚úÖ <b>{user_whom_applied.username}</b>, –≤–∞—à –æ—Ä–¥–µ—Ä <b>{order.withdraw_id}</b> –Ω–∞ —Å—É–º–º—É <b>{order.usdt_sum} USDT</b> –æ–ø–ª–∞—á–µ–Ω.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üî∞",
                        callback_data=f"menu",
                    )], 
                    [InlineKeyboardButton(
                        text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üÜò",
                        url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                    )],
                    
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –Ω–∞—á–∞–ª–æ üî∞",
                        callback_data=f"menu",
                    )], 
                    
                ])
            )


    def register_handlers(self) -> Application: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """
        self.application.add_handler(CommandHandler("start", self._start))
        self.application.add_handler(CallbackQueryHandler(self._send_apply_to_admin, "create_apply"))
        self.application.add_handler(CallbackQueryHandler(self._new_user_acception, "^acception_user_"))
        self.application.add_handler(CallbackQueryHandler(self._new_cheque_acception, "^acception_cheque_"))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_cheque_amount, "send_cheque")],
            states={
                0: [MessageHandler(filters.TEXT, self._ask_for_photo)],
                1: [MessageHandler(filters.PHOTO, self._send_photo_to_admin)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_money_withdraw, "get_money")],
            states={
                0: [MessageHandler(filters.TEXT, self._send_withdraw_appliment)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

        self.application.add_handler(CallbackQueryHandler(self._send_withdraw_appliment_to_admin, "apply_withdraw"))
        self.application.add_handler(CallbackQueryHandler(self._apply_withdraw_appliment, "^order_paid_"))

        return self.application

class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ ApplyBot'

    def handle(self, *args, **kwargs):        
        main_class_instance = ApplierBot()
        application = main_class_instance.register_handlers()
        
        application.add_handler(CallbackQueryHandler(main_class_instance._start, "menu"))
        application.run_polling()