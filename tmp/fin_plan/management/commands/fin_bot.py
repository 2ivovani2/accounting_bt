from main.models import *
from fin_plan.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, uuid
warnings.filterwarnings("ignore")

from django.core.management.base import BaseCommand

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@sync_to_async
def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "–ê–Ω–æ–Ω–∏–º"
    else:
        username = message.chat.username

    instance, created = User.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )

    return instance, created

def check_user_status(function):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async def wrapper(self, update: Update, context:CallbackContext):
        if update.message:
            message = update.message
        else:
            message = update.callback_query.message

        if not message.chat.username:
            username = "–ê–Ω–æ–Ω–∏–º"
        else:
            username = message.chat.username

        usr, _ = User.objects.update_or_create(
            telegram_chat_id = message.chat.id,
            username=username
        )

        if usr.verified_usr:
            return await function(update, context)
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è <b>{usr.username}</b>, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –≤–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∞.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíÖüèΩ",
                        url="https://t.me/i_vovani"
                    )],
                    [InlineKeyboardButton(
                        text="–ò–Ω–≤–∞–π—Ç –∫–æ–¥ üîê",
                        callback_data="invite_code"
                    )],
                ])
            )
        
    return wrapper


class Bot:
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –±–æ—Ç–∞
    """

    def __init__(self) -> None:
        self.application = Application.builder().token(os.environ.get("FIN_BOT_TOKEN")).build()
        
    @check_user_status
    async def _start(update: Update, context: CallbackContext) -> ConversationHandler.END:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

        """
        usr, _ = await user_get_by_update(update)
   
        markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç ‚≠êÔ∏è",
                    callback_data="create_invite_code",
                )],
                [InlineKeyboardButton(
                    text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç üò±",
                    callback_data="invite_code",
                )],
                
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üç∫",
                    callback_data="create_project",
                )] if usr.type.lower() == "–∞–¥–º–∏–Ω" else [],


                [InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚ûï",
                    callback_data="create_project",
                )] if usr.can_create_tasks else [],


                [InlineKeyboardButton(
                    text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåª",
                    url="https://t.me/i_vovani"
                )],
                [InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞ üëÄ", web_app=WebAppInfo(url=f"{os.environ.get('DOMAIN_NAME')}/admin"))] if usr.is_superuser else []
                
            ])

        user_projects = [project.name for project in Project.objects.filter(users__in=[usr]).all()]
        proj_message = ""
        
        if len(user_projects) != 0:
            proj_message += "ü§ò <b><u>–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:</u></b>\n\n"
            for project in user_projects:
                proj_message += f"üîπ {project}\n" 

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üëã <b>{usr.username}</b>, –¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.\n\nüé± <b><u>–í–∞—à —Å—Ç–∞—Ç—É—Å</u></b>: <i>{usr.type}</i>\n\n{proj_message}",
            parse_mode="HTML",
            reply_markup=markup
        )
            
        return ConversationHandler.END
    
    def register_handlers(self) -> Application: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """
        self.application.add_handler(CommandHandler("start", self._start))
        self.application.add_handler(CallbackQueryHandler(self._start, "menu"))

        return self.application

class InviteCodes(Bot):
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–≤–±–æ—Ç—ã —Å –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞–º–∏
    """
    def __init__(self, application) -> None:
        self.application = application    

    async def _ask_for_invite_activation(self, update: Update, context: CallbackContext):
        usr, _ = await user_get_by_update(update)

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ª–∏–±–æ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é ü•É",
                    callback_data="menu"
                )],
            ])
        )

        return 0

    async def _activate_invite_code(self, update:Update, context: CallbackContext):
        usr, _ = await user_get_by_update(update)
        code = update.message.text.strip()
        code_in_base = Invite.objects.filter(code=code).first()

        if code_in_base:
            if code_in_base.valid:
                try:
                    code_in_base.activator = usr
                    code_in_base.valid = False
                    code_in_base.save()

                    usr.type = code_in_base.invite_type
                    usr.verified_usr = True

                    if code_in_base.invite_type.lower() != "–≤–æ—Ä–∫–µ—Ä":
                        usr.can_create_tasks = True
                    
                    usr.save()

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥. –ò –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ –ø—Ä–æ–µ–∫—Ç <b>{code_in_base.project.name}</b>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üí°",
                                callback_data="menu"
                            )],
                        ])
                    )

                except Exception as e:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"ü§° –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞. \n\nüí© <b><u>–û—à–∏–±–∫–∞:</u></b> <i>{e}</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é ü•É",
                                callback_data="menu"
                            )],
                        ])
                    )

                return ConversationHandler.END

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùóÔ∏è–í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíÖüèΩ",
                            url="https://t.me/i_vovani"
                        )],
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é ü•É",
                            callback_data="menu"
                        )],
                    ])
                )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –µ–≥–æ –≤—ã–¥–∞–ª.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíÖüèΩ",
                        url="https://t.me/i_vovani"
                    )],
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é ü•É",
                        callback_data="menu"
                    )],
                ])
            )

    @check_user_status
    async def _ask_for_type_of_invite_code(update: Update, context: CallbackContext):
        usr, _ = await user_get_by_update(update)

        if usr.invite_code_limits == 0:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü•≤ <b>{usr.username}</b>, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é ü•É",
                        callback_data="menu"
                    )],
                ])
            )

            return ConversationHandler.END

        if usr.type.lower() == "–∞–¥–º–∏–Ω":
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ê–¥–º–∏–Ω üçä",
                    callback_data="choose_admin",
                )],
                [InlineKeyboardButton(
                    text="–ú–∞–Ω–∞–≥–µ—Ä üçí",
                    callback_data="choose_manager",
                )],
                [InlineKeyboardButton(
                    text="–í–æ—Ä–∫–µ—Ä üßÖ",
                    callback_data="choose_worker",
                )],
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é ü•É",
                    callback_data="menu"
                )],
            ])

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü•Ç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                parse_mode="HTML",
                reply_markup=markup
            )

            return 0
        
        elif usr.type.lower() == "–º–∞–Ω–∞–≥–µ—Ä":
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ú–∞–Ω–∞–≥–µ—Ä üçí",
                    callback_data="choose_manager",
                )],
                [InlineKeyboardButton(
                    text="–í–æ—Ä–∫–µ—Ä üßÖ",
                    callback_data="choose_worker",
                )],
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é ü•É",
                    callback_data="menu"
                )],
            ])

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü•Ç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                parse_mode="HTML",
                reply_markup=markup
            )

            return 0
        
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è <b>{usr.username}</b>, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å <i>–ê–¥–º–∏–Ω</i> –∏–ª–∏ <i>–ú–∞–Ω–∞–≥–µ—Ä</i>\n\n<b><u>–í–∞—à —Å—Ç–∞—Ç—É—Å</u></b>: <i>{usr.type}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é ü•É",
                        callback_data="menu"
                    )],
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _ask_for_project_to_invite(update: Update, context: CallbackContext):
        usr, _ = await user_get_by_update(update)
        context.user_data["invite_type"] = {"manager":"–ú–∞–Ω–∞–≥–µ—Ä", "admin":"–ê–¥–º–∏–Ω", "worker":"–í–æ—Ä–∫–µ—Ä"}[update.callback_query.data.split("_")[-1]]

        markup = []
        if usr.type.lower() == "–∞–¥–º–∏–Ω":
            projects = Project.objects.filter(creator=usr).all()
        else:
            projects = Project.objects.filter(users__in=[usr]).all()

        if len(projects) == 0:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§° –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∫—É–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é ü•É",
                        callback_data="menu"
                    )],
                ])
            )

            return ConversationHandler.END

        for project in projects:
            markup.append([InlineKeyboardButton(text=project.name, callback_data=f"project_choose_{project.id}")])
        markup.append([InlineKeyboardButton(text="–í –º–µ–Ω—é ü•É", callback_data="menu")])

        await context.bot.send_message(
                usr.telegram_chat_id,
                f"üëΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(markup)
            )
        
        return 1

    @check_user_status
    async def _create_invite_code(update: Update, context: CallbackContext):
        usr, _ = await user_get_by_update(update)
        
        code = str(uuid.uuid4())
        invite_type = context.user_data["invite_type"]
        project_to_add_new_worker = Project.objects.get(pk=int(update.callback_query.data.split("_")[-1]))

        try:
            Invite(
                code=code,
                creator=usr,
                invite_type=invite_type,
                project=project_to_add_new_worker
            ).save()

            usr.invite_code_limits -= 1
            usr.save()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üòª –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∏–Ω–≤–∞–π–Ω –∫–æ–¥ —Å —Ç–∏–ø–æ–º <b>{invite_type}</b> –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ <b>{project_to_add_new_worker.name}</b>. –í–∞—à –∫–æ–¥:\n\n<code>{code}</code>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ <b><u>{usr.invite_code_limits}</u></b> –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é ü•É",
                        callback_data="menu"
                    )],
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§° –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞. \n\nüí© <b><u>–û—à–∏–±–∫–∞:</u></b> <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é ü•É",
                        callback_data="menu"
                    )],
                ])
            )

        return ConversationHandler.END

    def register_handlers(self) -> None:
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_type_of_invite_code, "create_invite_code")],
            states={
                0: [CallbackQueryHandler(self._ask_for_project_to_invite, "^choose_")],
                1: [CallbackQueryHandler(self._create_invite_code, "^project_choose_")]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_invite_activation, "invite_code")],
            states={
                0: [MessageHandler(filters.TEXT, self._activate_invite_code)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

class Command(BaseCommand):
    help = "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"

    def handle(self, *args, **kwargs):        
        application = Bot().register_handlers()

        InviteCodes(application=application).register_handlers()

        application.run_polling()
        
        
