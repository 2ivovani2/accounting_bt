from main.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, uuid, time, random
warnings.filterwarnings("ignore")

from django.core.management.base import BaseCommand

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è",
                    callback_data="dump_naeb",
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–∑—ã–≤—ã üåü",
                    url="https://t.me/+LZvqNEc5CUFkZmZh",
                ),
            ],
        ])

    await context.bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.chat.username}</b>\n\nü§ñ <b>–Ø - –Ωe–πpo—Åe—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –øp–∏–≤a—Ç–Ω—ã–µ —Ño—Ço.</b>\n\nüîê <b>–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫—É—é –Ω–æ–≤–µ–π—à—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–∞–∫ DeepFaceLab, –ø–æ—ç—Ç–æ–º—É —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—Ç–æ–∏—Ç!</b>\n\nüîé <pre>O—Ç–ø—Äa–≤—å—Çe –±–æ—Çy —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª, –∞ –¥–∞–ª—å—à–µ –¥–µ–ª–æ –∑–∞ –Ω–∞–º–∏!</pre>\n\n–üo–¥–¥e—Ä–∂–∫a: @ushshshhs",
        parse_mode="HTML",
        reply_markup=markup
    )

    return ConversationHandler.END

async def ask_for_link(update: Update, context: CallbackContext):
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    await context.bot.send_message(
        message.chat.id,
        "üî• <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b>", 
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="ü§™ EAZY",
                    callback_data="search",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö°Ô∏è MIDDLE",
                    callback_data="search",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üî• HARD",
                    callback_data="search",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚èÆÔ∏è –í –º–µ–Ω—é",
                    callback_data="menu",
                )
            ],
        ])
    )

    return 0

async def content(update: Update, context: CallbackContext):
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    await context.bot.send_message(
        message.chat.id, 
        '<b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–ª–æ–≤–µ–∫–∞:</b>',
        parse_mode="HTML"
        )
    
    return 1

async def search(update:Update, context: CallbackContext):
    startin_text = list("üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•")
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message
    
    logging.info(message.photo[0].file_id)

    msg = await context.bot.send_message(
        message.chat.id,
            f"–í—ã–ø–æ–ª—è–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... üîé\n\n‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n‚è≥ –ì–æ—Ç–æ–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª... <b>{0}%</b>\n{''.join(startin_text)}",
            parse_mode="HTML"
    )

    for index in range(len(startin_text)):
        startin_text[index] = "üü©"
        await context.bot.edit_message_text(
            f"–í—ã–ø–æ–ª—è–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... üîé\n\n‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n‚è≥ –ì–æ—Ç–æ–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª... <b>{(index + 1) * 10}%</b>\n{''.join(startin_text)}",
            message.chat.id,
            msg.id,
            parse_mode='HTML'
        )
        time.sleep(.1)

    await context.bot.send_photo(
            chat_id=message.chat.id,
            photo=message.photo[0].file_id,
            caption=f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</b> ‚úÖ\n\n<b>–ò–Ω—Ç–∏–º —Ñ–æ—Ç–æ: </b>{random.randint(5, 30)} —à—Ç.\n<b>–ò–Ω—Ç–∏–º –≤–∏–¥–µ–æ: </b>{random.randint(1, 3)} —à—Ç.", 
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üí∞ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞ 299 ‚ÇΩ",
                    callback_data="buy_archive"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚èÆÔ∏è –í –º–µ–Ω—é",
                    callback_data="menu",
                )

            ]
        ]), 
        write_timeout=5,
    )

    return 2

async def confirm_paying(update: Update, context: CallbackContext):
    code = "#" + str(uuid.uuid4().hex)[:6].upper()
    context.user_data["deal_code"] = code

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    await context.bot.send_message(
        message.chat.id,
        f"ü§© <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:</b>\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>299‚ÇΩ</b> –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ'\n\n<b><u>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</u></b>\n<pre>2200 7008 5830 0774</pre>\n<b><u>–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:</u></b> {code}\n\n<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</i> @ushshshhs",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ",
                    callback_data="check_payment"
                ),
            ]
        ])
    )

    return ConversationHandler.END

async def check_payment(update: Update, context:CallbackContext):
    deal_code = context.user_data.get("deal_code", "")
    
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    msg = await context.bot.send_message(
        message.chat.id, 
        '<b>‚è≥ –ú–∏–Ω—É—Ç–æ—á–∫—É....</b>\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂.',
        parse_mode='HTML'
    )
    time.sleep(5)
    await context.bot.delete_message(message.chat.id, msg.id)

    await context.bot.send_message(
        message.chat.id,
        f"üò¢ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ <b>{deal_code}</b> –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.\n\n<i>*–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –æ–ø–ª–∞—Ç–∞ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="‚èÆÔ∏è –í –º–µ–Ω—é",
                    callback_data="menu",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    url="https://t.me/ushshshhs",
                )
            ]
        ])
    )

async def garbage(update:Update, context:CallbackContext):
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message
    
    logging.info(message)

    await context.bot.send_message(
        message.chat.id,
        f"<b>{message.chat.username}</b>, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="‚èÆÔ∏è –í –º–µ–Ω—é",
                callback_data="menu",
            )]
        ])        
    )

def main() -> None:
    """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """

    application = Application.builder().token(os.environ.get("NAEB_BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))

    naeb_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_link, "dump_naeb",)],
        states={
            0:[CallbackQueryHandler(content, "search",)],
            1:[MessageHandler(filters.PHOTO, search)],
            2:[CallbackQueryHandler(confirm_paying, "buy_archive",)],
        },
        fallbacks=[CallbackQueryHandler(start, "menu",)]
    )
    application.add_handler(naeb_handler)
    application.add_handler(CallbackQueryHandler(start, 'menu'))
    application.add_handler(CallbackQueryHandler(check_payment, "check_payment",))
    
    
    application.add_handler(MessageHandler(filters.TEXT, garbage))
    application.run_polling()


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ø–æ –æ–±–º–∞–Ω–∫–µ –ø–∏–∑–¥—é–∫–æ–≤'

    def handle(self, *args, **kwargs):        
        main()

        
        
        
