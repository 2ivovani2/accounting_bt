from naeb_bot.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, uuid, time, random, cv2, urllib.request
warnings.filterwarnings("ignore")

from PIL import Image
import urllib.request
import numpy

from django.core.management.base import BaseCommand

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

@sync_to_async
def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = NaebBotUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )

    return instance, created

async def start(update: Update, context: CallbackContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    usr, _ = await user_get_by_update(update)

    if not usr.verified_usr:
        markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è üî¶",
                        callback_data="dump_naeb",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û—Ç–∑—ã–≤—ã üåü",
                        url="https://t.me/+LZvqNEc5CUFkZmZh",
                    ),
                ],
            ])
    else:
        markup = InlineKeyboardMarkup([
            [
                    InlineKeyboardButton(
                        text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è üî¶",
                        callback_data="dump_naeb",
                    )
            ],
            [
                InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üñç",
                    callback_data="create_mailing"
                ),
            ],
        ])

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{usr.username}</b>\n\nü§ñ <b>–Ø - –Ωe–πpo—Åe—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –øp–∏–≤a—Ç–Ω—ã–µ —Ño—Ço.</b>\n\nüîê <b>–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫—É—é –Ω–æ–≤–µ–π—à—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–∞–∫ DeepFaceLab, –ø–æ—ç—Ç–æ–º—É —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—Ç–æ–∏—Ç!</b>\n\nüîé <pre>O—Ç–ø—Äa–≤—å—Çe –±–æ—Çy —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª, –∞ –¥–∞–ª—å—à–µ –¥–µ–ª–æ –∑–∞ –Ω–∞–º–∏!</pre>\n\n–üo–¥–¥e—Ä–∂–∫a: @ushshshhs",
        parse_mode="HTML",
        reply_markup=markup
    )

    return ConversationHandler.END

async def ask_for_message(update: Update, context: CallbackContext):
    usr, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"üóø <b>{usr.username}</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚õîÔ∏è",
                    callback_data="stop_sending"
                ),
            ],
        ])
    )

    return 0

async def send_messages(update: Update, context: CallbackContext):
    usr, _ = await user_get_by_update(update)
    all_users = NaebBotUser.objects.all()

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    msg = await context.bot.send_message(
        usr.telegram_chat_id,
        f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>0</b> —Å–æ–æ–±—â–µ–Ω–∏–π.",
        parse_mode="HTML",
    )

    msg_counter = 0
    for user in all_users:
        try:
            await context.bot.send_message(
                user.telegram_chat_id,
                message.text,
                parse_mode="HTML"
            )

            msg_counter += 1
            await context.bot.edit_message_text(
                text=f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{msg_counter}</b> —Å–æ–æ–±—â–µ–Ω–∏–π.",
                chat_id=usr.telegram_chat_id,
                message_id=msg.id,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"üò∂‚Äçüå´Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–≤–Ω–æ <b>{len(all_users) - msg_counter}</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üîó",
                    callback_data="menu"
                ),
            ],
        ])
    )

    return ConversationHandler.END

async def stop_sending(update: Update, context: CallbackContext):
    usr, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üîó",
                    callback_data="menu"
                ),
            ],
        ])
    )

    return ConversationHandler.END
    
async def ask_for_link(update: Update, context: CallbackContext):
    usr, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id,
        "üî• <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b>", 
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="ü§™ EAZY",
                    callback_data="search",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö°Ô∏è MIDDLE",
                    callback_data="search",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üî• HARD",
                    callback_data="search",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚èÆÔ∏è –í –º–µ–Ω—é",
                    callback_data="menu",
                )
            ],
        ])
    )

    return 0

async def content(update: Update, context: CallbackContext):
    usr, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id, 
        '<b>üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞ —á–µ–ª–æ–≤–µ–∫–∞:</b>',
        parse_mode="HTML"
        )
    
    return 1

async def check_photo(update: Update, context: CallbackContext):
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    usr, _ = await user_get_by_update(update)
    
    file_info = await context.bot.get_file(message.photo[-1].file_id)
    urllib.request.urlretrieve(file_info.file_path, "gfg.png")
    
    pil_image = Image.open("gfg.png")

    context.user_data['photo_search'] = message.photo[-1].file_id
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    gray = cv2.cvtColor(numpy.array(pil_image), cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    if len(faces) != 0:
        await context.bot.send_message(
            usr.telegram_chat_id,
            '<b>‚úì –õ–∏—Ü–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úì \n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ–ø–ª–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É üòà</b>',
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="‚è≠Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                    callback_data="face_pass",
                )
            ],
        ])
        )
        
    else:
        await context.bot.send_message(
            message.chat.id,
            '<b>üòî –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ª–∏—Ü–∞\n\n<pre>–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</pre></b>',
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
                    callback_data="face_blocking",
                )
            ],
        ])
    )
    return 2
    
async def search(update:Update, context: CallbackContext):
    startin_text = list("üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•")
    usr, _ = await user_get_by_update(update)
    
    msg = await context.bot.send_message(
        usr.telegram_chat_id,
        f"–í—ã–ø–æ–ª—è–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... üîé\n\n‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n‚è≥ –ì–æ—Ç–æ–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª... <b>{0}%</b>\n{''.join(startin_text)}",
        parse_mode="HTML"
    )

    for index in range(len(startin_text)):
        startin_text[index] = "üü©"
        await context.bot.edit_message_text(
            f"–í—ã–ø–æ–ª—è–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... üîé\n\n‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n‚è≥ –ì–æ—Ç–æ–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª... <b>{(index + 1) * 10}%</b>\n{''.join(startin_text)}",
            usr.telegram_chat_id,
            msg.id,
            parse_mode='HTML'
        )
        time.sleep(3)

    await context.bot.send_photo(
            chat_id=usr.telegram_chat_id,
            photo=context.user_data.get('photo_search', 
            'https://www.google.com/search?q=%D1%84%D0%BE%D1%82%D0%BA%D0%B8++%D0%B4%D0%BB%D1%8F+%D1%81%D0%BB%D0%B8%D0%B2%D0%B0+%D1%82%D0%B3&tbm=isch&ved=2ahUKEwjlgK2GsKqAAxVUJhAIHbBUCC8Q2-cCegQIABAA&oq=%D1%84%D0%BE%D1%82%D0%BA%D0%B8++%D0%B4%D0%BB%D1%8F+%D1%81%D0%BB%D0%B8%D0%B2%D0%B0+%D1%82%D0%B3&gs_lcp=CgNpbWcQAzoECCMQJ1CvDFivDGDBEWgAcAB4AIABVIgBpQGSAQEymAEAoAEBqgELZ3dzLXdpei1pbWfAAQE&sclient=img&ei=SwXAZKWvHtTMwPAPsKmh-AI&bih=789&biw=1440#imgrc=KG6sDTg91r5r4M'),
            caption=f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</b> ‚úÖ\n\n<b>–ò–Ω—Ç–∏–º —Ñ–æ—Ç–æ: </b>{random.randint(5, 30)} —à—Ç.\n<b>–ò–Ω—Ç–∏–º –≤–∏–¥–µ–æ: </b>{random.randint(1, 3)} —à—Ç.", 
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üí∞ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞ 299 ‚ÇΩ",
                    callback_data="buy_archive"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚èÆÔ∏è –í –º–µ–Ω—é",
                    callback_data="menu",
                )

            ]
        ]), 
        write_timeout=5,
    )

    return 3

async def confirm_paying(update: Update, context: CallbackContext):
    code = "#" + str(uuid.uuid4().hex)[:6].upper()
    context.user_data["deal_code"] = code

    usr, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"ü§© <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:</b>\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>299‚ÇΩ</b> –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ'\n\n<b><u>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</u></b>\n<pre>2200 7008 5830 0774</pre>\n<b><u>–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:</u></b> {code}\n\n<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</i> @ushshshhs",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ",
                    callback_data="check_payment"
                ),
            ]
        ])
    )

    return ConversationHandler.END

async def check_payment(update: Update, context:CallbackContext):
    deal_code = context.user_data.get("deal_code", "")
    usr, _ = await user_get_by_update(update)

    msg = await context.bot.send_message(
        usr.telegram_chat_id, 
        '<b>‚è≥ –ú–∏–Ω—É—Ç–æ—á–∫—É....</b>\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂.',
        parse_mode='HTML'
    )
    time.sleep(5)

    await context.bot.delete_message(usr.telegram_chat_id, msg.id)
    await context.bot.send_message(
        usr.telegram_chat_id,
        f"üò¢ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ <b>{deal_code}</b> –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.\n\n<i>*–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –æ–ø–ª–∞—Ç–∞ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    text="‚èÆÔ∏è –í –º–µ–Ω—é",
                    callback_data="menu",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    url="https://t.me/ushshshhs",
                )
            ]
        ])
    )

async def garbage(update:Update, context:CallbackContext):
    usr, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"<b>{usr.username}</b>, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="‚èÆÔ∏è –í –º–µ–Ω—é",
                callback_data="menu",
            )]
        ])        
    )

def main() -> None:
    """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """

    application = Application.builder().token(os.environ.get("NAEB_BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))

    naeb_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_link, "dump_naeb",)],
        states={
            0:[CallbackQueryHandler(content, "search",)],
            1:[MessageHandler(filters.PHOTO, check_photo)],
            2:[CallbackQueryHandler(search, "face_pass"),
               CallbackQueryHandler(content, "face_blocking")],
            3:[CallbackQueryHandler(confirm_paying, "buy_archive",)],
        },
        fallbacks=[CallbackQueryHandler(start, "menu",)]
    )
    application.add_handler(naeb_handler)
    
    mailing_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_message, "create_mailing")],
        states={
            0:[MessageHandler(filters.TEXT, send_messages)]
        },
        fallbacks=[CallbackQueryHandler(start, "menu"), CallbackQueryHandler(stop_sending, "stop_sending")]
    )
    application.add_handler(mailing_handler)
    
    application.add_handler(CallbackQueryHandler(start, 'menu'))
    application.add_handler(CallbackQueryHandler(check_payment, "check_payment",))
    
    
    application.add_handler(MessageHandler(filters.TEXT, garbage))
    application.run_polling()


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ø–æ –æ–±–º–∞–Ω–∫–µ –ø–∏–∑–¥—é–∫–æ–≤'

    def handle(self, *args, **kwargs):        
        main()

        
        
        
