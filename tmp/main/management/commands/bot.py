from main.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings
warnings.filterwarnings("ignore")

from django.core.management.base import BaseCommand

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@sync_to_async
def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = CustomUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )

    token = Token.objects.get_or_create(user=instance)
    
    return instance, created, token[0].key

async def start(update: Update, context: CallbackContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    usr, _, _ = await user_get_by_update(update)
    
    if usr.verified_usr:
        if context.user_data.get("active_table_id", "") in [tbl.id for tbl in usr.get_tables()]:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
                [InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É üí∏",
                    callback_data="add_operation",
                )],
                [InlineKeyboardButton(
                    text="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ç–∞–±–ª–∏—Ü üìÉ",
                    callback_data="list_table",
                )]
            ])

        else:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
                [InlineKeyboardButton(
                    text="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ç–∞–±–ª–∏—Ü üìÉ",
                    callback_data="list_table",
                )]
            ])

        await context.bot.send_video(
            usr.telegram_chat_id,
            "https://media2.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif?cid=ecf05e47u0hkmcznkfg7hju8bo77hffom4asrl76jmv4xlpd&ep=v1_gifs_search&rid=giphy.gif&ct=g",
            caption=f"üòΩ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{usr.username}</b>\nüí∞ –£–∂–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –º–∏–ª–ª–∏–æ–Ω—ã",
            parse_mode="HTML",
            width=150,
            height=150,
            reply_markup=markup
        )
    else:

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚õîÔ∏è <b>{usr.username}</b>, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                    url="https://t.me/i_vovani"
                )]
            ])
        )

    return ConversationHandler.END

async def ask_for_table_name(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)

    if usr.can_create_tables:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üñç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 12 —Å–∏–º–≤–æ–ª–æ–≤</i>",
            parse_mode="HTML",
        )

        return 0
    
    else:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚õîÔ∏è <b>{usr.username}</b>, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                    url="https://t.me/i_vovani"
                )]
            ])
        )

        return ConversationHandler.END

async def create_table(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)

    try:
        if len(update.message.text) > 12:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üëø –î–æ–ø—É—Å—Ç–∏–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å–≤—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω–æ.\n\n–ú–∞–∫—Å–∏–º—É–º - <b>12</b>\n–£ –≤–∞—Å - <b>{len(update.message.text)}</b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="start"
                    )]
                ])
            )

            return None

        new_table = Table(
            name=update.message.text
        )
        new_table.save()
        usr.tables.add(new_table)

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ <b>{new_table.name.capitalize()}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å üèß",
                    callback_data="ask_for_note_type"
                )]
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="start"
                )]
            ])
        )

    except Exception as e:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –¢–∞–±–ª–∏—Ü–∞ <b>{new_table.name.capitalize()}</b> –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="start"
                )]
            ])
        )

async def list_table(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    user_tables = list(reversed(usr.get_tables()))

    if len(user_tables) != 0:
        msg = ""
        reply_keyboard = []
        for table in user_tables:
            msg += f"<b>ID</b> - {table.id}{' ' * (4 - len(str(table.id)))} <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> - {table.name}{' ' * (12 - len(table.name))}\n"
            reply_keyboard.append([KeyboardButton(text=f"ID - {table.id} {table.name}")])

        await context.bot.send_message(
                usr.telegram_chat_id,
                f"üë∫ <b>{usr.username}</b>, –≤–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç–∞–±–ª–∏—Ü—ã:\n\n{msg}",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            )
        
        return 0

    else:
        await context.bot.send_message(
                usr.telegram_chat_id,
                f"üí© <b>{usr.username}</b>, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
              ])
            )

        return ConversationHandler.END

async def choose_table(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    try:
        id = int(update.message.text.split()[2])
        print(id)

        if id in [tbl.id for tbl in usr.get_tables()]:
            context.user_data["active_table_id"] = id

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§ñ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É —Å id = {id}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é üí∏",
                        callback_data="add_operation",
                    )],
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="start"
                    )]
                ])
            )

        else:
            await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="start"
                )]
            ])
        )

    except Exception as e:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="start"
                )]
            ])
        )

    return ConversationHandler.END

def main() -> None:
    """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    application = Application.builder().token(os.environ.get("ACCOUNT_BOT_TOKEN")).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start, "start")) 
    

    create_table_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_table_name, "create_table")],
        states={
            0: [MessageHandler(filters.TEXT, create_table)],
        },
        fallbacks=[]
    )
    application.add_handler(create_table_conv_handler)

    choose_table_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(list_table, "list_table")],
        states={
            0: [MessageHandler(filters.TEXT, choose_table)],
        },
        fallbacks=[]
    )
    application.add_handler(choose_table_conv_handler)


    application.run_polling()


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'

    def handle(self, *args, **kwargs):        
        main()

        
        
        
