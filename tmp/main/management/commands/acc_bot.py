from main.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, re, random, io
from datetime import datetime, timedelta
warnings.filterwarnings("ignore")

import numpy as np, matplotlib.pyplot as plt
from PIL import Image

from django.core.management.base import BaseCommand

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@sync_to_async
def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = CustomUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )

    token = Token.objects.get_or_create(user=instance)
    
    return instance, created, token[0].key

def check_user_status(function):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async def wrapper(self, update: Update, context:CallbackContext):   
        if update.message:
            message = update.message
        else:
            message = update.callback_query.message

        if not message.chat.username:
            username = "Anonymous"
        else:
            username = message.chat.username

        usr, _ = CustomUser.objects.update_or_create(
            telegram_chat_id = message.chat.id,
            username=username
        )

        if usr.verified_usr:
            return await function(update, context)
            
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è <b>{usr.username}</b>, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                        url="https://t.me/i_vovani"
                    )]
                ])
        )
        
    return wrapper
    
class Bot:
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –±–æ—Ç–∞
    """

    def __init__(self) -> None:
        self.application = Application.builder().token(os.environ.get("ACCOUNT_BOT_TOKEN")).build()

    @check_user_status
    async def _start(update: Update, context: CallbackContext):
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

        """

        usr, _, _ = await user_get_by_update(update)
        active_table_id = context.user_data.get("active_table_id", "")

        pictures_for_menu = [
            "https://media2.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif?cid=ecf05e47u0hkmcznkfg7hju8bo77hffom4asrl76jmv4xlpd&ep=v1_gifs_search&rid=giphy.gif&ct=g",
            "https://media.giphy.com/media/JtBZm3Getg3dqxK0zP/giphy-downsized-large.gif",
            "https://media.giphy.com/media/xTiTnqUxyWbsAXq7Ju/giphy.gif",
            "https://media.giphy.com/media/YRw676NBrmPeM/giphy.gif",
            "https://media.giphy.com/media/3oEdvbpl0X32bXD2Vi/giphy.gif",
            "https://media.giphy.com/media/XGP7mf38Vggik/giphy.gif",
            "https://media.giphy.com/media/x33Pp717M1gc0/giphy.gif"
                
        ]

        if active_table_id in [tbl.id for tbl in usr.get_tables()]:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
                [InlineKeyboardButton(
                    text="–í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã üìÉ",
                    callback_data="list_table",
                )],
                [InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å üí∏",
                    callback_data="add_operation",
                )],
                [InlineKeyboardButton(
                    text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üêã",
                    callback_data="category_work",
                ),
                ],
                [InlineKeyboardButton(
                    text="–°–≤–æ–¥–∫–∞ üìä",
                    callback_data="table_analytics",
                ),
                InlineKeyboardButton(
                    text="–ò—Å—Ç–æ—Ä–∏—è üìü",
                    callback_data="operation_history",
                )
                ],
                [InlineKeyboardButton(
                    text="White Paper üìù",
                    url="https://teletype.in/@ivovani/acc_bot_manual"
                ),
                InlineKeyboardButton(
                    text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåª",
                    url="https://t.me/i_vovani"
                )],

                [InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞ üëÄ", web_app=WebAppInfo(url=f"{os.environ.get('DOMAIN_NAME')}/admin"))] if usr.is_superuser else [],
                
            ])

            active_table = Table.objects.get(pk=active_table_id)
            income_cats, consumption_cats = "\n".join(["üîπ " + cat.name for cat in Category.objects.filter(table=active_table, type="–î–æ—Ö–æ–¥").all()]), "\n".join(["üî∏ " + cat.name for cat in Category.objects.filter(table=active_table, type="–†–∞—Å—Ö–æ–¥")])
            
            if income_cats != "" and consumption_cats != "":
                cats_msg = f"<i><u>–î–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\n{income_cats}\n\n<i><u>–†–∞—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\n{consumption_cats}"
            elif income_cats == "" and consumption_cats != "":
                cats_msg = f"<i><u>–î–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\nüòµ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n<i><u>–†–∞—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\n{consumption_cats}"
            elif income_cats != "" and consumption_cats == "":
                cats_msg = f"<i><u>–î–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\n{income_cats}\n\n<i><u>–†–∞—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\nüòµ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            else:
                cats_msg = f"<i><u>–î–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\nüòµ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n<i><u>–†–∞—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</u></i>:\n\nüòµ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
                    


            await context.bot.send_video(
                usr.telegram_chat_id,
                random.choice(pictures_for_menu),
                caption=f"üòΩ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{usr.username}</b>\nüí∞ –£–∂–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –º–∏–ª–ª–∏–æ–Ω—ã\n\n<u><i>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</i></u>:\n\nüîó –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{active_table.name}</b>\n‚ö∞Ô∏è id: <b>{active_table.id}</b>\n\n{cats_msg}",
                parse_mode="HTML",
                width=150,
                height=150,
                reply_markup=markup
            )
        else:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
                [InlineKeyboardButton(
                    text="–í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã üìÉ",
                    callback_data="list_table",
                )],
                [InlineKeyboardButton(
                    text="–°–≤–æ–¥–∫–∞ üìä",
                    callback_data="table_analytics",
                )],
                [InlineKeyboardButton(
                    text="White Paper üìù",
                    url="https://teletype.in/@ivovani/acc_bot_manual"
                ),
                InlineKeyboardButton(
                    text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåª",
                    url="https://t.me/i_vovani"
                )],
                [InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞ üëÄ", web_app=WebAppInfo(url=f"{os.environ.get('DOMAIN_NAME')}/admin"))] if usr.is_superuser else []
            ])

            await context.bot.send_video(
                usr.telegram_chat_id,
                random.choice(pictures_for_menu),
                caption=f"üòΩ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{usr.username}</b>\nüí∞ –£–∂–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –º–∏–ª–ª–∏–æ–Ω—ã.\n\n‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.",
                parse_mode="HTML",
                width=150,
                height=150,
                reply_markup=markup
            )
        
        return ConversationHandler.END

    @check_user_status
    async def _table_analytics(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        end_msg = "üìä <u><b>–°–≤–æ–¥–∫–∞</b></u>\n\n"

        total_income, total_consumption = 0, 0 

        for table in usr.get_tables():
            operations = Operation.objects.filter(table=table).all()
            table_income, table_consumption = 0, 0

            if len(operations) != 0:
                for operation in operations:
                    if operation.type == "–î–æ—Ö–æ–¥":
                        table_income += operation.amount
                    else:
                        table_consumption += operation.amount

                end_msg += f"üîó –¢–∞–±–ª–∏—Ü–∞ <b>{table.name}</b>:\nü§ë –î–æ—Ö–æ–¥: <b>{table_income}‚ÇΩ</b>\nüò¢ –†–∞—Å—Ö–æ–¥: <b>{table_consumption}‚ÇΩ</b>\nüí∏ <b>–ü—Ä–∏–±—ã–ª—å</b>: <b>{table_income - table_consumption}‚ÇΩ</b>\n\n"
            else:
                end_msg += f"üîó –¢–∞–±–ª–∏—Ü–∞ <b>{table.name}</b>:\nü§ë –î–æ—Ö–æ–¥: <b>{table_income}‚ÇΩ</b>\nüò¢ –†–∞—Å—Ö–æ–¥: <b>{table_consumption}‚ÇΩ</b>\nüí∏ <b>–ü—Ä–∏–±—ã–ª—å</b>: <b>{table_income - table_consumption}‚ÇΩ</b>\n\n"
            
            total_income += table_income
            total_consumption += table_consumption

        end_msg += f"\nüç™ <u><b>–û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è</b></u>\n\nüîé –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_income}‚ÇΩ</b>\nüòî –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{total_consumption}‚ÇΩ</b>\nüí© <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</b>: <b>{total_income - total_consumption}‚ÇΩ</b>"

        await context.bot.send_message(
            usr.telegram_chat_id,
            end_msg,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    @check_user_status
    async def _start_category_menu(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üß§",
                callback_data="add_category",
            )], 
            [InlineKeyboardButton(
                text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üéÑ",
                callback_data="change_category",
            )],
            [InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ü§°",
                callback_data="delete_category",
            )],
            [InlineKeyboardButton(
                text="–í –º–µ–Ω—é üç∫",
                callback_data="menu"
            ),]
        ])

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üò≥ <b>{usr.username}</b>, –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
            parse_mode="HTML",
            reply_markup=markup
        )

    @check_user_status
    async def _analyse_history(update: Update, context: CallbackContext):
        """
            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        usr, _, _ = await user_get_by_update(update)
        table_id = context.user_data.get("active_table_id",'')
        
        if Table.objects.filter(id=table_id).exists():
            if Table.objects.get(pk=table_id) in usr.get_tables():
                active_table = Table.objects.get(pk=table_id)
                try:
                    date_start, date_end = context.user_data.get("date_start", ""), context.user_data.get("date_end", ""), 
                    active_table_operations = Operation.objects.filter(
                        date__range=[date_start, date_end],
                        table=active_table, 
                    ).all().order_by('-date')

                    cat_data_dict = {
                        "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":[]
                    }

                    for operation in active_table_operations:
                        if operation.category:
                            if operation.category.name not in cat_data_dict.keys():
                                cat_data_dict[operation.category.name] = [
                                    operation
                                ]
                            else:
                                cat_data_dict[operation.category.name].append(operation)
                        else:
                            cat_data_dict["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"].append(operation)

                    end_msg = f"ü¶â <b><u>–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</u></b>\n\n<b>üß© –¢–∞–±–ª–∏—Ü–∞:</b> <i>{active_table.name}</i>\n\n<b>üïê –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {date_start}\n<b>üï§ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞:</b> {date_end}\n\n"
                    
                    if len(cat_data_dict["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]) == 0:
                        del cat_data_dict["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]

                    for category in cat_data_dict.keys():
                        amounts = []
                        if category != "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
                            category_type = Category.objects.filter(name=category).first().type
                        else:
                            category_type = "–ë–µ–∑ —Ç–∏–ø"    

                        for operation in cat_data_dict[category]:
                            amounts.append(operation.amount)
                            
                        end_msg += f"üî∏ <b><u>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</u></b>: <i>{category}</i>\n\n‚àô –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{category_type}–Ω–∞—è</b>\n‚àô –û–±—â–∏–π –æ–±—ä–µ–º –¥–µ–Ω–µ–≥: <b>{sum(amounts)}‚ÇΩ</b>\n‚àô –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –¥–µ–Ω–µ–≥: <b>{sum(amounts) / len(amounts) if len(amounts) != 0 else 0:.2f}‚ÇΩ</b>\n\n"
                        
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        end_msg,
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            ),
                            InlineKeyboardButton(
                                text="–ï—â–µ —Ä–∞–∑ üöÄ",
                                callback_data="operation_history"
                            )]
                        ])
                    )
                
                except Exception as e:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

                return ConversationHandler.END

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

            return ConversationHandler.END

    def register_handlers(self) -> Application: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """
        self.application.add_handler(CommandHandler("start", self._start))
        
        self.application.add_handler(CallbackQueryHandler(self._table_analytics, "table_analytics"))
        self.application.add_handler(CallbackQueryHandler(self._start_category_menu, "category_work"))
        self.application.add_handler(CallbackQueryHandler(self._analyse_history, "analyse_history"))

        return self.application

class TableWork(Bot):
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–≤–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    """

    def __init__(self, application) -> None:
        self.application = application 

    @check_user_status
    async def _ask_for_table_name(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        if usr.can_create_tables:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üñç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                        callback_data="menu"
                    )]
                ])
            )

            return 0
        
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è <b>{usr.username}</b>, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                        url="https://t.me/i_vovani"
                    )]
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _create_table(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        try:
            if len(update.message.text) > 255:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üëø –î–æ–ø—É—Å—Ç–∏–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å–≤—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω–æ.\n\n–ú–∞–∫—Å–∏–º—É–º - <b>255</b>\n–£ –≤–∞—Å - <b>{len(update.message.text)}</b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

                return None

            new_table = Table(
                name=update.message.text
            )
            new_table.save()
            usr.tables.add(new_table)

            context.user_data["active_table_id"] = new_table.id

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ <b>{new_table.name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–Ω–æ–π.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å üèß",
                        callback_data="add_operation"
                    )],
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –¢–∞–±–ª–∏—Ü–∞ <b>{new_table.name.capitalize()}</b> –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _list_table(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        
        user_tables = usr.get_tables()

        if len(user_tables) != 0:
            msg = ""
            reply_keyboard = []
            for index in range(0, len(user_tables), 2):
                try:
                    t1, t2 = user_tables[index : index + 2]
                    reply_keyboard.append([InlineKeyboardButton(text=f"{t1.name}", callback_data=f"choose_table_{t1.id}"), InlineKeyboardButton(text=f"{t2.name}", callback_data=f"choose_table_{t2.id}")])
                
                except ValueError:
                    t1 = user_tables[index : index + 2][0]
                    reply_keyboard.append([InlineKeyboardButton(text=f"{t1.name}", callback_data=f"choose_table_{t1.id}"),])

            reply_keyboard.append(
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            )

            await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üë∫ <b>{usr.username}</b>, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n\n{msg}",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(reply_keyboard),
                )
            
            return 0

        else:
            await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üí© <b>{usr.username}</b>, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                        callback_data="create_table",
                    )],
                ])
                )

            return ConversationHandler.END

    @check_user_status
    async def _choose_table(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        
        try:
            id = int(update.callback_query.data.strip().lower().split("_")[-1])
            if id in [tbl.id for tbl in usr.get_tables()]:
                context.user_data["active_table_id"] = id

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü§ñ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É <b>{Table.objects.get(pk=id).name}</b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å üí∏",
                            callback_data="add_operation",
                        )],
                        [InlineKeyboardButton(
                            text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üêã",
                            callback_data="category_work",
                        )],
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        ), 
                        InlineKeyboardButton(
                            text="–ò—Å—Ç–æ—Ä–∏—è üìü",
                            callback_data="operation_history",
                        )]
                    ])
                )

            else:
                await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        return ConversationHandler.END

    def register_handlers(self) -> None: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """

        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._list_table, "list_table")],
            states={
                0: [CallbackQueryHandler(self._choose_table, "^choose_table_")],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_table_name, "create_table")],
            states={
                0: [MessageHandler(filters.TEXT, self._create_table)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

class OperationWork(Bot):
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–≤–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    """

    def __init__(self, application) -> None:
        self.application = application 

    @check_user_status
    async def _ask_for_operation_type(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        if Table.objects.filter(id=context.user_data.get("active_table_id",'')).exists():
            if Table.objects.get(pk=context.user_data.get("active_table_id",'')) in usr.get_tables():
                            
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚òëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–î–æ—Ö–æ–¥ ‚ûï",
                            callback_data="operation_income"
                        )],
                        [InlineKeyboardButton(
                            text="–†–∞—Å—Ö–æ–¥ ‚ûñ",
                            callback_data="operation_consumption"
                        )],
                        [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                            callback_data="menu"
                        )]
                    ])
                )

                return 0
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _add_operation(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        oper_type = update.callback_query.data.strip().lower().split("_")[-1]
        if oper_type == "income":
            await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø - <b>–î–æ—Ö–æ–¥</b>\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                            callback_data="menu"
                        )]
                    ])
            )

            context.user_data["operation_type"] = "–î–æ—Ö–æ–¥"
            return 1

        elif oper_type == "consumption":
            await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø - <b>–†–∞—Å—Ö–æ–¥</b>\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                            callback_data="menu"
                        )]
                    ])
            )

            context.user_data["operation_type"] = "–†–∞—Å—Ö–æ–¥"
            return 1
        else:
            await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
            )

            return ConversationHandler.END

    @check_user_status
    async def _get_operation_amount(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        try:
            context.user_data["operation_amount"] = int(update.message.text.strip())
            table_id = context.user_data.get("active_table_id", "")
            
            if table_id != "":
                cats = Category.objects.filter(table=Table.objects.get(pk=table_id),type=context.user_data["operation_type"]).all()
                
                if len(cats) != 0:
                    cats_keyboard = []
                    for index in range(0, len(cats), 2):
                        try:
                            c1, c2 = cats[index: index + 2]
                            cats_keyboard.append([InlineKeyboardButton(text=f"{c1.name}", callback_data=f"choose_cat_{c1.id}"), InlineKeyboardButton(text=f"{c2.name}", callback_data=f"choose_cat_{c2.id}")])
                        
                        except ValueError:
                            c1 = cats[index: index + 2][0]
                            cats_keyboard.append([InlineKeyboardButton(text=f"{c1.name}", callback_data=f"choose_cat_{c1.id}"),])
                    
                    cats_keyboard.append([
                        InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                                callback_data="menu"
                        )
                    ])

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"ü•∂ –û—Ç–ª–∏—á–Ω–æ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—É–º–º—É = <b>{int(update.message.text.strip())}‚ÇΩ</b> \n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(cats_keyboard)
                    )

                    return 2

                else:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"ü•∂ –û—Ç–ª–∏—á–Ω–æ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—É–º–º—É = <b>{int(update.message.text.strip())}‚ÇΩ</b> \n\nüò∂‚Äçüå´Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –∫ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\nüëÅ –ê —Å–µ–π—á–∞—Å –æ—Ç—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©'.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©",
                                callback_data="skip_description"
                            )],
                            [InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                                callback_data="menu"
                            )]
                        ])
                    )

                    return 3
                
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ–µ –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        return ConversationHandler.END

    @check_user_status
    async def _choose_operation_category(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        category_id = update.callback_query.data.split("_")[-1]
        if Category.objects.filter(id=category_id).exists():
            context.user_data["category_id"] = category_id
            
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{Category.objects.get(pk=category_id).name}</b> –≤—ã–±—Ä–∞–Ω–∞.\n\nüòÉ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©' –∏ –Ω–∞ —ç—Ç–æ–º –∑–∞–∫–æ–Ω—á–∏–º.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©",
                        callback_data="skip_description"
                    )],
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                        callback_data="menu"
                    )]
                ])
            )
            return 3
        
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º <b>id</b> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )
        
        return ConversationHandler.END

    @check_user_status
    async def _create_operation(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        
        try:
            desc = update.message.text.strip()
        except:
            desc = None

        table_id = context.user_data.get("active_table_id",'')

        if Table.objects.filter(id=table_id).exists():
            if Table.objects.get(pk=table_id) in usr.get_tables():
                try:
                    if context.user_data.get("category_id", "") != "":
                        cat = Category.objects.get(pk=context.user_data.get("category_id", None))
                    else:
                        cat = None

                    operation_type = context.user_data["operation_type"]
                    amount = context.user_data["operation_amount"]

                    new_operation = Operation(
                        type=operation_type,
                        amount=amount,
                        description=desc,
                        creator=usr,
                        category=cat,
                        table=Table.objects.get(pk=table_id)
                    )

                    new_operation.save()

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å —Ç–∏–ø–æ–º <b>{operation_type}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ üîÉ",
                                callback_data="add_operation",
                            )],
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

                    return ConversationHandler.END

                except Exception as e:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

                    return ConversationHandler.END

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

                return ConversationHandler.END

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

            return ConversationHandler.END

    def register_handlers(self) -> None: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        """

        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_operation_type, "add_operation")],
            states={
                0: [CallbackQueryHandler(self._add_operation, "^operation_")],
                1: [MessageHandler(filters.TEXT, self._get_operation_amount)],
                2: [CallbackQueryHandler(self._choose_operation_category, "^choose_cat_"),],
                3: [MessageHandler(filters.TEXT, self._create_operation), CallbackQueryHandler(self._create_operation, "skip_description")]

            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))
        
class CategoryWork(Bot):
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """

    def __init__(self, application) -> None:
        self.application = application 
    
    @check_user_status
    async def _ask_for_category_name(update:Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        if usr.can_create_tables:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üñç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                        callback_data="menu"
                    )]
                ])
            )

            return 0
        
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è <b>{usr.username}</b>, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                        url="https://t.me/i_vovani"
                    )]
                ])
            )

            return ConversationHandler.END

    @check_user_status
    async def _ask_for_category_type(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        category_name = update.message.text.strip()

        context.user_data["category_name"] = category_name
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üî´ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–º–Ω–∏–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - <b>{category_name}</b>.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–î–æ—Ö–æ–¥–Ω–∞—è ‚ûï",
                    callback_data="category_income"
                )],
                [InlineKeyboardButton(
                    text="–†–∞—Å—Ö–æ–¥–Ω–∞—è ‚ûñ",
                    callback_data="category_consumption"
                )],
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è",
                    callback_data="menu"
                )]
            ])
        )
        
        return 1

    @check_user_status
    async def _create_category(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        table_id = context.user_data.get("active_table_id",'')
        if Table.objects.filter(id=table_id).exists():
            if Table.objects.get(pk=table_id) in usr.get_tables():
                try:
                    category_name = context.user_data["category_name"]

                    if update.callback_query.data.split("_")[-1] == "income":
                        category_type = "–î–æ—Ö–æ–¥"
                    else:
                        category_type = "–†–∞—Å—Ö–æ–¥"

                    Category(
                        name=category_name,
                        table=Table.objects.get(pk=table_id),
                        type=category_type
                    ).save()

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —Å —Ç–∏–ø–æ–º <i>{category_type}</i> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üêã",
                                callback_data="add_category",
                            )],
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            ),]
                        ])
                    )

                except Exception as e:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

                return ConversationHandler.END

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

                return ConversationHandler.END

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

            return ConversationHandler.END

    @check_user_status
    async def _ask_category_to_change(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        table_id = context.user_data.get("active_table_id", "")
            
        if table_id != "":
            active_table = Table.objects.get(pk=table_id)
            cats = Category.objects.filter(table=active_table).all()

            if len(cats) != 0:
                cats_keyboard = []
                for index in range(0, len(cats), 2):
                    try:
                        c1, c2 = cats[index: index + 2]
                        cats_keyboard.append([InlineKeyboardButton(text=f"{c1.name}", callback_data=f"change_cat_{c1.id}"), InlineKeyboardButton(text=f"{c2.name}", callback_data=f"choose_cat_{c2.id}")])
                    
                    except ValueError:
                        c1 = cats[index: index + 2][0]
                        cats_keyboard.append([InlineKeyboardButton(text=f"{c1.name}", callback_data=f"change_cat_{c1.id}"),])
                
                cats_keyboard.append([
                    InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                            callback_data="menu"
                    )
                ])

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü•¥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(cats_keyboard)
                )

                return 0

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü•∂ –£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

        else:
            await context.bot.send_message(
                usr.telegram_chat_id, 
                f"üçî <b>{usr.username}</b>, –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n\nüß© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É. ",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    ),]
                ])
            )

        return ConversationHandler.END   

    @check_user_status
    async def _ask_category_to_delete(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)

        table_id = context.user_data.get("active_table_id", "")
            
        if table_id != "":
            active_table = Table.objects.get(pk=table_id)
            cats = Category.objects.filter(table=active_table).all()

            if len(cats) != 0:
                cats_keyboard = []
                for index in range(0, len(cats), 2):
                    try:
                        c1, c2 = cats[index: index + 2]
                        cats_keyboard.append([InlineKeyboardButton(text=f"{c1.name}", callback_data=f"delete_cat_{c1.id}"), InlineKeyboardButton(text=f"{c2.name}", callback_data=f"delete_cat_{c2.id}")])
                    
                    except ValueError:
                        c1 = cats[index: index + 2][0]
                        cats_keyboard.append([InlineKeyboardButton(text=f"{c1.name}", callback_data=f"delete_cat_{c1.id}"),])
                
                cats_keyboard.append([
                    InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                            callback_data="menu"
                    )
                ])

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü•¥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(cats_keyboard)
                )

                return 0

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"ü•∂ –£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

        else:
            await context.bot.send_message(
                usr.telegram_chat_id, 
                f"üçî <b>{usr.username}</b>, –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n\nüß© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É. ",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    ),]
                ])
            )

        return ConversationHandler.END   

    @check_user_status
    async def _ask_category_name_to_change(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        context.user_data["category_id_to_change"] = update.callback_query.data.split("_")[-1]
        await context.bot.send_message(
            usr.telegram_chat_id, 
            f"üòΩ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é - <i>{Category.objects.get(pk=context.user_data['category_id_to_change'])}</i>.\n\nüëΩ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è",
                    callback_data="menu"
                )]
            ])
        )

        return 1

    @check_user_status
    async def _delete_category(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        try:
            cat_to_delete = Category.objects.get(pk=update.callback_query.data.split("_")[-1])
            cat_to_delete_name = cat_to_delete.name
            cat_to_delete.delete()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üòµ‚Äçüí´ <b>–°–¥–µ–ª–∞–Ω–æ!</b> –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{cat_to_delete_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    ),]
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üò≥ –í–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n<b>–û—à–∏–±–∫–∞:</b> <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    ),]
                ])
            )
        
        return ConversationHandler.END

    @check_user_status
    async def _update_category(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        new_name = update.message.text.strip()
        try:
            Category.objects.filter(id=context.user_data["category_id_to_change"]).update(
                name=new_name
            )

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ <b>{new_name}</b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    ),]
                ])
            )

        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üò≥ –í–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n<b>–û—à–∏–±–∫–∞:</b> <i>{e}</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    ),]
                ])
            )
        
        return ConversationHandler.END

    def register_handlers(self) -> None: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        """

        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_category_name, "add_category")],
            states={
                0: [MessageHandler(filters.TEXT, self._ask_for_category_type)],
                1: [CallbackQueryHandler(self._create_category, "^category_")]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))    

        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_category_to_change, "change_category")],
            states={
                0:[CallbackQueryHandler(self._ask_category_name_to_change, "^change_cat_")],
                1:[MessageHandler(filters.TEXT, self._update_category)]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_category_to_delete, "delete_category")],
            states={
                0:[CallbackQueryHandler(self._delete_category, "^delete_cat_")],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

class HistoryWork(Bot):
    """
        –ö–ª–∞—Å—Å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π instance –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """

    def __init__(self, application) -> None:
        self.application = application 

    @check_user_status
    async def _ask_for_history_type(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üî© <b>{usr.username}</b>, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Å—Ä–µ–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö <b>dd-mm-yy</b> <b>dd-mm-yy</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

        return 0

    @check_user_status
    async def _show_history(update: Update, context: CallbackContext):
        usr, _, _ = await user_get_by_update(update)
        table_id = context.user_data.get("active_table_id",'')

        message = list(filter(lambda x: x != " ", update.message.text.lower().strip().split()))
        expression = re.compile("(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(19|20)\d\d")

        if len(message) == 2:
            if expression.match(message[0]) and expression.match(message[1]):
                date_start, date_end = "-".join(reversed(message[0].split("-"))), "-".join(list(reversed(message[1].split("-")[1:])) + [str(int(message[1].split("-")[0]) + 1)])
                context.user_data["date_start"], context.user_data["date_end"] = date_start, date_end

                if Table.objects.filter(id=table_id).exists():
                    if Table.objects.get(pk=table_id) in usr.get_tables():
                        users_table = Table.objects.get(pk=table_id)
                        
                        try:
                            end_msg = f"‚è≥<b><u>–ò—Å—Ç–æ—Ä–∏—è</u></b>\n\n<b>üß© –¢–∞–±–ª–∏—Ü–∞:</b> <i>{users_table.name}</i>\n\n<b>üïê –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {date_start}\n<b>üï§ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞:</b> {date_end}\n\n"
                            active_table_operations = Operation.objects.filter(
                                date__range=[date_start, date_end],
                                table=users_table
                            ).all().order_by('-date')
                            
                            total_slice_income, total_slice_consumption = 0, 0
                            for table in usr.get_tables():
                                table_operations = Operation.objects.filter(
                                    date__range=[date_start, date_end],
                                    table=table
                                ).all().order_by('-date')
                                
                                for operation in table_operations:
                                    if operation.type.lower() == "–¥–æ—Ö–æ–¥":
                                        total_slice_income += operation.amount
                                    elif operation.type.lower() == "—Ä–∞—Å—Ö–æ–¥":
                                        total_slice_consumption += operation.amount


                            if len(active_table_operations) != 0:
                                active_table_slice_income, active_table_slice_consumption = 0, 0 
                                
                                income_msg = f"üí∏ <b><u>–î–æ—Ö–æ–¥—ã:</u></b>\n\n"
                                consumption_msg = f"ü§¨ <b><u>–†–∞—Å—Ö–æ–¥—ã:</u></b>\n\n"

                                for operation in active_table_operations:
                                    
                                    if operation.type.lower() == "–¥–æ—Ö–æ–¥":
                                        active_table_slice_income += operation.amount
                                        income_msg += f"<i>{str(operation.date).split()[0]}</i> - <b>{operation.amount}‚ÇΩ</b> - <b>{operation.description}</b>\n"
                                    
                                    elif operation.type.lower() == "—Ä–∞—Å—Ö–æ–¥":
                                        active_table_slice_consumption += operation.amount
                                        consumption_msg += f"<i>{str(operation.date).split()[0]}</i> - <b>{operation.amount}‚ÇΩ</b> - <b>{operation.description}</b>\n"
                                    
                                end_msg = end_msg + income_msg + "\n" + consumption_msg

                                end_msg += f"\n\nüóø<b><u>–°–≤–æ–¥–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:</u></b>\n\nüîé –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{active_table_slice_income}‚ÇΩ</b>\nüòî –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{active_table_slice_consumption}‚ÇΩ</b>\nüí© <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</b>: <b>{active_table_slice_income - active_table_slice_consumption}‚ÇΩ</b>\n\n"
                                end_msg += f"\nüç∫<b><u>–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º:</u></b>\n\nüîé –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_slice_income}‚ÇΩ</b>\nüòî –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{total_slice_consumption}‚ÇΩ</b>\nüí© <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</b>: <b>{total_slice_income - total_slice_consumption}‚ÇΩ</b>"
                                
                            else:
                                end_msg = f"‚è≥<b><u>–ò—Å—Ç–æ—Ä–∏—è</u></b>\n\n<b>üß© –¢–∞–±–ª–∏—Ü–∞:</b> <i>{users_table.name}</i>\n\n<b>üïê –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {date_start}\n<b>üï§ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞:</b> {date_end}\n\nüòµ‚Äçüí´ –ù–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                            
                            await context.bot.send_message(
                                usr.telegram_chat_id,
                                end_msg,
                                parse_mode="HTML",
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton(
                                        text="–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ü¶ç",
                                        callback_data="analyse_history"
                                    )],
                                    [InlineKeyboardButton(
                                        text="–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìä",
                                        callback_data="graph_history"
                                    )],
                                    [InlineKeyboardButton(
                                        text="–ï—â–µ —Ä–∞–∑ üöÄ",
                                        callback_data="operation_history"
                                    ),
                                    InlineKeyboardButton(
                                        text="–í –º–µ–Ω—é üç∫",
                                        callback_data="menu"
                                    )],
                                ])
                            )

                        except Exception as e:
                            await context.bot.send_message(
                                usr.telegram_chat_id,
                                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                                parse_mode="HTML",
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton(
                                        text="–í –º–µ–Ω—é üç∫",
                                        callback_data="menu"
                                    )]
                                ])
                            )
                    else:
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="–í –º–µ–Ω—é üç∫",
                                    callback_data="menu"
                                )]
                            ])
                        )

                else:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

            else:
                await context.bot.send_message(
                usr.telegram_chat_id,
                f"üëø –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç, –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>dd-mm-yy dd-mm-yy</b></i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )
                
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üëø –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç, –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>dd-mm-yy dd-mm-yy</b></i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        return ConversationHandler.END
    
    def register_handlers(self) -> None: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        """
        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_for_history_type, "operation_history")],
            states={
                0: [MessageHandler(filters.TEXT, self._show_history)]
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)]
        ))

class GraphWork(Bot):
    """
        –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Ä–∞–±–æ—Ç—É —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞
    """        

    def __init__(self, application) -> None:
        self.application = application 

    @check_user_status
    async def _generate_graph(update: Update, context: CallbackContext) -> None:
        """
            –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 3 –Ω–µ–¥–µ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        usr, _, _ = await user_get_by_update(update)
        table_id = context.user_data.get("active_table_id",'')

        curr_delta = (datetime.strptime(context.user_data["date_start"], '%Y-%m-%d').date(), datetime.strptime(context.user_data["date_end"], '%Y-%m-%d').date())
        time_delta = (curr_delta[1] - curr_delta[0]).days 

        delta_1 = (curr_delta[0] - timedelta(days=time_delta), curr_delta[1] - timedelta(days=time_delta))
        delta_2 = (delta_1[0] - timedelta(days=time_delta), delta_1[1] - timedelta(days=time_delta))

        if Table.objects.filter(id=table_id).exists():
            if Table.objects.get(pk=table_id) in usr.get_tables():
                users_table = Table.objects.get(pk=table_id)
                
                try:
                    data = {
                        "–†–∞—Å—Ö–æ–¥": [0, 0, 0],
                        "–î–æ—Ö–æ–¥": [0, 0, 0],
                    }

                    # TODO —è —ç—Ç–æ –ø–∏—Å–∞–ª –ø–æ–¥ –≥–µ—Ä–æ–∏–Ω–æ–º, –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å))

                    for index, week in enumerate([
                        Operation.objects.filter(
                        date__range=[curr_delta[0], curr_delta[1]],
                        table=users_table
                        ).all().order_by('-date'),

                        Operation.objects.filter(
                        date__range=[delta_1[0], delta_1[1]],
                        table=users_table
                        ).all().order_by('-date'),

                        Operation.objects.filter(
                        date__range=[delta_2[0], delta_2[1]],
                        table=users_table
                        ).all().order_by('-date'),
                    ]):
                        income, consumption = 0, 0
                        for operation in week:
                            if operation.type.lower() == "–¥–æ—Ö–æ–¥":
                                income += operation.amount
                            else:
                                consumption += operation.amount

                        data["–î–æ—Ö–æ–¥"][index] = income
                        data["–†–∞—Å—Ö–æ–¥"][index] = consumption
                        

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"üëΩ <b>{usr.username}</b>, –≥–æ—Ç–æ–≤–ª—é –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...",
                        parse_mode="HTML",
                    )


                    weeks = ('–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥', '–ü—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥', '–ü–æ–∑–∞–ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥')
                    width = 0.4
                    bottom = np.zeros(len(weeks))

                    fig, ax = plt.subplots()

                    for money_type, money_count in data.items():
                        p = ax.bar(weeks, money_count, width, label=money_type, bottom=bottom)
                        bottom += money_count

                        ax.bar_label(p, label_type='center')

                    ax.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–µ—Ä–∏–æ–¥–∞ –ø–æ {time_delta} –¥–Ω–µ–π')
                    ax.legend()

                    buf = io.BytesIO()
                    fig.savefig(buf)
                    buf.seek(0)
                    im = buf.getvalue()

                    await context.bot.send_photo(
                        usr.telegram_chat_id,
                        im, 
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

                except Exception as e:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )


    def register_handlers(self) -> None: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        """
        # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        self.application.add_handler(CallbackQueryHandler(self._generate_graph, "graph_history"))

class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'

    def handle(self, *args, **kwargs):        
        main_class_instance = Bot()
        application = main_class_instance.register_handlers()
        
        TableWork(application=application).register_handlers()
        OperationWork(application=application).register_handlers()
        CategoryWork(application=application).register_handlers()
        HistoryWork(application=application).register_handlers()
        GraphWork(application=application).register_handlers()

        application.add_handler(CallbackQueryHandler(main_class_instance._start, "menu"))
        
        application.run_polling()

        
        
        
