from main.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, re
warnings.filterwarnings("ignore")

from django.core.management.base import BaseCommand

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@sync_to_async
def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = CustomUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )

    token = Token.objects.get_or_create(user=instance)
    
    return instance, created, token[0].key

async def start(update: Update, context: CallbackContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    usr, _, _ = await user_get_by_update(update)

    if usr.verified_usr:
        active_table_id = context.user_data.get("active_table_id", "")

        if active_table_id in [tbl.id for tbl in usr.get_tables()]:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
                [InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å üí∏",
                    callback_data="add_operation",
                )],
                [InlineKeyboardButton(
                    text="–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã üìÉ",
                    callback_data="list_table",
                )],
                [InlineKeyboardButton(
                    text="–°–≤–æ–¥–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º üìä",
                    callback_data="table_analytics",
                )],
                [InlineKeyboardButton(
                    text="–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π üî≠",
                    callback_data="operation_history",
                )]
            ])

            active_table = Table.objects.get(pk=active_table_id)

            await context.bot.send_video(
                usr.telegram_chat_id,
                "https://media2.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif?cid=ecf05e47u0hkmcznkfg7hju8bo77hffom4asrl76jmv4xlpd&ep=v1_gifs_search&rid=giphy.gif&ct=g",
                caption=f"üòΩ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{usr.username}</b>\nüí∞ –£–∂–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –º–∏–ª–ª–∏–æ–Ω—ã\n\n<u><i>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</i></u>:\n\nüîó –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{active_table.name}</b>\n‚ö∞Ô∏è id: <b>{active_table.id}</b>",
                parse_mode="HTML",
                width=150,
                height=150,
                reply_markup=markup
            )
        else:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
                [InlineKeyboardButton(
                    text="–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã üìÉ",
                    callback_data="list_table",
                )],
                [InlineKeyboardButton(
                    text="–°–≤–æ–¥–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º üìä",
                    callback_data="table_analytics",
                )]
            ])

            await context.bot.send_video(
                usr.telegram_chat_id,
                "https://media2.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif?cid=ecf05e47u0hkmcznkfg7hju8bo77hffom4asrl76jmv4xlpd&ep=v1_gifs_search&rid=giphy.gif&ct=g",
                caption=f"üòΩ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{usr.username}</b>\nüí∞ –£–∂–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –º–∏–ª–ª–∏–æ–Ω—ã",
                parse_mode="HTML",
                width=150,
                height=150,
                reply_markup=markup
            )
    else:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚õîÔ∏è <b>{usr.username}</b>, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                    url="https://t.me/i_vovani"
                )]
            ])
        )

    return ConversationHandler.END

async def ask_for_table_name(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)

    if usr.can_create_tables:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üñç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 12 —Å–∏–º–≤–æ–ª–æ–≤</i>",
            parse_mode="HTML",
        )

        return 0
    
    else:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚õîÔ∏è <b>{usr.username}</b>, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                    url="https://t.me/i_vovani"
                )]
            ])
        )

        return ConversationHandler.END

async def create_table(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)

    try:
        if len(update.message.text) > 12:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üëø –î–æ–ø—É—Å—Ç–∏–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å–≤—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω–æ.\n\n–ú–∞–∫—Å–∏–º—É–º - <b>12</b>\n–£ –≤–∞—Å - <b>{len(update.message.text)}</b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

            return None

        new_table = Table(
            name=update.message.text
        )
        new_table.save()
        usr.tables.add(new_table)

        context.user_data["active_table_id"] = new_table.id

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ <b>{new_table.name.capitalize()}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–Ω–æ–π.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å üèß",
                    callback_data="add_operation"
                )],
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    except Exception as e:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –¢–∞–±–ª–∏—Ü–∞ <b>{new_table.name.capitalize()}</b> –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    return ConversationHandler.END

async def list_table(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    user_tables = usr.get_tables()

    if len(user_tables) != 0:
        msg = ""
        reply_keyboard = []
        for table in user_tables:
            msg += f"<b>ID</b> - {table.id}{' ' * (4 - len(str(table.id)))} <b>{table.name}{' ' * (12 - len(table.name))}</b>\n"
            reply_keyboard.append([KeyboardButton(text=f"ID - {table.id} {table.name}")])

        await context.bot.send_message(
                usr.telegram_chat_id,
                f"üë∫ <b>{usr.username}</b>, –≤–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç–∞–±–ª–∏—Ü—ã:\n\n{msg}",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            )
        
        return 0

    else:
        await context.bot.send_message(
                usr.telegram_chat_id,
                f"üí© <b>{usr.username}</b>, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ‚ûï",
                    callback_data="create_table",
                )],
              ])
            )

        return ConversationHandler.END

async def choose_table(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    try:
        id = int(update.message.text.split()[2])

        if id in [tbl.id for tbl in usr.get_tables()]:
            context.user_data["active_table_id"] = id

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§ñ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É —Å id = {id}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é üí∏",
                        callback_data="add_operation",
                    )],
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

        else:
            await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    except Exception as e:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    return ConversationHandler.END

async def ask_for_operation_type(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    if Table.objects.filter(id=context.user_data.get("active_table_id",'')).exists():
        if Table.objects.get(pk=context.user_data.get("active_table_id",'')) in usr.get_tables():
                        
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚òëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–î–æ—Ö–æ–¥ ‚ûï",
                        callback_data="income"
                    )],
                    [InlineKeyboardButton(
                        text="–†–∞—Å—Ö–æ–¥ ‚ûñ",
                        callback_data="consumption"
                    )],
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

            return 0
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

    else:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    return ConversationHandler.END

async def add_income_operation(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    await context.bot.send_message(
            usr.telegram_chat_id,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø - <b>–î–æ—Ö–æ–¥</b>\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
    )

    context.user_data["payment_type"] = "–î–æ—Ö–æ–¥"

    return 1

async def add_consumption_operation(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    await context.bot.send_message(
            usr.telegram_chat_id,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø - <b>–†–∞—Å—Ö–æ–¥</b>\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
    )

    context.user_data["payment_type"] = "–†–∞—Å—Ö–æ–¥"

    return 1

async def get_operation_amount(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    try:
        context.user_data["payment_amount"] = int(update.message.text.strip())
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"ü•∂ –û—Ç–ª–∏—á–Ω–æ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—É–º–º—É = <b>{int(update.message.text.strip())}‚ÇΩ</b> \n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –∑–∞–∫–æ–Ω—á–∏–º –Ω–∞ —ç—Ç–æ–º.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

        return 2
    
    except Exception as e:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    return ConversationHandler.END

async def create_operation(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    desc = update.message.text.strip().capitalize()
    table_id = context.user_data.get("active_table_id",'')
    if Table.objects.filter(id=table_id).exists():
        if Table.objects.get(pk=table_id) in usr.get_tables():
            try:
                if context.user_data["payment_type"] == "–î–æ—Ö–æ–¥":
                    new_operation = Operation(
                        type="–î–æ—Ö–æ–¥",
                        amount=context.user_data["payment_amount"],
                        description=desc,
                        creator=usr,
                        table=Table.objects.get(pk=table_id)
                    )

                    new_operation.save()

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å —Ç–∏–ø–æ–º <b>–î–æ—Ö–æ–¥</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

                    return ConversationHandler.END


                elif context.user_data["payment_type"] == "–†–∞—Å—Ö–æ–¥":
                    new_operation = Operation(
                        type="–†–∞—Å—Ö–æ–¥",
                        amount=context.user_data["payment_amount"],
                        description=desc,
                        creator=usr,
                        table=Table.objects.get(pk=table_id)
                    )

                    new_operation.save()

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å —Ç–∏–ø–æ–º <b>–†–∞—Å—Ö–æ–¥</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

                    return ConversationHandler.END

                else:
                    raise Exception("–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                
            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

                return ConversationHandler.END

        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–í –º–µ–Ω—é üç∫",
                        callback_data="menu"
                    )]
                ])
            )

            return ConversationHandler.END

    else:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

        return ConversationHandler.END

async def table_analytics(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    end_msg = "üìä <u><b>–°–≤–æ–¥–∫–∞</b></u>\n\n"

    total_income, total_consumption = 0, 0 

    for table in usr.get_tables():
        operations = Operation.objects.filter(table=table).all()
        table_income, table_consumption = 0, 0

        if len(operations) != 0:
            for operation in operations:
                if operation.type == "–î–æ—Ö–æ–¥":
                    table_income += operation.amount
                else:
                    table_consumption += operation.amount

            end_msg += f"üîó –¢–∞–±–ª–∏—Ü–∞ <b>{table.name}</b>:\nü§ë –î–æ—Ö–æ–¥: <b>{table_income}‚ÇΩ</b>\nüò¢ –†–∞—Å—Ö–æ–¥: <b>{table_consumption}‚ÇΩ</b>\nüí∏ <b>–ü—Ä–∏–±—ã–ª—å</b>: <b>{table_income - table_consumption}‚ÇΩ</b>\n\n"
        else:
            end_msg += f"üîó –¢–∞–±–ª–∏—Ü–∞ <b>{table.name}</b>:\nü§ë –î–æ—Ö–æ–¥: <b>{table_income}‚ÇΩ</b>\nüò¢ –†–∞—Å—Ö–æ–¥: <b>{table_consumption}‚ÇΩ</b>\nüí∏ <b>–ü—Ä–∏–±—ã–ª—å</b>: <b>{table_income - table_consumption}‚ÇΩ</b>\n\n"
        
        total_income += table_income
        total_consumption += table_consumption

    end_msg += f"\nüç™ <u><b>–û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è</b></u>\n\nüîé –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_income}‚ÇΩ</b>\nüòî –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{total_consumption}‚ÇΩ</b>\nüí© <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</b>: <b>{total_income - total_consumption}‚ÇΩ</b>"

    await context.bot.send_message(
        usr.telegram_chat_id,
        end_msg,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="–í –º–µ–Ω—é üç∫",
                callback_data="menu"
            )]
        ])
    )

async def ask_for_history_type(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    await context.bot.send_message(
        usr.telegram_chat_id,
        f"üî© <b>{usr.username}</b>, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Å—Ä–µ–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö <b>dd-mm-yy</b> <b>dd-mm-yy</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="–í –º–µ–Ω—é üç∫",
                callback_data="menu"
            )]
        ])
    )

    return 0

async def show_history(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    table_id = context.user_data.get("active_table_id",'')

    message = list(filter(lambda x: x != " ", update.message.text.lower().strip().split()))
    expression = re.compile("(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(19|20)\d\d")

    if len(message) == 2:
        if expression.match(message[0]) and expression.match(message[0]):
            date_start, date_end = "-".join(reversed(message[0].split("-"))), "-".join(list(reversed(message[1].split("-")[1:])) + [str(int(message[1].split("-")[0]) + 1)])
            
            if Table.objects.filter(id=table_id).exists():
                if Table.objects.get(pk=table_id) in usr.get_tables():
                    users_table = Table.objects.get(pk=table_id)
                    
                    try:
                        end_msg = f"‚è≥<b><u>–ò—Å—Ç–æ—Ä–∏—è</u></b>\n\n<b>üß© –¢–∞–±–ª–∏—Ü–∞:</b> <i>{users_table.name}</i>\n\n<b>üïê –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {date_start}\n<b>üï§ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞:</b> {date_end}\n\n"
                        active_table_operations = Operation.objects.filter(
                            date__range=[date_start, date_end],
                            table=users_table
                        ).all().order_by('-date')
                        
                        total_slice_income, total_slice_consumption = 0, 0
                        for table in usr.get_tables():
                            table_operations = Operation.objects.filter(
                                date__range=[date_start, date_end],
                                table=table
                            ).all().order_by('-date')
                            
                            for operation in table_operations:
                                if operation.type.lower() == "–¥–æ—Ö–æ–¥":
                                    total_slice_income += operation.amount
                                elif operation.type.lower() == "—Ä–∞—Å—Ö–æ–¥":
                                    total_slice_consumption += operation.amount


                        if len(active_table_operations) != 0:
                            active_table_slice_income, active_table_slice_consumption = 0, 0 
                            
                            income_msg = f"üí∏ <b><u>–î–æ—Ö–æ–¥—ã:</u></b>\n\n"
                            consumption_msg = f"ü§¨ <b><u>–†–∞—Å—Ö–æ–¥—ã:</u></b>\n\n"

                            for operation in active_table_operations:
                                 
                                if operation.type.lower() == "–¥–æ—Ö–æ–¥":
                                    active_table_slice_income += operation.amount
                                    income_msg += f"<i>{str(operation.date).split()[0]}</i> - <b>{operation.amount}‚ÇΩ</b> - <b>{operation.description}</b>\n"
                                
                                elif operation.type.lower() == "—Ä–∞—Å—Ö–æ–¥":
                                    active_table_slice_consumption += operation.amount
                                    consumption_msg += f"<i>{str(operation.date).split()[0]}</i> - <b>{operation.amount}‚ÇΩ</b> - <b>{operation.description}</b>\n"
                                
                            end_msg = end_msg + income_msg + "\n" + consumption_msg

                            end_msg += f"\n\nüóø<b><u>–°–≤–æ–¥–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:</u></b>\n\nüîé –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{active_table_slice_income}‚ÇΩ</b>\nüòî –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{active_table_slice_consumption}‚ÇΩ</b>\nüí© <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</b>: <b>{active_table_slice_income - active_table_slice_consumption}‚ÇΩ</b>\n\n"
                            end_msg += f"\nüç∫<b><u>–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º:</u></b>\n\nüîé –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_slice_income}‚ÇΩ</b>\nüòî –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{total_slice_consumption}‚ÇΩ</b>\nüí© <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</b>: <b>{total_slice_income - total_slice_consumption}‚ÇΩ</b>"
                            
                        else:
                            end_msg = f"‚è≥<b><u>–ò—Å—Ç–æ—Ä–∏—è</u></b>\n\n<b>üß© –¢–∞–±–ª–∏—Ü–∞:</b> <i>{users_table.name}</i>\n\n<b>üïê –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {date_start}\n<b>üï§ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞:</b> {date_end}\n\nüòµ‚Äçüí´ –ù–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                        
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            end_msg,
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="–ï—â–µ —Ä–∞–∑ üöÄ",
                                    callback_data="operation_history"
                                )],
                                [InlineKeyboardButton(
                                    text="–í –º–µ–Ω—é üç∫",
                                    callback_data="menu"
                                )]
                            ])
                        )

                    except Exception as e:
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã.\n\n<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="–í –º–µ–Ω—é üç∫",
                                    callback_data="menu"
                                )]
                            ])
                        )
                else:
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å id = {context.user_data.get('active_table_id','')}",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="–í –º–µ–Ω—é üç∫",
                                callback_data="menu"
                            )]
                        ])
                    )

            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="–í –º–µ–Ω—é üç∫",
                            callback_data="menu"
                        )]
                    ])
                )

        else:
            await context.bot.send_message(
            usr.telegram_chat_id,
            f"üëø –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç, –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>dd-mm-yy dd-mm-yy</b></i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )
            
    else:
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üëø –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç, –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>dd-mm-yy dd-mm-yy</b></i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üç∫",
                    callback_data="menu"
                )]
            ])
        )

    return ConversationHandler.END


async def garbage_callback(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)

    await context.bot.send_message(
        usr.telegram_chat_id,
        f"–ú—ã —Ç–∞–∫–æ–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º. –í–æ –≤—Å–µ–º –≤–∏–Ω–æ–≤–∞—Ç–∞ –ê–º–µ—Ä–∏–∫–∞ <b>Z</b> <b>V</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="–í –º–µ–Ω—é üç∫",
                callback_data="menu"
            )]
        ])
    )

    return ConversationHandler.END

def main() -> None:
    """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """

    application = Application.builder().token(os.environ.get("ACCOUNT_BOT_TOKEN")).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(table_analytics, "table_analytics"))

    add_operation_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_operation_type, "add_operation")],
        states={
            0: [CallbackQueryHandler(add_income_operation, "income"), CallbackQueryHandler(add_consumption_operation, "consumption")],
            1: [MessageHandler(filters.TEXT, get_operation_amount)],
            2: [MessageHandler(filters.TEXT, create_operation)]

        },
        fallbacks=[CallbackQueryHandler(start, "menu")]
    )
    application.add_handler(add_operation_conv_handler)

    create_table_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_table_name, "create_table")],
        states={
            0: [MessageHandler(filters.TEXT, create_table)],
        },
        fallbacks=[CallbackQueryHandler(start, "menu")]
    )
    application.add_handler(create_table_conv_handler)

    choose_table_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(list_table, "list_table")],
        states={
            0: [MessageHandler(filters.TEXT, choose_table)],
        },
        fallbacks=[CallbackQueryHandler(start, "menu")]
    )
    application.add_handler(choose_table_conv_handler)
 
    get_history_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_history_type, "operation_history")],
        states={
            0: [MessageHandler(filters.TEXT, show_history)]
        },
        fallbacks=[CallbackQueryHandler(start, "menu")]
    )
    application.add_handler(get_history_conv_handler)

    application.add_handler(CallbackQueryHandler(start, "menu"))
    application.add_handler(MessageHandler(filters.TEXT, garbage_callback))
 
    application.run_polling()


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'

    def handle(self, *args, **kwargs):        
        main()

        
        
        
