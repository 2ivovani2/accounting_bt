from tf_maker.models import *

from asgiref.sync import sync_to_async
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, re, random, io, shutil
from datetime import datetime, timedelta
warnings.filterwarnings("ignore")

from PIL import Image
from tf_maker.generate_tf import TelegraphGenerator

from django.core.management.base import BaseCommand
from django.conf import settings

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, File
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@sync_to_async
def user_get_by_update(update: Update):
    
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        _type_: instance, created
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "Anonymous"
    else:
        username = message.chat.username

    instance, created = TFUser.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )
    
    return instance, created

def check_user_status(function):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    async def wrapper(self, update: Update, context:CallbackContext):   
        if update.message:
            message = update.message
        else:
            message = update.callback_query.message

        if not message.chat.username:
            username = "Anonymous"
        else:
            username = message.chat.username

        usr, _ = TFUser.objects.update_or_create(
            telegram_chat_id = message.chat.id,
            username=username
        )

        if usr.verified_usr:
            return await function(update, context)
            
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚õîÔ∏è <b>{usr.username}</b>, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø üíÖüèΩ",
                        url="https://t.me/i_vovani"
                    )]
                ])
        )
        
    return wrapper
    
class TFBot:
    
    def __init__(self) -> None:
        """"
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ø–∞
        """
        self.application = Application.builder().token(os.environ.get('TF_MAKER_BOT_TOKEN')).build()

    @check_user_status
    async def _start(update: Update, context: CallbackContext) -> None:
        
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

        Returns:
            –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        usr, _ = await user_get_by_update(update)
        
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üòÉ <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, —è –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è <pre>Telegraph</pre> –ø–æ—Å—Ç–æ–≤.\nü§© –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å üç≠",
                    callback_data="start_tf",
                )],
            ])
        )

        return ConversationHandler.END
    
    @check_user_status
    async def _ask_for_user_channel_link(update: Update, context: CallbackContext) -> int:

        """–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            —Å—Ç–µ–π—Ç - 0
        """

        usr, _ = await user_get_by_update(update)

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"ü•∞ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–°–°–´–õ–ö–£</b> –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –∞—Ä—Ö–∏–≤.",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ üçé",
                    callback_data="menu",
                )],
            ])
        )

        return 0

    @check_user_status
    async def _ask_for_preview(update: Update, context: CallbackContext) -> int:

        """–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Å–µ–≥–æ –ø–æ—Å—Ç–∞ -- –ø—Ä–µ–≤—å—é

        Returns:
            —Å—Ç–µ–π—Ç - 1
        """

        usr, _ = await user_get_by_update(update)
        
        context.user_data["user_channel_link"] = update.message.text.strip()

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"ü§© –û—Ç–ª–∏—á–Ω–æ, <b>—Å—Å—ã–ª–∫—É</b> —è —Å–æ—Ö—Ä–∞–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –¥–ª—è –ø—Ä–µ–≤—å—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n\nüëΩ –ò–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É, —Ç–æ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ <b>—Ñ–æ—Ç–æ</b> –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ <b>–ø—Ä–µ–≤—å—é</b>.",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ üçé",
                    callback_data="menu",
                )],
            ])
        )

        return 1

    @check_user_status
    async def _download_preview_and_ask_for_content(update: Update, context: CallbackContext) -> None:

        """–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–º –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ

        Returns:
            —Å—Ç–µ–π—Ç - 2
        """

        usr, _ = await user_get_by_update(update)

        photo_id = update.message.photo[-1].file_id
        context.user_data["active_tf"] = photo_id

        file = await context.bot.get_file(photo_id)
        await file.download_to_drive(f"{photo_id}-preview.jpg")
        
        preview_img = Image.open(f"{photo_id}-preview.jpg")
        os.remove(f"{photo_id}-preview.jpg")

        os.mkdir(f"{settings.IMAGES_BASE_DIR}{photo_id}")
        os.mkdir(f"{settings.IMAGES_BASE_DIR}{photo_id}/content")
        
        preview_img.save(f"{settings.IMAGES_BASE_DIR}{photo_id}/preview.jpg", "JPEG")

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üòà –û—Ç–ª–∏—á–Ω–æ! <b>–ü—Ä–µ–≤—å—é</b> –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞.",
            parse_mode = "HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ üçé",
                    callback_data="menu",
                )],
            ])
        )  

        return 2
    
    @check_user_status
    async def _download_content(update: Update, context: CallbackContext) -> None:

        """–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ(—Å–µ—Ä–≤–µ—Ä)
        """

        usr, _ = await user_get_by_update(update)
        content_id = update.message.photo[-1].file_id

        if context.user_data.get("message_id", None) != None:
            await context.bot.delete_message(
                usr.telegram_chat_id,
                context.user_data["message_id"]
            )

        file = await context.bot.get_file(content_id)
        await file.download_to_drive(f"{content_id}.jpg")
        
        content_img = Image.open(f"{content_id}.jpg")
        os.remove(f"{content_id}.jpg")

        content_img.save(f"{settings.IMAGES_BASE_DIR}{context.user_data['active_tf']}/content/{content_id}.jpg", "JPEG")
        
        message = await context.bot.send_message(
            usr.telegram_chat_id,
            f"ü•µ –§–æ—Ç–æ <b>{content_id}</b> –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Å—é–¥–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <pre>–°–æ–∑–¥–∞—Ç—å Telegraph</pre>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å Telegraph üö®",
                    callback_data="create_tf",
                )],
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ üçé",
                    callback_data="menu",
                )],
            ])
        )  

        context.user_data["message_id"] = message.id
        
    @check_user_status
    async def _create_telegraph(update: Update, context: CallbackContext) -> None:
        """ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞—Ñ-–ø–æ—Å—Ç–∞

        Args:
            update (Update): —á—Ç–æ–± —Å–æ–æ–±—â–µ–Ω—å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å 
            context (CallbackContext): —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å send_message

        Returns:
            _type_: _description_
        """
        usr, _ = await user_get_by_update(update)

        telegraph_generator = TelegraphGenerator(
            access_token="9f18ea439b7f6620fe777e44a58108e4c3fe2090e659e0a3175e41e05445"
        )

        msg_about_starting = await context.bot.send_message(
            usr.telegram_chat_id,
            f"ü•≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ <pre>Telegraph</pre>",
            parse_mode="HTML",
        )  

        try:
            telegraph_link = telegraph_generator._generate_html(
                preview_path=f"{settings.IMAGES_BASE_DIR}{context.user_data['active_tf']}/preview.jpg",
                content_dir=f"{settings.IMAGES_BASE_DIR}{context.user_data['active_tf']}/content/",
                user_channel_link=context.user_data["user_channel_link"],
                username=usr.username
            )

            Telegraph(
                creator=usr,
                link=telegraph_link
            ).save()

            shutil.rmtree(f"{settings.IMAGES_BASE_DIR}{context.user_data['active_tf']}", ignore_errors=True)
        
        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§¨ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è <pre>Telegraph</pre> - <i>{e}</i>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚òéÔ∏è",
                        url="https://t.me/i_vovani"
                    )]
                ])
            )  

        await context.bot.delete_message(
            usr.telegram_chat_id,
            msg_about_starting.id
        )

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"ü§© <pre>Telegraph</pre> —Å–æ–∑–¥–∞–Ω.\nüîó <b>–°—Å—ã–ª–∫–∞:</b> {telegraph_link}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –º–µ–Ω—é üçé",
                    callback_data="menu",
                )],
            ])
        )  
        return ConversationHandler.END

    def register_handlers(self) -> Application: 
        """
            –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """
        self.application.add_handler(CommandHandler("start", self._start))
        self.application.add_handler(ConversationHandler(
                entry_points=[CommandHandler("create_tf", self._ask_for_user_channel_link), CallbackQueryHandler(self._ask_for_user_channel_link, "start_tf")],
                states={
                    0: [MessageHandler(filters.TEXT, self._ask_for_preview)],
                    1: [MessageHandler(filters.PHOTO, self._download_preview_and_ask_for_content)],
                    2: [MessageHandler(filters.PHOTO, self._download_content)],
                    
                },
                fallbacks=[CommandHandler("start", self._start), CallbackQueryHandler(self._create_telegraph, "create_tf"), CallbackQueryHandler(self._start, "menu")]
            )
        )

        return self.application

class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ TF MAKER BOT'

    def handle(self, *args, **kwargs):        
        main_class_instance = TFBot()
        application = main_class_instance.register_handlers()
        
        application.add_handler(CallbackQueryHandler(main_class_instance._start, "menu"))
        application.run_polling()