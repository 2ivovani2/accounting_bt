from .utils.imports import *
from .utils.helpers import *

class ProcessorsBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ProcessorsBot."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞."""
        self.application: Application = (
            ApplicationBuilder()
            .token(os.environ.get('PROCESSORS_BOT_TOKEN'))
            .build()
        )

    async def _start(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –≤–æ–∑–≤—Ä–∞—â–∞—è ConversationHandler.END.
        """
        usr, created = await user_get_by_update(update)

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
        except Exception:
            pass

        if not usr.verified_usr:
            message = (
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "
                "–∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="ü§òüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data="create_apply",
                )]
            ])
            await context.bot.send_message(
                usr.telegram_chat_id,
                message,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            if not usr.is_superuser:
                if "usdt_price" in context.bot_data:
                    course = context.bot_data["usdt_price"]
                else:
                    try:
                        url = "https://api.binance.com/api/v3/ticker/price"
                        params = {"symbol": "USDTRUB"}
                        response = requests.get(url, params=params)
                        ticker_info = response.json()

                        if 'price' in ticker_info:
                            course = (
                                round(float(ticker_info['price']), 2)
                                + float(os.environ.get("NADBAVKA", 0))
                            )
                            context.bot_data["usdt_price"] = course
                        else:
                            message = (
                                "‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã "
                                "<b>USDT/RUB</b>.\n\n"
                                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                            )
                            reply_markup = InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="üíé –í –º–µ–Ω—é",
                                    callback_data="menu",
                                )],
                                [InlineKeyboardButton(
                                    text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                    url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                                )],
                            ])
                            await context.bot.send_message(
                                usr.telegram_chat_id,
                                message,
                                parse_mode="HTML",
                                reply_markup=reply_markup
                            )
                            return ConversationHandler.END
                    except Exception as e:
                        message = (
                            "‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã "
                            "<b>USDT/RUB</b>.\n\n"
                            f"–û—à–∏–±–∫–∞: <i>{e}</i>"
                        )
                        reply_markup = InlineKeyboardMarkup([
                            [InlineKeyboardButton(
                                text="üíé –í –º–µ–Ω—é",
                                callback_data="menu",
                            )],
                            [InlineKeyboardButton(
                                text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                url=f"https://t.me/{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                            )],
                        ])
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            message,
                            parse_mode="HTML",
                            reply_markup=reply_markup
                        )
                        return ConversationHandler.END

                message = (
                    f"<b>‚íæ <u>ID –ø—Ä–æ—Ñ–∏–ª—è</u></b> - {usr.telegram_chat_id}\n\n"
                    f"¬∑ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: "
                    f"{'<b>–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ</b>' if usr.is_ready_to_get_money else '<b>–ù–µ –∞–∫—Ç–∏–≤–µ–Ω üìõ</b>'}\n\n"
                    f"¬∑ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{usr.balance}‚ÇΩ</b>\n"
                    f"¬∑ –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: <b>{usr.comission}%</b>\n"
                    f"¬∑ –ö—É—Ä—Å USDT/RUB: <b>{course}‚ÇΩ</b>\n\n"
                    f"<b>–í–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö –Ω–µ–ø–æ–ª–∞–¥–∫–∏ ‚§µÔ∏è</b> "
                    f"@{os.environ.get('ADMIN_TO_APPLY_USERNAME')}"
                )
                reply_markup = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            text="üí¨ FAQ",
                            url=os.environ.get("FAQ_LINK")
                        ),
                        InlineKeyboardButton(
                            text="‚≠êÔ∏è –í—ã–≤–æ–¥",
                            callback_data="get_withdraw"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="üíµ –†–µ–∫–≤–∏–∑–∏—Ç—ã",
                            callback_data="reks_profile"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                            callback_data="insurance_deposit"
                        ),
                    ] if not usr.is_ready_to_get_money_first else [],
                ])
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            else:
                message = f"ü§© <b>{usr.username}</b>, –ø—Ä–∏–≤–µ—Ç–∏–∫!"
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å üí≤",
                        callback_data="set_course",
                    )],
                    [InlineKeyboardButton(
                        text="–ê–¥–º–∏–Ω–∫–∞ üëÄ",
                        web_app=WebAppInfo(url=f"{os.environ.get('DOMAIN_NAME')}/admin")
                    )]
                ])
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )

        return ConversationHandler.END

    @check_user_status
    async def _ask_about_partner_withdraw(
        update: Update, context: CallbackContext
    ) -> int:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –æ–∂–∏–¥–∞—é—â–∏–π –≤–≤–æ–¥ –∫—É—Ä—Å–∞.
        """
        usr, _ = await user_get_by_update(update)
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üçÄ –í—ã–≤–æ–¥—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤—ã–≤–æ–¥, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –Ω–∞—á–∞–ª–æ üî∞",
                    callback_data="menu",
                )],
            ])
        )


    @check_user_status
    async def _ask_for_course_from_admin(
        update: Update, context: CallbackContext
    ) -> int:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –æ–∂–∏–¥–∞—é—â–∏–π –≤–≤–æ–¥ –∫—É—Ä—Å–∞.
        """
        usr, _ = await user_get_by_update(update)
        message = "üòÄ –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–∏–º."
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text="–í –Ω–∞—á–∞–ª–æ üî∞",
                callback_data="menu",
            )],
        ])
        await context.bot.send_message(
            usr.telegram_chat_id,
            message,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

        return 0

    @check_user_status
    async def _set_course(
        update: Update, context: CallbackContext
    ) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: ConversationHandler.END –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        """
        usr, _ = await user_get_by_update(update)
        try:
            course = round(float(update.message.text.strip()), 2)
            context.bot_data["usdt_price"] = course

            message = f"ü§© –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫—É—Ä—Å <b>{course}</b>"
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –Ω–∞—á–∞–ª–æ üî∞",
                    callback_data="menu",
                )],
            ])
            await context.bot.send_message(
                usr.telegram_chat_id,
                message,
                parse_mode="HTML",
                reply_markup=reply_markup
            )

        except Exception as e:
            message = f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>"
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–í –Ω–∞—á–∞–ª–æ üî∞",
                    callback_data="menu",
                )],
            ])
            await context.bot.send_message(
                usr.telegram_chat_id,
                message,
                parse_mode="HTML",
                reply_markup=reply_markup
            )

        return ConversationHandler.END

    def register_handlers(self) -> Application:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

        Returns:
            Application: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
        """
        self.application.add_handler(ConversationHandler(
            entry_points=[
                CallbackQueryHandler(
                    self._ask_for_course_from_admin, pattern="set_course"
                )
            ],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_course)],
            },
            fallbacks=[
                CallbackQueryHandler(self._start, pattern="menu"),
                CommandHandler("start", self._start)
            ],
            conversation_timeout=300
        ))

        return self.application

    def set_last_handlers(self, application: Application) -> Application:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

        Args:
            application (Application): –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Returns:
            Application: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
        """

        application.add_handler(CommandHandler("start", self._start))
        application.add_handler(CallbackQueryHandler(self._start, pattern="menu"))

        application.add_handler(CallbackQueryHandler(self._ask_about_partner_withdraw, "get_withdraw"))

        from django.conf import settings
        settings.PARTNERS_APPLICATION = application
        settings.PARTNERS_BOT_INSTANCE = application.bot

        return application


