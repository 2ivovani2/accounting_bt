from .imports import *

@sync_to_async
def user_get_by_update(update: Update):
    
    """ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        _type_: instance, created
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "–ê–Ω–æ–Ω–∏–º"
    else:
        username = message.chat.username

    instance, created = Processor.objects.update_or_create(
        username = username,
        telegram_chat_id = message.chat.id,
    )
    
    return instance, created

def check_user_status(function):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    async def wrapper(self, update: Update, context:CallbackContext):   
        if update.message:
            message = update.message
        else:
            message = update.callback_query.message

        if not message.chat.username:
            username = "–°–ø–∏–¥–æ–∑–Ω–∞—è –∫–æ–∑—è–≤–∫–∞"
        else:
            username = message.chat.username

        usr, _ = Processor.objects.update_or_create(
            telegram_chat_id = message.chat.id,
            username=username
        )

        if usr.is_superuser:
            return await function(update, context)

        if usr.verified_usr:
            if usr.is_ready_to_get_money_first:
                return await function(update, context)
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üòî –£–≤–∞–∂–∞–µ–º—ã–π <b>{usr.username}</b>, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ - <b>10.000‚ÇΩ</b>.\n<b>‚ÄºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ</b>, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–ª–∏–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞, –ø–æ–∫–∞ –Ω–µ –≤—ã–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å.\n–î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã, —Å–æ–≤–µ—Ç—É–µ–º –≤–Ω–µ—Å—Ç–∏ —Å—É–º–º—É –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ <b>1-3</b> –≤—ã–≤–æ–¥–æ–≤ –≤ –¥–µ–Ω—å.\n\n<blockquote>–ö—É—Ä—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –≤ ByBit, —Ä–∞–∑–¥–µ–ª SBP/SBER/RAIFFEISENüí∏</blockquote>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üí∂ –°—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç",
                            callback_data="insurance_deposit",
                        )]
                    ])
                )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü§© <b>{usr.username}</b>, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="ü§òüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                        callback_data="create_apply",
                    )]
                ])
            )
        
    return wrapper
