import logging, os
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
from .imports import *
from applier.models import ApplyUser

async def check_cheque_status(client_bot, partner_bot, client, merchant, cheque, course):
    logging.info(f"ü§© –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ {cheque.cheque_id} –¥–ª—è {cheque.cheque_owner.username}")
    
    if not cheque.is_applied and not cheque.is_denied:
        cheque.is_applied = True
        cheque.save()

        merchant.balance = round(float(merchant.balance), 2) + cheque.cheque_sum * merchant.comission * 0.01
        merchant.insurnace_deposit -= cheque.cheque_sum        
        merchant.save()

        if merchant.insurance_deposit <= 0:
            client.reks = None
            client.save()

            merchant.is_ready_to_get_money = False
            merchant.save()

            await client_bot.send_message(
                client.telegram_chat_id,
                f"üÜò –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–†–µ–≤–∏–∑–∏—Ç–æ–≤</b>, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            text="üí∏ –†–µ–∫–≤–∏–∑–∏—Ç—ã", 
                            callback_data="reks"
                        ),
                    ],
                ])
            )
            

            await partner_bot.send_message(
                merchant.telegram_chat_id,
                f"üòî –í–∞—à –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ <b>{round((merchant.amount_to_accept - merchant.insurance_deposit) / course, 2)}USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å <pre>{os.environ.get('ACCEPT_INSURANCE_PAYMENTS_ADDRESS','TJbfLnybJxXKoPVrdFfSAGkEoAr1g4DmpW')}</pre>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )],
                    [InlineKeyboardButton(
                        text="üå™Ô∏è –Ø –æ–ø–ª–∞—Ç–∏–ª",
                        callback_data="reset_insurance_apply",
                    )],
                ])
            )

        await partner_bot.send_message(
            merchant.telegram_chat_id,
            f"ü™õ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–µ–∫ <b>{cheque.cheque_id}</b> –æ—Ç <b>{cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(cheque.cheque_date).split('.')[:1][0]}</b>.\n\n–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.",
            parse_mode="HTML",
        )

        await client_bot.send_message(
            client.telegram_chat_id,
            f"‚úÖ –ß–µ–∫ <b>{cheque.cheque_id}</b> –ø—Ä–∏–Ω—è—Ç!\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{cheque.cheque_sum}‚ÇΩ</b>\n‚Ä¢ –î–∞—Ç–∞ —á–µ–∫–∞ - <b>{str(cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b>\n‚Ä¢ –í–∞—à–∞ –¥–æ–ª—è - <b>{cheque.cheque_sum - cheque.income}‚ÇΩ</b>\n‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - <b>{client.balance}‚ÇΩ</b>",
            parse_mode="HTML",
            reply_markup = None
        )
    