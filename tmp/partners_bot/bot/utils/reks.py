from ..processors_bot import ProcessorsBot
from .imports import *
from .helpers import *

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class ReksModule(ProcessorsBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app
    
    async def _reks_menu(self, update: Update, context: CallbackContext) -> int:
        """
            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        usr, _ = await user_get_by_update(update)
        
        actual_reks = Reks.objects.filter(reks_owner=usr, is_archived=False).all()
        msg = ""
        if len(actual_reks) == 0:
            msg = "üòî –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤."
        else:
            msg = "ü´µ –í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            for r in actual_reks:
                msg += f"<pre>{r.card_number} / {r.sbp_phone_number} / {r.card_owner_name} / {r.bank_name}</pre>\n\n"

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏.\n\n{msg}",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üçÄ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                    callback_data="add_reks",
                )],
                [InlineKeyboardButton(
                    text="üëø –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                    callback_data="delete_reks",
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="menu",
                )]
            ])
        )

    async def _ask_user_about_reks(self, update: Update, context: CallbackContext) -> int:
        """
            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        usr, _ = await user_get_by_update(update)
        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b> ‚¨áÔ∏è\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã / –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü / –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã/ –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n\n<b>–ü—Ä–∏–º–µ—Ä:</b> 2200 1529 4228 9334 / 7-917-598-05-79 / –ò–í–ê–ù–û–í –ò–í–ê–ù –ò–í–ê–ù–û–í–ò–ß / –°–±–µ—Ä\n\n<blockquote>‚ÄºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤–≤–æ–¥–∞, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> —Ä–∞–∑–¥–µ–ª—è—Ç—å –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–ª–µ—à–æ–º - /</blockquote>\n<blockquote>–í —Å–ª—É—á–∞–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å—É–º–º–∞ –±—É–¥–µ—Ç –≤—ã—á—Ç–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞.</blockquote>",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="reks_profile",
                )]
            ])
        )
        return 0
        
    async def _reks_prepare_and_setting_to_user(self, update: Update, context: CallbackContext) -> int:
        """
            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """
        usr, _ = await user_get_by_update(update)
        reks = update.message.text.strip()

        reks = list(map(lambda x: x.strip(), reks.split("/")))
        if len(reks) != 4:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üò° –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é —Ñ–æ—Ä–º–∞—Ç—É. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ –ø—Ä–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="reks_profile",
                    )]
                ])
            )
            return ConversationHandler.END
        else:
            card_number, phone_number, name, bank_name = reks
            if len(card_number.replace(" ", "")) != 16:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üë∫ –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="reks_profile",
                        )]
                    ])
                )
                return ConversationHandler.END
            
            elif Reks.objects.filter(card_number=card_number).exists():
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üôÅ –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="reks_profile",
                        )]
                    ])
                )
                return ConversationHandler.END
            
            else:
                card_number = re.sub(r"(\d{4})(?=\d)", r"\1 ", card_number)

            clean_number = re.sub(r"[ \-\(\)]", "", phone_number)    
            pattern = r"^(\+7|7|8)(\d{10})$"
            match = re.match(pattern, clean_number)
            
            if match:
                formatted_number = "+7 ({}) {}-{}-{}".format(
                    match.group(2)[:3],
                    match.group(2)[3:6],
                    match.group(2)[6:8],
                    match.group(2)[8:]
                )
                phone_number = formatted_number
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üíÄ –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="reks_profile",
                        )]
                    ])
                )
                return ConversationHandler.END

            try:
                rek = Reks(
                    reks_owner=usr,
                    card_number=card_number,
                    sbp_phone_number=phone_number,
                    card_owner_name=name.upper(),
                    bank_name=bank_name.upper()
                )
                rek.save()

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n<pre>{rek.card_number} / {rek.sbp_phone_number} / {rek.card_owner_name} / {rek.bank_name}</pre>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data=f"reks_profile",
                        )], 
                    ])
                )

            except Exception as e:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –Ω–∞—á–∞–ª–æ",
                            callback_data=f"menu",
                        )], 
                    ])
                )

        return ConversationHandler.END
    
    def reg_handlers(self):
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._ask_user_about_reks, "add_reks")],
            states={
                0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._reks_prepare_and_setting_to_user)],
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CallbackQueryHandler(self._reks_menu, "reks_profile"),CommandHandler("start", self._start)],
            conversation_timeout=600
        ))

        self.application.add_handler(CallbackQueryHandler(self._reks_menu, "reks_profile"))
