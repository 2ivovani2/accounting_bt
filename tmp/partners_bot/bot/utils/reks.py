from ..processors_bot import ProcessorsBot
from .imports import *
from .helpers import *

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class ReksModule(ProcessorsBot):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self, app: Application) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è ReksModule.

        Args:
            app (Application): –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram.
        """
        super().__init__()
        self.application: Application = app

    @check_user_status
    async def _reks_menu(update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        """
        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
        except Exception:
            pass

        usr, _ = await user_get_by_update(update)
        actual_reks = Reks.objects.filter(reks_owner=usr, is_archived=False).all()

        if not actual_reks:
            msg = "üòî –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤."
        else:
            msg = "ü´µ –í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            for r in actual_reks:
                msg += (
                    f"<pre>{r.card_number} / {r.sbp_phone_number} / "
                    f"{r.card_owner_name} / {r.bank_name}</pre>\n\n"
                )

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏.\n\n{msg}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üçÄ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                    callback_data="add_reks",
                )],
                [InlineKeyboardButton(
                    text="üëø –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                    callback_data="delete_reks",
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="menu",
                )]
            ])
        )

    @check_user_status
    async def _ask_user_about_reks(update: Update, context: CallbackContext) -> int:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –æ–∂–∏–¥–∞—é—â–µ–µ –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.
        """
        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
        except Exception:
            pass

        usr, _ = await user_get_by_update(update)
        message = (
            "üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b> ‚¨áÔ∏è\n"
            "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã / –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü / "
            "–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã / –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> 2200 1529 4228 9334 / 7-917-598-05-79 / "
            "–ò–í–ê–ù–û–í –ò–í–ê–ù –ò–í–ê–ù–û–í–ò–ß / –°–±–µ—Ä\n\n"
            "<blockquote>‚ÄºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤–≤–æ–¥–∞, "
            "–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> —Ä–∞–∑–¥–µ–ª—è—Ç—å –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–ª–µ—à–æ–º - /</blockquote>\n"
            "<blockquote>–í —Å–ª—É—á–∞–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å—É–º–º–∞ –±—É–¥–µ—Ç "
            "–≤—ã—á—Ç–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞.</blockquote>"
        )
        await context.bot.send_message(
            usr.telegram_chat_id,
            message,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="menu",
                )]
            ])
        )
        return 0

    @check_user_status
    async def _reks_prepare_and_setting_to_user(
         update: Update, context: CallbackContext
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: ConversationHandler.END –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        """
        usr, _ = await user_get_by_update(update)
        reks_input = update.message.text.strip()

        reks_list = [x.strip() for x in reks_input.split("/")]
        if len(reks_list) != 4:
            message = (
                "üò° –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É. "
                "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await context.bot.send_message(
                usr.telegram_chat_id,
                message,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )]
                ])
            )
            return ConversationHandler.END
        else:
            card_number, phone_number, name, bank_name = reks_list
            if len(card_number.replace(" ", "")) != 16:
                message = (
                    "üë∫ –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )]
                    ])
                )
                return ConversationHandler.END

            elif Reks.objects.filter(card_number=card_number).exists():
                message = "üôÅ –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ."
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )]
                    ])
                )
                return ConversationHandler.END

            else:
                card_number = re.sub(r"(\d{4})(?=\d)", r"\1 ", card_number)

            clean_number = re.sub(r"[ \-\(\)]", "", phone_number)
            pattern = r"^(\+7|7|8)(\d{10})$"
            match = re.match(pattern, clean_number)

            if match:
                formatted_number = "+7 ({}) {}-{}-{}".format(
                    match.group(2)[:3],
                    match.group(2)[3:6],
                    match.group(2)[6:8],
                    match.group(2)[8:]
                )
                phone_number = formatted_number
            else:
                message = (
                    "üíÄ –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )]
                    ])
                )
                return ConversationHandler.END

            try:
                rek = Reks.objects.create(
                    reks_owner=usr,
                    card_number=card_number,
                    sbp_phone_number=phone_number,
                    card_owner_name=name.upper(),
                    bank_name=bank_name.upper()
                )

                message = (
                    "‚úÖ –ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
                    f"<pre>{rek.card_number} / {rek.sbp_phone_number} / "
                    f"{rek.card_owner_name} / {rek.bank_name}</pre>"
                )
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )],
                    ])
                )

            except Exception as e:
                message = f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>"
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –Ω–∞—á–∞–ª–æ",
                            callback_data="menu",
                        )],
                    ])
                )

        return ConversationHandler.END

    @check_user_status
    async def _ask_user_card_number_to_delete_reks(
        update: Update, context: CallbackContext
    ) -> int:
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –æ–∂–∏–¥–∞—é—â–µ–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã.
        """
        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
        except Exception:
            pass

        usr, _ = await user_get_by_update(update)
        message = (
            "ü§î –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚§µÔ∏è\n"
            "<pre>1111 2222 3333 4444</pre>"
        )
        await context.bot.send_message(
            usr.telegram_chat_id,
            message,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="menu",
                )],
            ])
        )

        return 0

    @check_user_status
    async def _delete_user_reks(update: Update, context: CallbackContext) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

        Returns:
            int: ConversationHandler.END –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        """
        usr, _ = await user_get_by_update(update)
        card_number_input = update.message.text.strip().replace(" ", "")

        if len(card_number_input) == 16:
            card_number = re.sub(r"(\d{4})(?=\d)", r"\1 ", card_number_input)
            rek = Reks.objects.filter(
                card_number=card_number,
                reks_owner=usr,
                is_archived=False
            ).first()
            if rek:
                rek.is_archived = True
                rek.save()

                message = (
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
                    f"<pre>{rek.card_number} / {rek.sbp_phone_number} / "
                    f"{rek.card_owner_name} / {rek.bank_name}</pre>"
                )
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )],
                    ])
                )
            else:
                message = (
                    "üôâ –¢–∞–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏–±–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, "
                    "–ª–∏–±–æ –≤—ã –∏—Ö —É–∂–µ —É–¥–∞–ª–∏–ª–∏."
                )
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="menu",
                        )],
                    ])
                )
        else:
            message = (
                "üå™Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ "
                "–Ω–∞ –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ ‚§µÔ∏è\n<pre>1111 2222 3333 4444</pre>"
            )
            await context.bot.send_message(
                usr.telegram_chat_id,
                message,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )],
                ])
            )

        return ConversationHandler.END

    def reg_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        self.application.add_handler(ConversationHandler(
            entry_points=[
                CallbackQueryHandler(
                    self._ask_user_card_number_to_delete_reks, pattern="delete_reks"
                )
            ],
            states={
                0: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self._delete_user_reks
                    )
                ],
            },
            fallbacks=[
                CallbackQueryHandler(self._start, pattern="menu"),
                CommandHandler("start", self._start)
            ],
            conversation_timeout=300
        ))

        self.application.add_handler(ConversationHandler(
            entry_points=[
                CallbackQueryHandler(
                    self._ask_user_about_reks, pattern="add_reks"
                )
            ],
            states={
                0: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self._reks_prepare_and_setting_to_user
                    )
                ],
            },
            fallbacks=[
                CallbackQueryHandler(self._start, pattern="menu"),
                CommandHandler("start", self._start)
            ],
            conversation_timeout=600
        ))

        self.application.add_handler(
            CallbackQueryHandler(self._reks_menu, pattern="reks_profile")
        )