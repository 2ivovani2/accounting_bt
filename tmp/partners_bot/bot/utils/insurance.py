from ..processors_bot import ProcessorsBot
from .imports import *
from .helpers import *

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class Insurance(ProcessorsBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app
    
    async def _info_user_about_deposit(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        usr, _ = await user_get_by_update(update)
        if usr.has_active_paying_insurance_apply:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚ÄºÔ∏è –£–≤–∞–∂–∞–µ–º—ã–π <b>{usr.username}</b>, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞.<blockquote>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</blockquote>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )]
                ])
            )
        else:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"ü•∂ –£–≤–∞–∂–∞–µ–º—ã–π <b>{usr.username}</b>, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç.\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ - <b>10.000‚ÇΩ</b>.\n\n<blockquote>‚ÄºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–ª–∏–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞, –ø–æ–∫–∞ –Ω–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n\n–î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã, —Å–æ–≤–µ—Ç—É–µ–º –≤–Ω–µ—Å—Ç–∏ —Å—É–º–º—É –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ <b>1-3</b> –≤—ã–≤–æ–¥–æ–≤ –≤ –¥–µ–Ω—å.\n\n–ö—É—Ä—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –≤ ByBit, —Ä–∞–∑–¥–µ–ª SBP/SBER/RAIFFEISENüí∏</blockquote>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üí∏ –í–Ω–µ—Å—Ç–∏",
                        callback_data="pay_insurance_info",
                    )],
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )]
                ])
            )
            
            return 0
        return ConversationHandler.END

    async def _give_user_reks_to_pay_insurance(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        usr, _ = await user_get_by_update(update)
        
        try:
            deposit = InsurancePayment(
                owner=usr,
                payment_sum_rub=round(usr.amount_to_accept * 1.1, 2),
                payment_sum_usdt=round(usr.amount_to_accept * 1.1 / context.bot_data["usdt_price"], 2),
            )
            deposit.save()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"–í–Ω–µ—Å–∏—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º‚§µÔ∏è\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ - <b>{deposit.payment_sum_rub}‚ÇΩ / {deposit.payment_sum_usdt}USDT</b>\n\nUSDT TRC20 - <pre>{os.environ.get('ACCEPT_INSURANCE_PAYMENTS_ADDRESS')}</pre>\n\n<b>RUB/UAH/KZT</b> - @{os.environ.get('PROCESSORS_ADMIN_USERNAME')}",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="‚úÖ –û–ø–ª–∞—Ç–∏–ª",
                        callback_data=f"user_paid_{deposit.id}",
                    )],
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="menu",
                    )]
                ])
            )
        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –í –Ω–∞—á–∞–ª–æ",
                        callback_data=f"menu",
                    )], 
                ])
            )

        return 1

    async def _send_insurance_apply_to_admin(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        usr, _ = await user_get_by_update(update)
        admin = Processor.objects.filter(username=os.environ.get("PROCESSORS_ADMIN_USERNAME")).first()
        deposit_id = query.data.split("_")[-1]
        deposit = InsurancePayment.objects.get(pk=deposit_id)    

        try:
            usr.has_active_paying_insurance_apply = True
            usr.save()

            msg = await context.bot.send_message(
                admin.telegram_chat_id,
                f"‚≠êÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç <b>{deposit.owner.username}</b>:\n\n¬∑ –°—É–º–º–∞ - <b>{deposit.payment_sum_rub}‚ÇΩ / {deposit.payment_sum_usdt}USDT</b>\n¬∑ –ö—É—Ä—Å - <b>{context.bot_data['usdt_price']}</b>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"insurance_payment_accept_{deposit_id}",
                    )],
                    [InlineKeyboardButton(
                        text="‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"insurance_payment_decline_{deposit_id}",
                    )], 
                ])
            )

            await msg.pin()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n\n<blockquote>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏–º—å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3-6 —á–∞—Å–æ–≤.</blockquote>",
                parse_mode="HTML",                    
            )

        except Exception as e:
            usr.has_active_paying_insurance_apply = False
            usr.save()

            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                parse_mode="HTML",
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text="üîô –í –Ω–∞—á–∞–ª–æ",
                        callback_data=f"menu",
                    )], 
                ])
            )
        return ConversationHandler.END

    async def _apply_insurance_by_admin(self, update: Update, context: CallbackContext) -> int:
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

            Returns:
                –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—É—Ç–µ–º –≤—ã–∑–æ–≤–∞ ConversationHandler.END
        """

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        admin, _ = await user_get_by_update(update)
        splitted_data = query.data.split("_")
        deposit_id, status = splitted_data[-1], splitted_data[-2]
        deposit = InsurancePayment.objects.get(pk=deposit_id)
        usr = deposit.owner  

        if status == "accept":
            try:
                usr.insurance_deposit = round(usr.amount_to_accept / 1.10, 2)
                usr.is_ready_to_get_money = True
                usr.has_active_paying_insurance_apply = False

                deposit.is_applied = True
                
                usr.save()
                deposit.save()

                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É <b>{deposit.payment_sum_rub}‚ÇΩ / {deposit.payment_sum_usdt}USDT</b>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚úÖ –í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É <b>{deposit.payment_sum_rub}‚ÇΩ / {deposit.payment_sum_usdt}USDT</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                    ])
                )

            except Exception as e:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –Ω–∞—á–∞–ª–æ",
                            callback_data=f"menu",
                        )], 
                    ])
                )

        else:
            try:
                usr.has_active_paying_insurance_apply = False
                usr.save()

                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"‚õîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{usr.username}</b> –Ω–∞ —Å—É–º–º—É {deposit.payment_sum_rub}‚ÇΩ / {deposit.payment_sum_usdt}USDT.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                    ])
                )

                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚õîÔ∏è –í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É {deposit.payment_sum_rub}‚ÇΩ / {deposit.payment_sum_usdt}USDT –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n<blockquote>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.</blockquote>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                            url=f"https://t.me/{os.environ.get('PROCESSORS_ADMIN_USERNAME')}",
                        )], 
                        [InlineKeyboardButton(
                            text="üîô –í –º–µ–Ω—é",
                            callback_data=f"menu",
                        )], 
                    ])
                )
            except Exception as e:
                await context.bot.send_message(
                    admin.telegram_chat_id,
                    f"üÜò –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.\n\n<i>{e}</i>",
                    parse_mode="HTML",
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üîô –í –Ω–∞—á–∞–ª–æ",
                            callback_data=f"menu",
                        )], 
                    ])
                )

    def reg_handlers(self):
        self.application.add_handler(ConversationHandler(
            entry_points=[CallbackQueryHandler(self._info_user_about_deposit, "insurance_deposit")],
            states={
                0: [CallbackQueryHandler(self._give_user_reks_to_pay_insurance, "pay_insurance_info")],
                1: [CallbackQueryHandler(self._send_insurance_apply_to_admin, "^user_paid_")],
                
            },
            fallbacks=[CallbackQueryHandler(self._start, "menu"), CommandHandler("start", self._start)],
            conversation_timeout=600
        ))

        self.application.add_handler(CallbackQueryHandler(self._apply_insurance_by_admin, "^insurance_payment_"))
