from ..processors_bot import ProcessorsBot
from .imports import *
from .helpers import *
from applier.models import *
from django.conf import settings
from applier.tasks import initialize_bot

import logging 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class ChequeWork(ProcessorsBot):
    def __init__(self, app) -> None:
        super().__init__()
        self.application = app
    
    @staticmethod
    async def get_client_bot_instance():
        if settings.CLIENT_BOT_INSTANCE is None:
            await initialize_bot()
        return settings.CLIENT_BOT_INSTANCE

    async def _send_insurance_acception(self, update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        client_bot = await ChequeWork.get_client_bot_instance()
        admin = Processor.objects.filter(username=os.environ.get("PROCESSORS_ADMIN_USERNAME")).first()

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                usdt_sum, user_who_send = query.data.split("_")[-1], Processor.objects.filter(telegram_chat_id=int(query.data.split("_")[-2])).first()
        except:
            pass

        await context.bot.send_message(
            admin.telegram_chat_id,
            f"üí¨ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—É–º–º—É <b>{usdt_sum}USDT</b> –æ—Ç <b>{user_who_send.username}</b>.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data=f"working_accept_{user_who_send.telegram_chat_id}",
                )],
                [InlineKeyboardButton(
                    text="‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"working_decline_{user_who_send.telegram_chat_id}",
                )],
            ])
        )

        await context.bot.send_message(
            usr.telegram_chat_id,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=None
        )

    @check_user_status
    async def _apply_insurance_appliment_by_admin(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        admin, _ = await user_get_by_update(update)
        client_bot = await ChequeWork.get_client_bot_instance()
        
        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                status, user_who_wants_to_work = query.data.split("_")[-2], Processor.objects.filter(telegram_chat_id=int(query.data.split("_")[-1])).first()
        except:
            pass
        
        if status == "accept":
            user_who_wants_to_work.is_ready_to_get_money = True
            user_who_wants_to_work.insurance_deposit = round(user_who_wants_to_work.amount_to_accept / 1.10, 2)
            user_who_wants_to_work.save()

            await context.bot.send_message(
                user_who_wants_to_work.telegram_chat_id,
                f"üöÄ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –¥–∞–ª—å—à–µ.",
                parse_mode="HTML",
                reply_markup=None
            )

            await context.bot.send_message(
                admin.telegram_chat_id,
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç <b>{user_who_wants_to_work.username}</b>\n\n<blockquote><b>–í–ê–ñ–ù–û!!</b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.</blockquote>",
                parse_mode="HTML",
                reply_markup=None
            )

        else:
            await context.bot.send_message(
                user_who_wants_to_work.telegram_chat_id,
                f"üò¢ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
                parse_mode="HTML",
                reply_markup=None
            )

            await context.bot.send_message(
                admin.telegram_chat_id,
                f"‚õîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç <b>{user_who_wants_to_work.username}</b>\n\n<blockquote><b>–í–ê–ñ–ù–û!!</b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.</blockquote>",
                parse_mode="HTML",
                reply_markup=None
            )
        

    @check_user_status
    async def _new_cheque_acception(update: Update, context: CallbackContext) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è xtrf

        Args:
            Update (_type_): –æ–±—ä–µ–∫—Ç update
            context (CallbackContext): –æ–±—ä–µ–∫—Ç context
        """ 
        
        usr, _ = await user_get_by_update(update)
        client_bot = await ChequeWork.get_client_bot_instance()

        try:
            query = update.callback_query
            if query:
                await query.answer()
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        except:
            pass

        try:
            new_cheque = Cheque.objects.filter(cheque_id=query.data.split("_")[-1]).first()
            
            if not new_cheque.is_applied and not new_cheque.is_denied:
                amount, status = new_cheque.cheque_sum, query.data.split("_")[-2]
                user_to_update = new_cheque.cheque_owner

                if status == "true":
                    usr.insurance_deposit -= new_cheque.cheque_sum    
                    usr.save()

                    if usr.insurance_deposit <= 0:
                        user_to_update.reks = None
                        user_to_update.save()

                        usr.is_ready_to_get_money = False
                        usr.save()

                        await client_bot.send_message(
                            user_to_update.telegram_chat_id,
                            f"üÜò –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–†–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>.\n\n<blockquote>–ï—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</blockquote>",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [
                                    InlineKeyboardButton(
                                        text="üí∏ –†–µ–∫–≤–∏–∑–∏—Ç—ã", 
                                        callback_data="reks"
                                    ),
                                ],
                            ])
                        )
                        
                        await context.bot.send_message(
                            usr.telegram_chat_id,
                            f"üòî –í–∞—à –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ <b>{round((usr.amount_to_accept - usr.insurance_deposit) / context.bot_data.get('usdt_course', 100.0), 2)}USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å <pre>{os.environ.get('ACCEPT_INSURANCE_PAYMENTS_ADDRESS','TJbfLnybJxXKoPVrdFfSAGkEoAr1g4DmpW')}</pre>\n\n<blockquote>–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É, —Ç–æ–≥–¥–∞ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–±—Ä–∞—Ç—å —Å–µ–±–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç—É.</blockquote>",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton(
                                    text="üîô –ù–∞–∑–∞–¥",
                                    callback_data="menu",
                                )],
                                [InlineKeyboardButton(
                                    text="üå™Ô∏è –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                    callback_data=f"reset_insurance_apply_{usr.telegram_chat_id}_{round((usr.amount_to_accept - usr.insurance_deposit) / context.bot_data.get('usdt_course', 100.0), 2)}",
                                )],
                            ])
                        )
                    
                    
                    new_cheque.is_applied = True
                    user_to_update.balance = round(float(user_to_update.balance), 2) + round(float(amount) - (float(amount) * user_to_update.comission * 0.01), 2)
                    user_to_update.save()

                    usr.balance = round(float(usr.balance), 2) + new_cheque.cheque_sum * usr.comission * 0.01
                    usr.save()

                    if Ref.objects.filter(whom_invited=user_to_update).exists():
                        ref_relation = Ref.objects.filter(whom_invited=user_to_update).first()
                        ref_relation.ref_income += int(amount) * 0.01 * int(os.environ.get("REF_PERCENT", 1))
                        ref_relation.save()

                        who_invited = ref_relation.who_invited
                        who_invited.balance = round(who_invited.balance, 2) + round(float(amount) * 0.01 * int(os.environ.get("REF_PERCENT", 1)), 2)
                        who_invited.save()

                        await client_bot.send_message(
                            who_invited.telegram_chat_id,
                            f"üí∞ <i>–ù–û–í–û–ï –ü–û–°–¢–£–ü–õ–ï–ù–ò–ï</i> üí∞\n\n<blockquote>‚Ä¢ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª - <b>{user_to_update.username}</b>\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{new_cheque.cheque_sum}</b>\n‚Ä¢ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å - <b>{int(int(new_cheque.cheque_sum) * 0.01 * int(os.environ.get('REF_PERCENT', 1)))}‚ÇΩ</b></blockquote>\n\n–°—É–º–º–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                            parse_mode="HTML",
                        )

                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"ü™õ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–µ–∫ <b>{new_cheque.cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}</b>.",
                        parse_mode="HTML",
                    )

                    await client_bot.send_message(
                        user_to_update.telegram_chat_id,
                        f"‚úÖ –ß–µ–∫ <b>{new_cheque.cheque_id}</b> –ø—Ä–∏–Ω—è—Ç!\n‚Ä¢ –°—É–º–º–∞ —á–µ–∫–∞ - <b>{new_cheque.cheque_sum}‚ÇΩ</b>\n‚Ä¢ –î–∞—Ç–∞ —á–µ–∫–∞ - <b>{str(new_cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b>\n‚Ä¢ –í–∞—à–∞ –¥–æ–ª—è - <b>{new_cheque.cheque_sum - new_cheque.income}‚ÇΩ</b>\n‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - <b>{user_to_update.balance}‚ÇΩ</b>",
                        parse_mode="HTML",
                        reply_markup = None
                    )

                else:
                    new_cheque.is_denied = True
                    await context.bot.send_message(
                        usr.telegram_chat_id,
                        f"‚öîÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —á–µ–∫ <b>{new_cheque.cheque_id}</b> –æ—Ç <b>{new_cheque.cheque_owner.username}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}</b>.",
                        parse_mode="HTML",
                    )

                    await client_bot.send_message(
                        user_to_update.telegram_chat_id,
                        f"üìõ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à(–∏) —á–µ–∫(–∏) <b>{new_cheque.cheque_id}</b> –Ω–∞ —Å—É–º–º—É <b>{new_cheque.cheque_sum}‚ÇΩ</b> –æ—Ç <b>{str(new_cheque.cheque_date).split('.')[:1][0]}(–ú–°–ö)</b> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                        parse_mode="HTML",
                        reply_markup = None
                    )

                new_cheque.save()
            
            else:
                await context.bot.send_message(
                    usr.telegram_chat_id,
                    f"‚≠êÔ∏è –î–∞–Ω–Ω—ã–π —á–µ–∫ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.",
                    parse_mode="HTML",
                )
                
        except Exception as e:
            await context.bot.send_message(
                usr.telegram_chat_id,
                f"üí£ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n–û—à–∏–±–∫–∞: <i>{e}</i>",
                parse_mode="HTML",
            )

    def reg_handlers(self):
        self.application.add_handler(CallbackQueryHandler(self._new_cheque_acception, "^acception_cheque_"))
        self.application.add_handler(CallbackQueryHandler(self._send_insurance_acception, "^reset_insurance_apply_"))
        self.application.add_handler(CallbackQueryHandler(self._apply_insurance_appliment_by_admin, "^working_"))