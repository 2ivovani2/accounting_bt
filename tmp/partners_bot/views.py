import json, requests, re
import logging, os

from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP
from datetime import timedelta

from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404
from django.utils import timezone
from django.views.decorators.csrf import csrf_exempt, ensure_csrf_cookie
from django.db import transaction

from rest_framework import generics, permissions, status
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError
from rest_framework.authtoken.models import Token


from django.db import DatabaseError, IntegrityError
from django.db.models import Q

from partners_bot.models import Processor, Reks  # –µ—Å–ª–∏ —É –≤–∞—Å —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –º–æ–¥–µ–ª–∏
from .models import AutoAcceptCheque
from .serializers import AutoAcceptChequeSerializer, SmsReceiverSerializer, DeviceTokenSerializer
from .tasks import handle_update
from .bot_notification import notify_bot_user

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


@csrf_exempt
@ensure_csrf_cookie
@api_view(["GET"])
@permission_classes((permissions.AllowAny,))
def main_render(request):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ root.html
    """
    return render(request, 'root.html')


@csrf_exempt
async def partners_telegram_webhook(request):
    """
    Async-–≤–µ–±—Ö—É–∫ –¥–ª—è Telegram
    """
    if request.method == 'POST':
        try:
            update_data = request.body.decode('utf-8')
            await handle_update(update_data)
            return JsonResponse({'status': 'ok'}, status=200)
        except json.JSONDecodeError:
            return JsonResponse({'status': 'invalid json'}, status=400)
        except Exception as e:
            print(f"Error: {e}")
            return JsonResponse({'status': 'error'}, status=500)
    else:
        return JsonResponse({'status': 'only POST allowed'}, status=405)


class CreatePaymentAPIView(generics.CreateAPIView):
    """
    API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    """
    serializer_class = AutoAcceptChequeSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save()

    def create(self, request, *args, **kwargs):
        try:
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            self.perform_create(serializer)
            cheque = serializer.instance
            payment_url = request.build_absolute_uri(f"/payment?hash={cheque.hash}")
            headers = self.get_success_headers(serializer.data)
            return Response({
                "payment_url": payment_url,
                "hash": cheque.hash
            }, status=status.HTTP_201_CREATED, headers=headers)

        except ValidationError as ve:
            logger.error(f"Validation error: {ve.detail}")
            return Response({
                "error": "–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏",
                "details": ve.detail
            }, status=status.HTTP_400_BAD_REQUEST)
        except IntegrityError as ie:
            logger.error(f"Integrity error: {str(ie)}")
            return Response({
                "error": "–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö",
                "details": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
            }, status=status.HTTP_400_BAD_REQUEST)
        except DatabaseError as de:
            logger.error(f"Database error: {str(de)}")
            return Response({
                "error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "details": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        except Exception as e:
            logger.exception("Unexpected error occurred")
            return Response({
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "details": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class SmsReceiverAPIView(APIView):
    """
    API –¥–ª—è –ø—Ä–∏–µ–º–∞ SMS –æ—Ç Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    """
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        serializer = SmsReceiverSerializer(data=request.data)
        if not serializer.is_valid():
            logger.warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞: {serializer.errors}")
            return Response({
                'status': 'error',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                'details': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)

        sender = serializer.validated_data['sender']
        text = serializer.validated_data['text']
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ SMS –æ—Ç {sender}: {text}")

        amounts_raw = re.findall(r'(\d+(?:[.,]\d+)?)', text)
        if not amounts_raw:
            logger.warning("–°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ SMS.")
            return Response({
                'status': 'error',
                'message': '–°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ.'
            }, status=status.HTTP_400_BAD_REQUEST)

        found_amounts = []
        for amt_str in amounts_raw:
            amt_str = amt_str.replace(',', '.')  # –ú–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            try:
                dec_val = Decimal(amt_str).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
                found_amounts.append(dec_val)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ '{amt_str}': {e}")
                continue

        if not found_amounts:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
            return Response({
                'status': 'error',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.'
            }, status=status.HTTP_400_BAD_REQUEST)

        amount = min(found_amounts)  # –ë–µ—Ä—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è) —Å—É–º–º–∞: {amount}")


        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–µ–∫ –ø–æ —Å—É–º–º–µ

            cheque = AutoAcceptCheque.objects.get(
                Q(amount=amount) & Q(is_applied=False) & Q(is_denied=False)
            )
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: {cheque.hash} - {cheque.amount} RUB")
        except AutoAcceptCheque.DoesNotExist:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ —Å —Å—É–º–º–æ–π {amount} RUB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return Response({
                'status': 'error',
                'message': '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            }, status=status.HTTP_404_NOT_FOUND)
        except AutoAcceptCheque.MultipleObjectsReturned:
            cheque = AutoAcceptCheque.objects.filter(
                Q(amount=amount) & Q(is_applied=False)
            ).order_by('-created_at').first()
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–µ–π. –í—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π: {cheque.hash}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        if not cheque.is_applied:
            cheque.is_applied = True
            cheque.save()

            usr = cheque.reks.reks_owner                
            usr.clients_withdraw += cheque.amount
            usr.insurance_deposit -= cheque.amount
            usr.balance += cheque.amount * Decimal(usr.comission * 0.01)
            usr.save()
            
            if usr.insurance_deposit <= 0:
                usr.is_ready_to_get_money = False
                usr.save()
                notify_bot_user(
                    text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–æ–≤ –∏—Å—Ç–µ–∫, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É <b>{usr.balance / ((100 - usr.comission) * 0.01) - usr.balance}RUB</b> –Ω–∞ –∞–¥—Ä–µ—Å <pre>{os.environ.get('ACCEPT_INSURANCE_PAYMENTS_ADDRESS')}</pre>\n<blockquote>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.</blockquote>",
                    bot_token=os.environ.get("PROCESSORS_BOT_TOKEN"),
                    chat_id=usr.telegram_chat_id
                )

            notify_bot_user(
                text=f"<b>‚ù§Ô∏è‚Äçüî• –ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ ‚ù§Ô∏è‚Äçüî•</b>\n\n¬∑ –•—ç—à —á–µ–∫–∞ - <pre>{cheque.hash}</pre>\n¬∑ –°—É–º–º–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è - <b>{round(cheque.amount, 2)}‚ÇΩ</b>\n¬∑ –í–∞—à–∞ –¥–æ–ª—è - <b>{round(cheque.amount * Decimal(usr.comission * 0.01), 2)}‚ÇΩ</b>",
                bot_token=os.environ.get("PROCESSORS_BOT_TOKEN"),
                chat_id=usr.telegram_chat_id
            )
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {cheque.hash} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π.")

        return Response({
            'status': 'success',
            'cheque_hash': cheque.hash
        }, status=status.HTTP_200_OK)

class PaymentPageView(APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        cheque_hash = request.GET.get('hash')
        if not cheque_hash:
            return render(request, 'payment_page.html', {
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö—ç—à–∞ —á–µ–∫–∞.'
            })

        try:
            # –°—Ç–∞–≤–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≥–æ–Ω–æ–∫
            with transaction.atomic():
                cheque = AutoAcceptCheque.objects.select_for_update().get(hash=cheque_hash)

                # –ï—Å–ª–∏ —á–µ–∫ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω
                if cheque.is_applied:
                    return render(request, 'payment_page.html', {
                        'cheque': cheque,
                        'is_applied': True,
                        'show_illustration': False
                    })

                # –ï—Å–ª–∏ —á–µ–∫ —É–∂–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω
                if cheque.is_denied:
                    return render(request, 'payment_page.html', {
                        'error': '–ß–µ–∫ —É–∂–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω.'
                    })

                # 1) –ë–µ—Ä—ë–º —Ü–µ–ª—É—é —á–∞—Å—Ç—å
                original_amount_whole = cheque.amount.quantize(Decimal('1.'), rounding=ROUND_DOWN)

                # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –∫–æ–ø–µ–π–∫–∏
                if cheque.amount == original_amount_whole:
                    commission_rate = Decimal(os.environ.get("AUTO_COMISSION", "1.08"))
                    unique_amount_found = False

                    for kopeck in range(1, 100):
                        added_kopeck = Decimal(kopeck) / Decimal('100')
                        tentative_amount = original_amount_whole + added_kopeck

                        # –°—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É
                        tentative_final_amount = (tentative_amount * commission_rate).quantize(
                            Decimal('0.01'),
                            rounding=ROUND_HALF_UP
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
                        if not AutoAcceptCheque.objects.filter(
                            amount=tentative_final_amount,
                            is_applied=False,
                            is_denied=False
                        ).exists():
                            cheque.amount = tentative_final_amount
                            cheque.save()
                            unique_amount_found = True
                            break

                    if not unique_amount_found:
                        return render(request, 'payment_page.html', {
                            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–µ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                        })

        except AutoAcceptCheque.DoesNotExist:
            return render(request, 'payment_page.html', {
                'error': '–ß–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö—ç—à–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            })
        except Exception as e:
            return render(request, 'payment_page.html', {
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}'
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        if not cheque.reks:
            free_processor = Processor.objects.filter(insurance_deposit__gte=cheque.amount).first()
            if free_processor:
                free_reks = Reks.objects.filter(reks_owner=free_processor, is_archived=False).first()
                if free_reks:
                    cheque.reks = free_reks
                    cheque.save()

        if not cheque.reks:
            cheque.is_denied = True
            cheque.save()
            return render(request, 'payment_page.html', {
                'cheque': cheque,
                'missing_reks': True,
                'show_illustration': False
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä
        end_time = cheque.created_at + timedelta(minutes=10)
        current_time = timezone.now()
        if current_time >= end_time:
            cheque.is_denied = True
            cheque.save()
            return render(request, 'payment_page.html', {
                'cheque': cheque,
                'timer_expired': True,
                'show_illustration': False
            })

        # –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –æ—Ç–¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return render(request, 'payment_page.html', {
            'cheque': cheque,
            'is_applied': False,
            'end_time': int(end_time.timestamp()),
            'show_illustration': True
        })

class CheckDeviceTokenView(APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request, format=None):
        serializer = DeviceTokenSerializer(data=request.data)
        if serializer.is_valid():
            device_token = serializer.validated_data.get('device_token')
            exists = Processor.objects.filter(device_token=device_token).exists()
            return Response({'exists': exists}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class CheckChequeStatusView(APIView):
    """
    POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ–∫–∞
    """
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        cheque_hash = request.data.get('hash') or request.POST.get('hash')
        if not cheque_hash:
            return Response({'success': False, 'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö—ç—à —á–µ–∫–∞.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            cheque = get_object_or_404(AutoAcceptCheque, hash=cheque_hash)

            if cheque.is_applied:
                # –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ç—É—Ç webhook, –µ—Å–ª–∏ –Ω–∞–¥–æ
                webhook_url = cheque.success_webhook
                if webhook_url:
                    requests.post(webhook_url, data={
                        'cheque_hash': cheque_hash,
                        'cheque_id': cheque.id,
                        'cheque_sum': cheque.amount,
                        'is_applied': cheque.is_applied,
                        'is_denied': cheque.is_denied,
                    })

                return Response({'success': True, 'is_applied': True}, status=status.HTTP_200_OK)
            else:
                return Response({'success': True, 'is_applied': False}, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({'success': False, 'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PaymentSuccessView(APIView):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        redirect_url = request.GET.get('redirect_url', None)
        return render(request, 'payment_success.html', {'redirect_url': redirect_url})

class DocumentationView(APIView):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    """
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        return render(request, 'doc.html')

class DownloadAppsView(APIView):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    """
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        return render(request, 'apps_page.html')

class DenyChequeView(APIView):
    """
    –ü–æ POST hash=... –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç is_denied=True –¥–ª—è —á–µ–∫–∞
    """
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        cheque_hash = request.data.get('hash') or request.POST.get('hash')
        if not cheque_hash:
            return Response({'success': False, 'error': 'No hash provided'}, status=status.HTTP_400_BAD_REQUEST)
        try:
            cheque = AutoAcceptCheque.objects.get(hash=cheque_hash)
            cheque.is_denied = True
            cheque.save()
            return Response({'success': True, 'message': 'Cheque denied'}, status=status.HTTP_200_OK)
        except AutoAcceptCheque.DoesNotExist:
            return Response({'success': False, 'error': 'Cheque not found'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({'success': False, 'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class CheckTokenView(APIView):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ POST-–¥–∞–Ω–Ω—ã—Ö: token=...)
    """
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        # –ò—â–µ–º —Ç–æ–∫–µ–Ω –ª–∏–±–æ –≤ request.data (DRF) –ª–∏–±–æ –≤ request.POST (Django)
        token_value = request.data.get('token') or request.POST.get('token')
        if not token_value:
            return Response(
                {'success': False, 'error': 'No token provided'}, 
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º
        token = Token.objects.filter(key=token_value)
        token_exists = token.exists()
        
        return Response(
            {
                'success': True,
                'token_exists': token_exists,
                'token_id': token.first().id if token_exists else None
            }, 
            status=status.HTTP_200_OK
        )