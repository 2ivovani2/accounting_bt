from bot_constructor.models import *

from asgiref.sync import sync_to_async
from django.core.management.base import BaseCommand
from rest_framework.authtoken.models import Token

import os, django, logging, warnings, requests, uuid
warnings.filterwarnings("ignore")

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

VERIFIED_MARKUP = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ ü§ñ", callback_data="bots_management")
        ],
        [
            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stat")
        ]
])

UNVERIFIED_MARKUP = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üê≥", callback_data="verify"),
        ]
])



@sync_to_async
def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if not message.chat.username:
        username = "NoName"
    else:
        username = message.chat.username

    instance, created = CustomUser.objects.update_or_create(
        telegram_id_in_admin_bot = message.chat.id,
        username = username,
    )

    token = Token.objects.get_or_create(user=instance)
    
    return instance, created, token[0].key

async def start(update: Update, context: CallbackContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    usr, _, _ = await user_get_by_update(update)
    
    if usr.verified_usr:
        await context.bot.send_video(
            usr.telegram_id_in_admin_bot,
            "https://media1.giphy.com/media/G3Hu8RMcnHZA2JK6x1/giphy.gif?cid=ecf05e47qybjqyrdm7j9unlomb839p3w2u2mloamu2lcx5qu&rid=giphy.gif&ct=g",
            caption=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{usr.username}</b> üòΩ\n–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üíº",
            parse_mode="HTML",
            reply_markup=VERIFIED_MARKUP
        )
    else:

        
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"<b>{usr.username}</b>, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ üò≥\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n‚ö´¬†<i>–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ</i>\n‚ö´¬†<i>–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤</i>\n‚ö´¬†<i>–û–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>",
            parse_mode="HTML",
            reply_markup=UNVERIFIED_MARKUP
        )

    return ConversationHandler.END

async def verification(update: Update, context: CallbackContext) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    usr, _, _ = await user_get_by_update(update)

    if AdminApplication.objects.filter(user=usr, status="Created").exists():
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. üò∂‚Äçüå´Ô∏è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–∏–∏ –∞–¥–º–∏–Ω–æ–≤.",
            parse_mode="HTML",      
        )

        return ConversationHandler.END

    await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"–£–≤–∞–∂–∞–µ–º—ã–π <b>{usr.username}</b>, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: \n\n<b>1)</b> –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∞—à–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞( –¢–∏–∫—Ç–æ–∫, –¢–µ–ª–µ–≥—Ä–∞–º, –í–ö, –î—Ä—É–≥–æ–µ )\n\n<b>2)</b> –£–∫–∞–∂–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –ü–ü (–≠—Ç–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —á—å–∏–º-–ª–∏–±–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.)\n\n<b>3)</b> –ö–∞–Ω–∞–ª —Å –≤–∞—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏ (–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)\n\n<b>4)</b> –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞(—Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã, —Ç–∏–∫—Ç–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ã, —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã –í–ö –∏ —Ç.–¥.)\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∞–ø–ø–æ—Ä—Ç –≤–ø—Ä–∞–≤–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Ç –≤–∞—Å –¥–æ–∫-–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è —Ç–µ–º –∏–ª–∏ –∏–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å <b>–°–¢–†–û–ì–û</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. \n\n\n–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: @pp_dark_side\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å: @i_vovani",
            parse_mode="HTML",      
    )

    return 0

async def complete_verification(update: Update, context: CallbackContext) -> ConversationHandler.END:
    """
        –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    usr, _, _ = await user_get_by_update(update)
    
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    application_id = str(uuid.uuid4())[:8]
    application = AdminApplication(
        user=usr,
        application_number=application_id
    )
    application.save()
        
    accept_markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data="accept_usr"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚õîÔ∏è", callback_data="deny_usr"),
        ]
    ])

    admin = CustomUser.objects.filter(username="i_vovani").first()

    await context.bot.send_message(
        admin.telegram_id_in_admin_bot,
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n<b>{usr.telegram_id_in_admin_bot}</b>\n<b>{message.text}</b>",
        reply_markup=accept_markup,
        parse_mode="HTML"
    )
    
    
    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"‚ö´Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.\n\n‚¨õÔ∏è –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <b>{application.application_number}</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã: @i_vovani",
        parse_mode="HTML",      
    )

    return ConversationHandler.END

async def deny_user(update:Update, context:CallbackContext) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑—ã–≤–∞—é—â–∞—è –≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –ü–ü
    """

    usr, _, _ = await user_get_by_update(update)
    
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if usr.is_superuser:
        new_user_id, _ = message.text.split("\n")[1:]
        
        if CustomUser.objects.filter(telegram_id_in_admin_bot=new_user_id).exists():
            new_usr = CustomUser.objects.filter(telegram_id_in_admin_bot=new_user_id).first()
            
            application = AdminApplication.objects.filter(
                user=new_usr
            )
            application.update(
                status="–û—Ç–∫–ª–æ–Ω–µ–Ω"
            )

            await context.bot.delete_message(
                usr.telegram_id_in_admin_bot,
                update.effective_message.id
            )
            
            await context.bot.send_message(
                new_usr.telegram_id_in_admin_bot,
                f"‚úñ¬†–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>{application.first().application_number}</b> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @i_vovani ",
                parse_mode="HTML",
                reply_markup=UNVERIFIED_MARKUP
            )

            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                "–û—Ç–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            )

        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={new_user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n\n–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani"
            )

    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üôÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
            parse_mode="HTML",  
        )

async def accept_user(update:Update, context:CallbackContext) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ü–ü
    """
    usr, _, _ = await user_get_by_update(update)
    
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    if usr.is_superuser:
        new_user_id, new_user_info = message.text.split("\n")[1:]
        
        if CustomUser.objects.filter(telegram_id_in_admin_bot=new_user_id).exists():
            new_usr = CustomUser.objects.filter(telegram_id_in_admin_bot=new_user_id)
            new_usr.update(
                verified_usr=True,
                admin_info=new_user_info
            )

            application = AdminApplication.objects.filter(
                user=new_usr[0]
            )
            application.update(
                status="–ü—Ä–∏–Ω—è—Ç"
            )

            await context.bot.delete_message(
                usr.telegram_id_in_admin_bot,
                update.effective_message.id
            )

            await context.bot.send_message(
                new_usr[0].telegram_id_in_admin_bot,
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã ‚úÖ\n\n–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º\n–ê–¥–º–∏–Ω: @i_vovani\n–û—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª: @pp_dark_side\n",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )

            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                "–ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.",
            )

        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={new_user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n\n–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani"
            )

    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üôÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
            parse_mode="HTML",  
        )

async def ask_for_bot_name(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"ü§ñ <b>{usr.username}</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞, —Ç–æ –∫–∞–∫ –±—ã –≤—ã –Ω–∞–∑–≤–∞–ª–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞.",
        parse_mode="HTML"
    )

    return 0

async def ask_for_bot_token(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    if len(Bot.objects.filter(owner=usr).all()) == int(os.environ.get("BOTS_LIMIT")):
        context.bot.send_message(
            usr.telegram_id_in_admin_bot, 
            f"<b>{usr.username}</b>, –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )
        
        return ConversationHandler.END

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    context.user_data["perm_bot_name"] = message.text

    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"üëçüèº –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ <b>—Ç–æ–∫–µ–Ω</b> –≤–∞—à–µ–≥–æ –±–æ—Ç–∞,\n–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç <b>@BotFather</b>",
        parse_mode="HTML"
    )

    return 1

async def create_bot_by_usr_token(update:Update, context:CallbackContext):
    usr, _, auth_token = await user_get_by_update(update)
   
    message = update.message

    if Bot.objects.filter(token=message.text.strip()).exists():
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"‚ùå –ë–æ—Ç —Å –¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        )
    
        return ConversationHandler.END

    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"üëÅ –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è",
    )
    
    headers = {
        "Authorization":"Token " + auth_token,
    }

    data = {
        "bot_token":message.text.strip(),
        "bot_name":context.user_data["perm_bot_name"]
    }

    if not os.environ.get("API_PORT"):
        r = requests.post(f'{os.environ.get("API_PROTOCOL")}://{os.environ.get("API_HOST")}/api/constructor/create_bot', headers=headers, data=data)
    else:
        r = requests.post(f'{os.environ.get("API_PROTOCOL")}://{os.environ.get("API_HOST")}:{os.environ.get("API_PORT")}/api/constructor/create_bot', headers=headers, data=data)

    if r.status_code == 200:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"ü§© –£—Å–ø–µ—Ö! –í–∞—à –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –¥–µ–Ω—å–≥–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )
    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–æ—Å—Ç–∏—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.\n\n<b>–û—à–∏–±–∫–∞</b>:\n{r.json()['text']}\n\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )
    
    return ConversationHandler.END

async def user_bots_info(update:Update, context:CallbackContext) -> None:
    usr, _, _ = await user_get_by_update(update)
    user_bots = Bot.objects.filter(owner=usr).all()


    if len(user_bots) == 0:
        zero_bots_keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ ‚ûï", callback_data="create_bot_for_admin")
            ]
        ])

        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üòî <b>{usr.username}</b>, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=zero_bots_keyboard
        )

    else:
        not_zero_bots_keyboard = [
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ ‚ûï", callback_data="create_bot_for_admin")]
        ]

        end_message = f"üëÄ <b>{usr.username}</b>, —É –≤–∞—Å <b>{len(user_bots)}</b> –±–æ—Ç–æ–≤.\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ:\n\n"

        for bot in user_bots:
            end_message += f"üÜî: <b>{bot.id}</b>\nüçÖ –Æ–∑–µ—Ä–Ω–µ–π–º: <b>@{bot.telegram_name}</b>\nüë©üèº‚Äçüíª–ò–º—è –≤ –±–∞–∑–µ: <b>{bot.name}</b>\n"

            if bot.is_active:
                end_message += "‚úÖ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: <b>—Ä–∞–±–æ—Ç–∞–µ—Ç</b>"
                not_zero_bots_keyboard.append(
                    [InlineKeyboardButton(text=f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ üìå{bot.id}üìå", callback_data=f"stop_bot_{bot.id}")]
                )
            else:
                end_message += "‚ùå –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>"
                not_zero_bots_keyboard.append(
                    [InlineKeyboardButton(text=f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ üìå{bot.id}üìå", callback_data=f"activate_bot_{bot.id}")]
                )

        end_message += "\n\n"
        not_zero_bots_keyboard.append(
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu")]
        )

        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            end_message,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(not_zero_bots_keyboard)
        )

async def stop_activate_bot(update:Update, context:CallbackContext):
    usr, _, auth_token = await user_get_by_update(update)
    q = update.callback_query.data.split("_")

    if q[0] + "_" + q[1] == "activate_bot" and Bot.objects.get(pk=q[2]) != None:
        bot_by_id = Bot.objects.get(pk=q[2])
        
        if bot_by_id.owner == usr and not bot_by_id.is_active:
            headers = {
                "Authorization":"Token " + auth_token,
            }

            data = {
                "bot_token":bot_by_id.token,
            }
            
            if not os.environ.get("API_PORT"):
                r = requests.post(f'{os.environ.get("API_PROTOCOL")}://{os.environ.get("API_HOST")}/api/constructor/start_bot', headers=headers, data=data)
            else:
                r = requests.post(f'{os.environ.get("API_PROTOCOL")}://{os.environ.get("API_HOST")}:{os.environ.get("API_PORT")}/api/constructor/start_bot', headers=headers, data=data)

           
            if r.status_code == 200:
                bot_by_id.is_active = True
                bot_by_id.save()

                await context.bot.delete_message(
                    usr.telegram_id_in_admin_bot,
                    update.effective_message.id
                )

                await context.bot.send_message(
                    usr.telegram_id_in_admin_bot,
                    f"ü§© –£—Å–ø–µ—Ö! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∏–∫–∞.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup.from_button(
                            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                    ),
                )
            else:
                await context.bot.send_message(
                    usr.telegram_id_in_admin_bot,
                    f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.\n\n<b>–û—à–∏–±–∫–∞</b>:\n{r.json()['text']}\n\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup.from_button(
                            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                    ),
                )


        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"<b>{usr.username}</b>, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å <i>callback</i>.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
                parse_mode="HTML", 
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )

    elif q[0] + "_" + q[1] == "stop_bot" and Bot.objects.get(pk=q[2]) != None:
        bot_by_id = Bot.objects.get(pk=q[2])
        
        if bot_by_id.owner == usr:
            headers = {
                "Authorization":"Token " + auth_token,
            }

            data = {
                "bot_token":bot_by_id.token,
            }

            if not os.environ.get("API_PORT"):
                r = requests.post(f'{os.environ.get("API_PROTOCOL")}://{os.environ.get("API_HOST")}/api/constructor/stop_bot', headers=headers, data=data)
            else:
                r = requests.post(f'{os.environ.get("API_PROTOCOL")}://{os.environ.get("API_HOST")}:{os.environ.get("API_PORT")}/api/constructor/stop_bot', headers=headers, data=data)

            if r.status_code == 200:
                bot_by_id.is_active = False
                bot_by_id.save()

                await context.bot.delete_message(
                    usr.telegram_id_in_admin_bot,
                    update.effective_message.id
                )

                await context.bot.send_message(
                    usr.telegram_id_in_admin_bot,
                    f"ü§© –£—Å–ø–µ—Ö! –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∏–∫–∞.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup.from_button(
                            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                    ),
                )
            else:
                await context.bot.send_message(
                    usr.telegram_id_in_admin_bot,
                    f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.\n\n<b>–û—à–∏–±–∫–∞</b>:\n{r.json()['text']}\n\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup.from_button(
                            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                    ),
                )

        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"<b>{usr.username}</b>, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å <i>callback</i>.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
                parse_mode="HTML", 
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )
    
        
    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"<b>{usr.username}</b>, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å <i>callback</i>.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

async def stat(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    user_bots = Bot.objects.filter(owner=usr).all()
    end_message = f"üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{usr.balance}‚ÇΩ</b>\nüìä –°—É–º–º–∞—Ä–Ω—ã–π –æ–±–æ—Ä–æ—Ç: <b>{usr.total_income}‚ÇΩ</b>"

    if len(user_bots) != 0:
        end_message += "\n\nü§ñ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º:</b>\n\n"
        for bot in user_bots:
            end_message += f"üçÖ –Æ–∑–µ—Ä–Ω–µ–π–º: <b>@{bot.telegram_name}</b>\nüí≤ –ü—Ä–∏–±—ã–ª—å: <b>{bot.income}‚ÇΩ</b>"

    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        end_message,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É üí∑", callback_data="create_withdraw"),
            ],
        
            [
                InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤—ã–ø–ª–∞—Ç üñá", callback_data="withdraw_list"),
            ],
        
            [
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ],
        ])
    )

async def ask_for_payment_method(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    
    await context.bot.delete_message(
        usr.telegram_id_in_admin_bot,
        update.effective_message.id
    )

    if usr.balance > (50 / 0.9): 
        cards_amt_avaliable = usr.balance * 0.9 - 50 
    else: 
        cards_amt_avaliable = usr.balance * 0.9
    
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton(text="ü•ù Qiwi –Ω–∏–∫"), KeyboardButton(text="ü•ù Qiwi –Ω–æ–º–µ—Ä")],
        [KeyboardButton(text="ü•ù Qiwi –∫–∞—Ä—Ç–∞"), KeyboardButton(text="üí≥ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="üü™ –Æ–ú–∞–Ω–∏")]  
    ], one_time_keyboard=True, resize_keyboard=True)

    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"<b>‚¨õÔ∏è –ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–æ–≤:</b>\n\nü•ù<b>3%</b> QIWI (–ö–∞—Ä—Ç–∞, –ù–æ–º–µ—Ä, –ù–∏–∫)\nüü™ <b>3%</b> –ÆMoney\nüí≥ <b>3% + 50—Ä</b> - –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n\n<b>‚¨õÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏):</b>\nüü™ –ÆMoney - <b>{usr.balance * 0.9} ‚ÇΩ</b>\nü•ù QIWI - <b>{usr.balance * 0.9} ‚ÇΩ</b>\nüí≥ CARDS- <b>{cards_amt_avaliable} ‚ÇΩ</b>\n\n* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <b>500‚ÇΩ</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    return 0

async def ask_payment_sum(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    payment_method = update.message.text.split()[1:]
    
    if usr.balance < (500 / 0.9):
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üòê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <b>500‚ÇΩ</b>.\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @i_vovani",
	    parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

        return ConversationHandler.END

    if len(payment_method) == 0:
        await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"üòî –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ê–¥–º–∏–Ω: @ivovani",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
        )
        return ConversationHandler.END

    if "qiwi" in payment_method[0].lower().strip():
        if len(payment_method) != 2:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"üòî –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ê–¥–º–∏–Ω: @ivovani",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )
        
            return ConversationHandler.END
        
        if payment_method[1].lower().strip() in ("–∫–∞—Ä—Ç–∞", "–Ω–æ–º–µ—Ä", "–Ω–∏–∫"):
            context.user_data["payment_method"] = " ".join(payment_method)
            context.user_data["comission"] = 10

        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"üòî –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ê–¥–º–∏–Ω: @ivovani",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )
        
            return ConversationHandler.END
        
    elif "—é–º–∞–Ω–∏" in payment_method[0].lower().strip() or "–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã" in f"{' '.join(payment_method).lower()}":
        context.user_data["payment_method"] = " ".join(payment_method)
        context.user_data["comission"] = 10

    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üòî –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ê–¥–º–∏–Ω: @ivovani",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

        return ConversationHandler.END
    
    if "–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã" in context.user_data["payment_method"].lower().strip():
        sum_avaliable = usr.balance * (1 - context.user_data['comission'] / 100) - 50
    else:
        sum_avaliable = usr.balance * (1 - context.user_data['comission'] / 100)


    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –±–æ–ª–µ–µ <b>{sum_avaliable} ‚ÇΩ</b>\nüôÇ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—É–º–º—É –Ω–µ –±–æ–ª–µ–µ <b>15.000‚ÇΩ</b> –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑!\n\n* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <b>500‚ÇΩ</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
        ),
    )

    return 1

async def ask_for_credentials(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    amt = update.message.text

    try:
        amt = int(amt.strip())
        if "–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã" in context.user_data["payment_method"].lower().strip():
            avaliable_sum = usr.balance * (1 - context.user_data['comission'] / 100) - 50
        else:
            avaliable_sum = usr.balance * (1 - context.user_data['comission'] / 100)

        if amt > avaliable_sum:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"üòê –í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é.\nü§ë –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{avaliable_sum}‚ÇΩ</b>\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @i_vovani",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )

            return ConversationHandler.END

        if amt < 500:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"üòê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <b>500‚ÇΩ</b>.\nü§ë –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{avaliable_sum}‚ÇΩ</b>\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @i_vovani",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )

            return ConversationHandler.END


        context.user_data["withdraw_amt"] = amt

        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üí∞¬†<b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\nüí≥ –ö–∞—Ä—Ç—É/–°—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ <b><i>–°–õ–ò–¢–ù–û!</i></b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

        return 2

    except:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üò≥ –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @i_vovani",
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

        return ConversationHandler.END

async def ask_for_acception_transaction(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    credentials = update.message.text
    
    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"<b>‚ö°Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É</b>\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{credentials}</b>\nüí∞ –°—É–º–º–∞: <b>{context.user_data['withdraw_amt']}‚ÇΩ</b>\nüîê –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{context.user_data['payment_method']}</b>\nüßÆ –ö–æ–º–∏—Å—Å–∏—è: <b>{context.user_data['comission']}%</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ")],
            [KeyboardButton(text="–û—Ç–∫–ª–æ–Ω—è—é üìõ")]
        ], one_time_keyboard=True, resize_keyboard=True)
    )

    return 3

async def deny_usr_transaction(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    msg = message.text.split("\n")
    tg_id, payment_id = msg[1].split(":")[1].strip(), msg[-1].split(":")[1].strip()

    if usr.is_superuser:
        
        if CustomUser.objects.filter(telegram_id_in_admin_bot=tg_id).exists():
            payeer = CustomUser.objects.filter(telegram_id_in_admin_bot=tg_id).first()
            payment = AdminTransaction.objects.filter(payment_id=payment_id).first()

            payment.status = "–û—Ç–º–µ–Ω–µ–Ω"
            payment.save()

            await context.bot.send_message(
                payeer.telegram_id_in_admin_bot,
                f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå</b>\n\n–ü—Ä–∏—á–∏–Ω–∞: <b>–Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )

            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                "–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            )

        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={tg_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n\n–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani"
            )

    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üôÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
            parse_mode="HTML",  
        )

async def finish_usr_transaction(update: Update, context: CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    if update.message:
        message = update.message
    else:
        message = update.callback_query.message

    msg = message.text.split("\n")
    tg_id, payment_id, amt = msg[1].split(":")[1].strip(), msg[-1].split(":")[1].strip(), int(msg[-2].split(":")[1][:-1])

    if usr.is_superuser:
        
        if CustomUser.objects.filter(telegram_id_in_admin_bot=tg_id).exists():
            payeer = CustomUser.objects.filter(telegram_id_in_admin_bot=tg_id).first()
            payment = AdminTransaction.objects.filter(payment_id=payment_id).first()

            payment.status = "–ü—Ä–æ–≤–µ–¥–µ–Ω"
            payment.income = amt * (payment.comission / 100)
            payeer.balance -= amt

            payeer.save()
            payment.save()

            await context.bot.send_message(
                payeer.telegram_id_in_admin_bot,
                f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ</b>\n\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <b>{payment_id}</b>\n\n–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
                ),
            )

            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                "–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            )

        else:
            await context.bot.send_message(
                usr.telegram_id_in_admin_bot,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={tg_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n\n–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani"
            )

    else:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üôÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @i_vovani",
            parse_mode="HTML",  
        )

async def usr_acception_transaction(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    choice = update.message.text.strip().lower()
    payment_id = str(uuid.uuid4())

    transaction = AdminTransaction(
            payment_id=payment_id,
            withdraw_type=context.user_data["payment_method"],
            payment_sum=context.user_data["withdraw_amt"],
            comission=context.user_data["comission"],
            payeer=usr   
    )

    if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" in choice:
        transaction.status = "–í —Ä–∞–±–æ—Ç–µ"
        admin = CustomUser.objects.filter(username="i_vovani").first()
        
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–ö–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\nID –∑–∞—è–≤–∫–∏ - <b>{payment_id}</b> \n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @i_vovani",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

        await context.bot.send_message(
            admin.telegram_id_in_admin_bot,
            f"üçÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É:\nTG ID: <b>{usr.telegram_id_in_admin_bot}</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{usr.username}</b>\n–¢–∏–ø –≤—ã–≤–æ–¥–∞: <b>{context.user_data['payment_method']}</b>\n–°—É–º–º–∞: <b>{context.user_data['withdraw_amt']}‚ÇΩ</b>\nID –∑–∞—è–≤–∫–∏: <b>{payment_id}</b>",
            parse_mode="HTML",
            reply_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ", callback_data="accept_transaction"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–µ–Ω–∞ ‚õîÔ∏è", callback_data="deny_transaction"),
                ]
            ])
        )
        transaction.save()

        return ConversationHandler.END

    if "–æ—Ç–∫–ª–æ–Ω—è—é" in choice:
        transaction.status = "–û—Ç–º–µ–Ω–µ–Ω"
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üëÅ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            parse_mode="HTML",
            reply_markup=VERIFIED_MARKUP
        )

        transaction.save()  
        return ConversationHandler.END
    

    await context.bot.send_message(
        usr.telegram_id_in_admin_bot,
        f"üò≥ –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @i_vovani",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup.from_button(
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
        ),
    )

async def transaction_list(update:Update, context:CallbackContext):
    usr, _, _ = await user_get_by_update(update)
    transactions = AdminTransaction.objects.filter(payeer=usr).all()[:5]
    end_msg = "<b>üìù –í–∞—à–∏ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n"

    if len(transactions) == 0:
        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            f"üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )

    else:
        for transaction in transactions:
            end_msg += f"ID: <b>{transaction.payment_id}</b>\n–¢–∏–ø –≤—ã–≤–æ–¥–∞: <b>{transaction.withdraw_type}</b>\n–°—É–º–º–∞: <b>{transaction.payment_sum}‚ÇΩ</b>\n–°—Ç–∞—Ç—É—Å: <b>{transaction.status}</b>\n\n"

        await context.bot.send_message(
            usr.telegram_id_in_admin_bot,
            end_msg,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üì¶", callback_data="main_menu"),
            ),
        )


def main() -> None:
    """Run the bot."""

    application = Application.builder().token(os.environ.get("ADMIN_BOT_TOKEN")).build()
    
    application.add_handler(CommandHandler("start", start)) 
    application.add_handler(CallbackQueryHandler(start, "main_menu"))

    application.add_handler(CallbackQueryHandler(user_bots_info, "bots_management"))
    application.add_handler(CallbackQueryHandler(stat, "stat"))

    application.add_handler(CallbackQueryHandler(transaction_list, "withdraw_list"))

    create_payment_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_payment_method, "create_withdraw")],
        states={
            0: [MessageHandler(filters.TEXT, ask_payment_sum)],
            1: [MessageHandler(filters.TEXT, ask_for_credentials)],
            2: [MessageHandler(filters.TEXT, ask_for_acception_transaction)],
            3: [MessageHandler(filters.TEXT, usr_acception_transaction)]
        },
        fallbacks=[]
    )
    application.add_handler(create_payment_conv_handler)

    application.add_handler(CallbackQueryHandler(finish_usr_transaction, "accept_transaction"))
    application.add_handler(CallbackQueryHandler(deny_usr_transaction, "deny_transaction"))

    verify_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(verification, "verify")],
        states={
            0: [MessageHandler(filters.TEXT, complete_verification)],
            
        },
        fallbacks=[],
    )
    application.add_handler(verify_conv_handler)

    application.add_handler(CallbackQueryHandler(accept_user, "accept_usr"))
    application.add_handler(CallbackQueryHandler(deny_user, "deny_usr"))

    create_bot_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_bot_name, "create_bot_for_admin")],
        states={
            0: [MessageHandler(filters.TEXT, ask_for_bot_token)],
            1: [MessageHandler(filters.TEXT, create_bot_by_usr_token)]
        },
        fallbacks=[]
    )
    application.add_handler(create_bot_conv_handler)

    application.add_handler(CallbackQueryHandler(stop_activate_bot))
    application.add_handler(MessageHandler("–ú–µ–Ω—é üì•", start))

    application.run_polling()


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'

    def handle(self, *args, **kwargs):        
        main()

        
        
        
