# Generated by Django 4.1.1 on 2023-04-10 10:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id_in_admin_bot', models.CharField(default="Can't find id", max_length=255, verbose_name='Tg_id in admin bot')),
                ('verified_usr', models.BooleanField(default=False, verbose_name='Verified by admin')),
                ('admin_info', models.TextField(default='No info', verbose_name="Information of admin's work")),
                ('balance', models.PositiveIntegerField(default=0, verbose_name='Balance')),
                ('total_income', models.PositiveBigIntegerField(default=0, verbose_name='Total income')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admin',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(default=False, max_length=150, verbose_name='TGBot token')),
                ('telegram_name', models.CharField(default='botfather', max_length=255, verbose_name='Telegram username')),
                ('name', models.CharField(default='Безымянный', max_length=100, verbose_name='TGBot name')),
                ('is_active', models.BooleanField(default=False, verbose_name='Bot activity status')),
                ('income', models.BigIntegerField(default=0, verbose_name='Total bot income')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Bot owner')),
            ],
            options={
                'verbose_name': 'Telegram Bot',
                'verbose_name_plural': 'Telegram Bots',
            },
        ),
        migrations.CreateModel(
            name='TGUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.PositiveBigIntegerField(default=0, verbose_name="Telegram user's id")),
                ('username', models.CharField(default='Ánonymous', max_length=50, verbose_name="Telegram user's username")),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bot_constructor.bot', verbose_name="Telegram user's bot")),
            ],
            options={
                'verbose_name': 'Telegram User',
                'verbose_name_plural': 'Telegram Users',
            },
        ),
        migrations.CreateModel(
            name='AdminTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(default='Not found', max_length=255, verbose_name='id of payment')),
                ('withdraw_type', models.CharField(choices=[('Qiwi ник', 'Qiwi ник'), ('Qiwi номер', 'Qiwi номер'), ('Qiwi карта', 'Qiwi карта'), ('ЮМани', 'ЮМани'), ('Остальные карты', 'Остальные карты')], default='Нет', max_length=30)),
                ('payment_sum', models.BigIntegerField(default=0, verbose_name='Sum of the payment')),
                ('date_payment', models.DateTimeField(auto_now_add=True, verbose_name='Apply date')),
                ('comission', models.BigIntegerField(default=0, verbose_name='Comission amt in %')),
                ('status', models.CharField(choices=[('В работе', 'В работе'), ('Отменен', 'Отменен'), ('Проведен', 'Проведен'), ('Создан', 'Создан')], default='Создан', max_length=30)),
                ('payeer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Person who applied for payment')),
            ],
            options={
                'verbose_name': 'Admin transaction apply',
                'verbose_name_plural': 'Admin transaction applies',
            },
        ),
        migrations.CreateModel(
            name='AdminApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Apply date')),
                ('application_number', models.CharField(default='Not defined', max_length=255, verbose_name='Application number')),
                ('status', models.CharField(choices=[('Принят', 'Принят'), ('Отклонен', 'Отклонен'), ('Создан', 'Создан')], default='Создан', max_length=30)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User, who sended an apply')),
            ],
            options={
                'verbose_name': 'Admin apply',
                'verbose_name_plural': 'Admin applies',
            },
        ),
    ]
