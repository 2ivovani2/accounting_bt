from django.db import models
from django.contrib.auth.models import AbstractUser

import telebot, time, vk_api, pymorphy2, json, os, random, logging, uuid, re
from yookassa import Configuration, Payment

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class CustomUser(AbstractUser):
    telegram_id_in_admin_bot = models.CharField(
        max_length=255,
        null=False,
        default="Can't find id", 
        verbose_name="Tg_id in admin bot"
    )

    verified_usr = models.BooleanField(
        verbose_name="Verified by admin",
        default=False
    )

    admin_info = models.TextField(
         verbose_name="Information of admin's work",
         null=False,
         default="No info"
    )

    balance = models.PositiveIntegerField(
        verbose_name='Balance',
        null=False,
        default=0,
    )

    total_income = models.PositiveBigIntegerField(
        verbose_name='Total income',
        null=False,
        default=0
    )

    def __str__(self) -> str:
        return self.username

    def to_dict(self) -> dict:
        return {
            'username':self.username,
            'balance':self.balance,
        }

    class Meta:
        verbose_name = 'Admin'
        verbose_name_plural = 'Admin'

class TGPayment(models.Model):
    STATUS_CHOICES = (
        ("–ü—Ä–æ–≤–µ–¥–µ–Ω", "–ü—Ä–æ–≤–µ–¥–µ–Ω"),
        ("–°–æ–∑–¥–∞–Ω", "–°–æ–∑–¥–∞–Ω"),
    )

    amt = models.BigIntegerField(
        verbose_name="TGPayment amt",
        null=False,
        default=0
    )

    payment_id = models.CharField(
        verbose_name="TGPaymentID",
        max_length=255,
        null=False,
        default="No ID"
    )

    fact_amt = models.BigIntegerField(
        verbose_name="TGPayment fact amt",
        null=False,
        default=0
    )

    status = models.CharField(
        max_length=30,
        choices=STATUS_CHOICES,
        null=False,
        default="–°–æ–∑–¥–∞–Ω",
    )
    
    owner = models.ForeignKey(
        CustomUser,
        verbose_name='Bot owner',
        on_delete=models.CASCADE,
        null=True
    )

    def __str__(self) -> str:
        return self.payment_id

    class Meta:
        verbose_name = 'Payment'
        verbose_name_plural = 'Payments'

class AdminApplication(models.Model):
    STATUS_CHOICES = (
        ("–ü—Ä–∏–Ω—è—Ç", "–ü—Ä–∏–Ω—è—Ç"),
        ("–û—Ç–∫–ª–æ–Ω–µ–Ω", "–û—Ç–∫–ª–æ–Ω–µ–Ω"),
        ("–°–æ–∑–¥–∞–Ω", "–°–æ–∑–¥–∞–Ω"),
    )

    date_created = models.DateTimeField(
        auto_now_add=True,
        blank=True, 
        verbose_name="Apply date"
    )

    user = models.ForeignKey(
        CustomUser,
        verbose_name="User, who sended an apply",
        on_delete=models.CASCADE
    )

    application_number = models.CharField(
        verbose_name="Application number",
        max_length=255,
        null=False,
        default="Not defined"
    )

    status = models.CharField(
        max_length=30,
        choices=STATUS_CHOICES,
        null=False,
        default="–°–æ–∑–¥–∞–Ω",
    )

    def __str__(self) -> str:
        return self.user.username

    class Meta:
        verbose_name = 'Admin apply'
        verbose_name_plural = 'Admin applies'

class AdminTransaction(models.Model):
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–û—Ç–º–µ–Ω–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"),
        ("–ü—Ä–æ–≤–µ–¥–µ–Ω", "–ü—Ä–æ–≤–µ–¥–µ–Ω"),
        ("–°–æ–∑–¥–∞–Ω", "–°–æ–∑–¥–∞–Ω"),
    )

    WITHDRAW_CHOICES = (
        ("Qiwi –Ω–∏–∫", "Qiwi –Ω–∏–∫"),
        ("Qiwi –Ω–æ–º–µ—Ä", "Qiwi –Ω–æ–º–µ—Ä"),
        ("Qiwi –∫–∞—Ä—Ç–∞", "Qiwi –∫–∞—Ä—Ç–∞"),
        ("–Æ–ú–∞–Ω–∏", "–Æ–ú–∞–Ω–∏"),
        ("–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã", "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã"),
    )

    payment_id = models.CharField(
        verbose_name="id of payment",
        max_length=255,
        null=False,
        default="Not found"
    )

    withdraw_type = models.CharField(
        max_length=30,
        choices=WITHDRAW_CHOICES,
        null=False,
        default="–ù–µ—Ç",
    )

    payment_sum = models.BigIntegerField(
        verbose_name="Sum of the payment",
        null=False,
        default=0,
    )

    date_payment = models.DateTimeField(
        auto_now_add=True,
        blank=True, 
        verbose_name="Apply date"
    )

    comission = models.BigIntegerField(
        verbose_name="Comission amt in %",
        null=False,
        default=0
    )

    status = models.CharField(
        verbose_name="Payment status",
        max_length=30,
        choices=STATUS_CHOICES,
        null=False,
        default="–°–æ–∑–¥–∞–Ω",
    )

    payeer = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        verbose_name="Person who applied for payment",
    )

    income = models.BigIntegerField(
        verbose_name="Income on apply",
        null=False,
        default=0
    )

    def __str__(self) -> str:
        return self.payeer.username

    class Meta:
        verbose_name = 'Admin transaction apply'
        verbose_name_plural = 'Admin transaction applies'

class Bot(models.Model):

    token = models.CharField(
        verbose_name='TGBot token',
        max_length=150,
        null=False,
        default=False
    )

    telegram_name = models.CharField(
        verbose_name="Telegram username",
        max_length=255,
        null=False,
        default="botfather"
    )

    name = models.CharField(
        verbose_name='TGBot name',
        max_length=100,
        null=False,
        default='–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'
    )

    owner = models.ForeignKey(
        CustomUser,
        verbose_name='Bot owner',
        on_delete=models.CASCADE,
    )

    is_active = models.BooleanField(
        verbose_name='Bot activity status',
        null=False,
        default=False,
    )

    income = models.BigIntegerField(
        verbose_name="Total bot income",
        null=False,
        default=0
    )

    def __str__(self) -> str:
        return str(self.name)

    @staticmethod
    def create_payment(sum: int, return_url:str):
        Configuration.account_id = os.environ.get("SHOP_ID")
        Configuration.secret_key = os.environ.get("SHOP_API_TOKEN")

        payment = Payment.create({
            "amount": {
                "value": sum,
                "currency": "RUB"
            },

            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": '–û–ø–ª–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥.'
        })
        payment_data = json.loads(payment.json())
        payment_url = (payment_data['confirmation'])['confirmation_url']
        payment_id = payment_data['id']

        return payment_url, payment_id

    def create_telegram_instance(self) -> str:
        """
            TODO create comments
        """
        self.bot_instance = telebot.TeleBot(self.token.strip(), parse_mode='HTML')
        self.bot_username = self.bot_instance.get_me().username

        return self.bot_username

    def start_telegram_bot_instance(self) -> None:
        """
            TODO create comments
        """
        
        def user_get_by_message(message, bot_username=self.bot_username):
            """
                –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """

            if not message.from_user.username:
                username = "NoName"
            else:
                username = message.from_user.username

            bot = Bot.objects.filter(telegram_name=bot_username).first()
            
            instance, created = TGUser.objects.update_or_create(
                telegram_id = message.from_user.id,
                username = username,
                bot=bot
            )

            return instance, created

        @self.bot_instance.callback_query_handler(lambda query: query.data == "menu")
        @self.bot_instance.message_handler(commands=['start'])
        def command_help(message):
            usr, _ = user_get_by_message(message)
            
            keyboard = telebot.types.InlineKeyboardMarkup([
                [telebot.types.InlineKeyboardButton("üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data='search_choice')],
                [telebot.types.InlineKeyboardButton("üíã –û—Ç–∑—ã–≤—ã", url="https://t.me/bikph")],
            ])
           
            
            self.bot_instance.send_photo(
                chat_id=usr.telegram_id,
                photo="https://sun9-31.userapi.com/impg/UMYV6G4oalcIesNyiYIl35blcDl5-PMWTDGBCQ/YsG3H_vYUxs.jpg?size=800x1550&quality=95&sign=5573c1012b27ea27f9af2fa89dd6c565&type=album",
                caption=f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{usr.username}</b>!\n\nü§ñ<b>–Ø - –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ –≤ —Ç—ã—Å—è—á–∞—Ö –±–∞–∑ –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</b>\n\nüîé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ä–Ω–∏—á–∫—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, Instagram –∏–ª–∏ FaceBook', 
                parse_mode="HTML", 
                reply_markup=keyboard
            )

        @self.bot_instance.message_handler(content_types=['text'], regexp='–ø–æ–∏—Å–∫')
        @self.bot_instance.callback_query_handler(lambda query: query.data == "search_choice")
        def search_choice_handler(message):
            usr, _ = user_get_by_message(message)

            keyboard = telebot.types.InlineKeyboardMarkup([
                [telebot.types.InlineKeyboardButton("üåç –í–∫–æ–Ω—Ç–∞–∫—Ç–µ", callback_data="start_search")],
                [telebot.types.InlineKeyboardButton("üìû Viber/Whats\'up", callback_data="start_search")],
                [telebot.types.InlineKeyboardButton("üì∏ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º", callback_data="start_search")],
            ])

            self.bot_instance.send_message(
                chat_id=usr.telegram_id,
                text=f"ü§© –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–∏—â–µ–º!\n\nüÜò–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\nüåç <b>–í–∫–æ–Ω—Ç–∞–∫—Ç–µ</b>\n‚îú https://vk.com/chapaevva\n‚îî vk.com/chapaevva\n\nüìû <b>Viber/Whats\'up</b>\n‚îî 79115553452\n\nüì∏ <b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º</b>\n‚îú https://www.instagram.com/beyonce\n‚îú https://instagram.com/beyonce\n‚îú www.instagram.com/beyonce\n‚îî instagram.com/beyonce\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</i>",
                parse_mode="HTML",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )

        @self.bot_instance.callback_query_handler(lambda query: query.data == "start_search")
        def start_search(message):
            usr, _ = user_get_by_message(message)

            keyboard = telebot.types.InlineKeyboardMarkup([
                [telebot.types.InlineKeyboardButton("üì• –ú–µ–Ω—é", callback_data="menu")],
            ])


            self.bot_instance.send_message(
                chat_id=usr.telegram_id,
                text=f"üíå –•–æ—Ä–æ—à–æ, <b>{usr.username}</b>, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                parse_mode="HTML",
                reply_markup=keyboard,
            )

        @self.bot_instance.message_handler(content_types=['text'], regexp="^\\+?[1-9][0-9]{7,14}$")
        @self.bot_instance.message_handler(content_types=['text'], regexp="((http|https)\:\/\/)?[a-zA-Z0-9\.\/\?\:@\-_=#]+\.([a-zA-Z]){2,6}([a-zA-Z0-9\.\&\/\?\:@\-_=#])*")  
        def link_valid(message):
            usr, _ = user_get_by_message(message)
            link = message.text.strip()
            
            if ("vk" in link):
                try:
                    vk_session = vk_api.VkApi(os.environ.get("VK_PHONE"), os.environ.get("VK_PASSWORD"))
                    vk_session.auth()

                    user = vk_session.method("users.get", {"user_ids": link.split("/")[-1]}) # –≤–º–µ—Å—Ç–æ 1 –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∞–π–¥–∏ –Ω—É–∂–Ω–æ–≥–æ —é–∑–µ—Ä–∞
                    fn = user[0]['first_name']
                    
                    morph = pymorphy2.MorphAnalyzer()
                    parsed_word = morph.parse(fn)[0]
                    g = parsed_word.tag.gender
                    
                    if g.lower() != "femn":
                        self.bot_instance.send_message(
                            usr.telegram_id,
                            f"ü•∫ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ –Ω–µ –∏—â–µ–º —Å–ª–∏–≤—ã –º—É–∂—á–∏–Ω.",
                            parse_mode="HTML"
                        )

                        return 

                except:
                    self.bot_instance.send_message(
                        usr.telegram_id,
                        f"ü•∫ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–∞ —Å –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode="HTML"
                    )
                    return
            elif ("instagram" in link)  or re.match("^\\+?[1-9][0-9]{7,14}$", link.strip()):
                
                startin_text = list("üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•")
                msg = self.bot_instance.send_message(
                    usr.telegram_id,
                    f"–í—ã–ø–æ–ª—è–Ω–µ–º –ø–æ–∏—Å–∫... üîé\n\n‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ\n\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞... <b>{0}%</b>\n{''.join(startin_text)}",
                    parse_mode="HTML"
                )

                for index in range(len(startin_text)):
                    startin_text[index] = "üü©"
                    self.bot_instance.edit_message_text(
                        f"–í—ã–ø–æ–ª—è–Ω–µ–º –ø–æ–∏—Å–∫... üîé\n\n‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ\n\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞... <b>{(index + 1) * 10}%</b>\n{''.join(startin_text)}",
                        usr.telegram_id,
                        msg.id
                    )
                    time.sleep(0.5)
                
                
                payment399_url, payment399_id = Bot.create_payment(399, f'https://t.me/{self.bot_username}')
                payment199_url, payment199_id = Bot.create_payment(199, f'https://t.me/{self.bot_username}')

                TGPayment(
                    payment_id=payment399_id,
                    amt=399,
                    owner=self.owner
                ).save()
                
                TGPayment(
                    payment_id=payment199_id,
                    amt=199,
                    owner=self.owner
                ).save()


                kb = telebot.types.InlineKeyboardMarkup([
                    [telebot.types.InlineKeyboardButton("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ üí≥|199‚ÇΩ", url=str(payment199_url).strip())],
                    [telebot.types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç üí≥|399‚ÇΩ", url=str(payment399_url).strip())],
                    [telebot.types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", callback_data="check_payment")],
                ])

                self.bot_instance.send_photo(
                    chat_id=usr.telegram_id,
                    photo="https://sun9-51.userapi.com/impg/LA8QLJqXNeiDAlF2ljlbyzAa4xE835jo6CZbEw/fUs8hTMKmIg.jpg?size=800x1550&quality=95&sign=127fdd19fa59b28301f2e325e6e5aa19&type=album",
                    caption=f"–°–ª–∏–≤ –Ω–∞–π–¥–µ–Ω ‚úÖ\n\n<b>–ò–Ω—Ç–∏–º —Ñ–æ—Ç–æ:</b>{random.randint(10, 50)} —à—Ç.\n<b>–ò–Ω—Ç–∏–º –≤–∏–¥–µ–æ:</b>{random.randint(1, 10)} —à—Ç.", 
                    parse_mode="HTML", 
                    reply_markup=kb
                )

                self.bot_instance.send_message(
                    usr.telegram_id,
                    parse_mode="HTML", 
                    reply_markup=kb
                )
            else:
                self.bot_instance.send_message(
                        usr.telegram_id,
                        f"ü•∫ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–∞ —Å –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode="HTML"
                    )
                return

        @self.bot_instance.callback_query_handler(lambda query: query.data == "check_payment")
        def check_payment(message):
            usr, _ = user_get_by_message(message)
            keyboard = telebot.types.InlineKeyboardMarkup([
                [telebot.types.InlineKeyboardButton("üì• –ú–µ–Ω—é", callback_data="menu")],
            ])

            self.bot_instance.send_message(
                chat_id=usr.telegram_id,
                text=f"üò™ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode="HTML",
                reply_markup=keyboard,
            )

        @self.bot_instance.message_handler()
        def garbage(message):
            self.bot_instance.send_message(message.chat.id, '–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —Ç–∞–∫–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å! ü•∫')

        try:
            self.bot_instance.polling(none_stop=True)
        except Exception as e:
            return f"Error: {e}"

    class Meta:
        verbose_name = 'Telegram Bot'
        verbose_name_plural = 'Telegram Bots'

class TGUser(models.Model):
    
    telegram_id = models.PositiveBigIntegerField(
        verbose_name='Telegram user\'s id',
        null=False,
        default=0,
    )

    balance = models.PositiveBigIntegerField(
        verbose_name='Telegram user\'s balance',
        null=False,
        default=0,
    )

    username = models.CharField(
        verbose_name='Telegram user\'s username',
        max_length=50,
        null=False,
        default='√Ånonymous', 
    )

    bot = models.ForeignKey(
        Bot,
        verbose_name='Telegram user\'s bot',
        on_delete=models.CASCADE,
    )
    
    def __str__(self) -> str:
        return self.username

    class Meta:
        verbose_name = 'Telegram User'
        verbose_name_plural = 'Telegram Users'

